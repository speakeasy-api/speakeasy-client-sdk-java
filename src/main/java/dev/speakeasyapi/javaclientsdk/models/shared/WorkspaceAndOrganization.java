/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * WorkspaceAndOrganization - A workspace and organization
 */

public class WorkspaceAndOrganization {

    /**
     * A speakeasy organization
     */
    @JsonProperty("organization")
    private Organization organization;

    /**
     * A speakeasy workspace
     */
    @JsonProperty("workspace")
    private Workspace workspace;

    @JsonCreator
    public WorkspaceAndOrganization(
            @JsonProperty("organization") Organization organization,
            @JsonProperty("workspace") Workspace workspace) {
        Utils.checkNotNull(organization, "organization");
        Utils.checkNotNull(workspace, "workspace");
        this.organization = organization;
        this.workspace = workspace;
    }

    /**
     * A speakeasy organization
     */
    @JsonIgnore
    public Organization organization() {
        return organization;
    }

    /**
     * A speakeasy workspace
     */
    @JsonIgnore
    public Workspace workspace() {
        return workspace;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A speakeasy organization
     */
    public WorkspaceAndOrganization withOrganization(Organization organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = organization;
        return this;
    }

    /**
     * A speakeasy workspace
     */
    public WorkspaceAndOrganization withWorkspace(Workspace workspace) {
        Utils.checkNotNull(workspace, "workspace");
        this.workspace = workspace;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkspaceAndOrganization other = (WorkspaceAndOrganization) o;
        return 
            Objects.deepEquals(this.organization, other.organization) &&
            Objects.deepEquals(this.workspace, other.workspace);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            organization,
            workspace);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkspaceAndOrganization.class,
                "organization", organization,
                "workspace", workspace);
    }
    
    public final static class Builder {
 
        private Organization organization;
 
        private Workspace workspace;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A speakeasy organization
         */
        public Builder organization(Organization organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = organization;
            return this;
        }

        /**
         * A speakeasy workspace
         */
        public Builder workspace(Workspace workspace) {
            Utils.checkNotNull(workspace, "workspace");
            this.workspace = workspace;
            return this;
        }
        
        public WorkspaceAndOrganization build() {
            return new WorkspaceAndOrganization(
                organization,
                workspace);
        }
    }
}

