/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * WorkspaceInviteResponse - A response for workspace user invite
 */

public class WorkspaceInviteResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invite_link")
    private JsonNullable<String> inviteLink;

    @JsonProperty("relationship")
    private Relationship relationship;

    @JsonCreator
    public WorkspaceInviteResponse(
            @JsonProperty("invite_link") JsonNullable<String> inviteLink,
            @JsonProperty("relationship") Relationship relationship) {
        Utils.checkNotNull(inviteLink, "inviteLink");
        Utils.checkNotNull(relationship, "relationship");
        this.inviteLink = inviteLink;
        this.relationship = relationship;
    }
    
    public WorkspaceInviteResponse(
            Relationship relationship) {
        this(JsonNullable.undefined(), relationship);
    }

    @JsonIgnore
    public JsonNullable<String> inviteLink() {
        return inviteLink;
    }

    @JsonIgnore
    public Relationship relationship() {
        return relationship;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public WorkspaceInviteResponse withInviteLink(String inviteLink) {
        Utils.checkNotNull(inviteLink, "inviteLink");
        this.inviteLink = JsonNullable.of(inviteLink);
        return this;
    }

    public WorkspaceInviteResponse withInviteLink(JsonNullable<String> inviteLink) {
        Utils.checkNotNull(inviteLink, "inviteLink");
        this.inviteLink = inviteLink;
        return this;
    }

    public WorkspaceInviteResponse withRelationship(Relationship relationship) {
        Utils.checkNotNull(relationship, "relationship");
        this.relationship = relationship;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkspaceInviteResponse other = (WorkspaceInviteResponse) o;
        return 
            Objects.deepEquals(this.inviteLink, other.inviteLink) &&
            Objects.deepEquals(this.relationship, other.relationship);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            inviteLink,
            relationship);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkspaceInviteResponse.class,
                "inviteLink", inviteLink,
                "relationship", relationship);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> inviteLink = JsonNullable.undefined();
 
        private Relationship relationship;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder inviteLink(String inviteLink) {
            Utils.checkNotNull(inviteLink, "inviteLink");
            this.inviteLink = JsonNullable.of(inviteLink);
            return this;
        }

        public Builder inviteLink(JsonNullable<String> inviteLink) {
            Utils.checkNotNull(inviteLink, "inviteLink");
            this.inviteLink = inviteLink;
            return this;
        }

        public Builder relationship(Relationship relationship) {
            Utils.checkNotNull(relationship, "relationship");
            this.relationship = relationship;
            return this;
        }
        
        public WorkspaceInviteResponse build() {
            return new WorkspaceInviteResponse(
                inviteLink,
                relationship);
        }
    }
}

