/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public class SuggestRequestBody {

    @JsonProperty("diagnostics")
    private List<Diagnostic> diagnostics;

    @JsonProperty("oas_summary")
    private OASSummary oasSummary;

    @JsonProperty("suggestion_type")
    private SuggestRequestBodySuggestionType suggestionType;

    @JsonCreator
    public SuggestRequestBody(
            @JsonProperty("diagnostics") List<Diagnostic> diagnostics,
            @JsonProperty("oas_summary") OASSummary oasSummary,
            @JsonProperty("suggestion_type") SuggestRequestBodySuggestionType suggestionType) {
        Utils.checkNotNull(diagnostics, "diagnostics");
        Utils.checkNotNull(oasSummary, "oasSummary");
        Utils.checkNotNull(suggestionType, "suggestionType");
        this.diagnostics = diagnostics;
        this.oasSummary = oasSummary;
        this.suggestionType = suggestionType;
    }

    @JsonIgnore
    public List<Diagnostic> diagnostics() {
        return diagnostics;
    }

    @JsonIgnore
    public OASSummary oasSummary() {
        return oasSummary;
    }

    @JsonIgnore
    public SuggestRequestBodySuggestionType suggestionType() {
        return suggestionType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SuggestRequestBody withDiagnostics(List<Diagnostic> diagnostics) {
        Utils.checkNotNull(diagnostics, "diagnostics");
        this.diagnostics = diagnostics;
        return this;
    }

    public SuggestRequestBody withOasSummary(OASSummary oasSummary) {
        Utils.checkNotNull(oasSummary, "oasSummary");
        this.oasSummary = oasSummary;
        return this;
    }

    public SuggestRequestBody withSuggestionType(SuggestRequestBodySuggestionType suggestionType) {
        Utils.checkNotNull(suggestionType, "suggestionType");
        this.suggestionType = suggestionType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SuggestRequestBody other = (SuggestRequestBody) o;
        return 
            Objects.deepEquals(this.diagnostics, other.diagnostics) &&
            Objects.deepEquals(this.oasSummary, other.oasSummary) &&
            Objects.deepEquals(this.suggestionType, other.suggestionType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            diagnostics,
            oasSummary,
            suggestionType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SuggestRequestBody.class,
                "diagnostics", diagnostics,
                "oasSummary", oasSummary,
                "suggestionType", suggestionType);
    }
    
    public final static class Builder {
 
        private List<Diagnostic> diagnostics;
 
        private OASSummary oasSummary;
 
        private SuggestRequestBodySuggestionType suggestionType;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder diagnostics(List<Diagnostic> diagnostics) {
            Utils.checkNotNull(diagnostics, "diagnostics");
            this.diagnostics = diagnostics;
            return this;
        }

        public Builder oasSummary(OASSummary oasSummary) {
            Utils.checkNotNull(oasSummary, "oasSummary");
            this.oasSummary = oasSummary;
            return this;
        }

        public Builder suggestionType(SuggestRequestBodySuggestionType suggestionType) {
            Utils.checkNotNull(suggestionType, "suggestionType");
            this.suggestionType = suggestionType;
            return this;
        }
        
        public SuggestRequestBody build() {
            return new SuggestRequestBody(
                diagnostics,
                oasSummary,
                suggestionType);
        }
    }
}

