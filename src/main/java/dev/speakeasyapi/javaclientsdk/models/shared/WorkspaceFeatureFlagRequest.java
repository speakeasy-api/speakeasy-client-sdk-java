/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;

/**
 * WorkspaceFeatureFlagRequest - A request to add workspace feature flags
 */

public class WorkspaceFeatureFlagRequest {

    @JsonProperty("feature_flags")
    private List<WorkspaceFeatureFlag> featureFlags;

    @JsonCreator
    public WorkspaceFeatureFlagRequest(
            @JsonProperty("feature_flags") List<WorkspaceFeatureFlag> featureFlags) {
        Utils.checkNotNull(featureFlags, "featureFlags");
        this.featureFlags = featureFlags;
    }

    @JsonIgnore
    public List<WorkspaceFeatureFlag> featureFlags() {
        return featureFlags;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public WorkspaceFeatureFlagRequest withFeatureFlags(List<WorkspaceFeatureFlag> featureFlags) {
        Utils.checkNotNull(featureFlags, "featureFlags");
        this.featureFlags = featureFlags;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkspaceFeatureFlagRequest other = (WorkspaceFeatureFlagRequest) o;
        return 
            Objects.deepEquals(this.featureFlags, other.featureFlags);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            featureFlags);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkspaceFeatureFlagRequest.class,
                "featureFlags", featureFlags);
    }
    
    public final static class Builder {
 
        private List<WorkspaceFeatureFlag> featureFlags;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder featureFlags(List<WorkspaceFeatureFlag> featureFlags) {
            Utils.checkNotNull(featureFlags, "featureFlags");
            this.featureFlags = featureFlags;
            return this;
        }
        
        public WorkspaceFeatureFlagRequest build() {
            return new WorkspaceFeatureFlagRequest(
                featureFlags);
        }
    }
}

