/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * WorkspaceFeatureFlagResponse - Workspace feature flag response
 */

public class WorkspaceFeatureFlagResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feature_flags")
    private Optional<? extends List<FeatureFlag>> featureFlags;

    @JsonCreator
    public WorkspaceFeatureFlagResponse(
            @JsonProperty("feature_flags") Optional<? extends List<FeatureFlag>> featureFlags) {
        Utils.checkNotNull(featureFlags, "featureFlags");
        this.featureFlags = featureFlags;
    }
    
    public WorkspaceFeatureFlagResponse() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FeatureFlag>> featureFlags() {
        return (Optional<List<FeatureFlag>>) featureFlags;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public WorkspaceFeatureFlagResponse withFeatureFlags(List<FeatureFlag> featureFlags) {
        Utils.checkNotNull(featureFlags, "featureFlags");
        this.featureFlags = Optional.ofNullable(featureFlags);
        return this;
    }

    public WorkspaceFeatureFlagResponse withFeatureFlags(Optional<? extends List<FeatureFlag>> featureFlags) {
        Utils.checkNotNull(featureFlags, "featureFlags");
        this.featureFlags = featureFlags;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkspaceFeatureFlagResponse other = (WorkspaceFeatureFlagResponse) o;
        return 
            Objects.deepEquals(this.featureFlags, other.featureFlags);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            featureFlags);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkspaceFeatureFlagResponse.class,
                "featureFlags", featureFlags);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<FeatureFlag>> featureFlags = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder featureFlags(List<FeatureFlag> featureFlags) {
            Utils.checkNotNull(featureFlags, "featureFlags");
            this.featureFlags = Optional.ofNullable(featureFlags);
            return this;
        }

        public Builder featureFlags(Optional<? extends List<FeatureFlag>> featureFlags) {
            Utils.checkNotNull(featureFlags, "featureFlags");
            this.featureFlags = featureFlags;
            return this;
        }
        
        public WorkspaceFeatureFlagResponse build() {
            return new WorkspaceFeatureFlagResponse(
                featureFlags);
        }
    }
}

