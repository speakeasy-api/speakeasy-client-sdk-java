/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;

/**
 * SSOMetadata - SSO metadata for a workspace
 */

public class SSOMetadata {

    @JsonProperty("sso_activated")
    private boolean ssoActivated;

    @JsonProperty("sso_domains")
    private List<String> ssoDomains;

    @JsonCreator
    public SSOMetadata(
            @JsonProperty("sso_activated") boolean ssoActivated,
            @JsonProperty("sso_domains") List<String> ssoDomains) {
        Utils.checkNotNull(ssoActivated, "ssoActivated");
        Utils.checkNotNull(ssoDomains, "ssoDomains");
        this.ssoActivated = ssoActivated;
        this.ssoDomains = ssoDomains;
    }

    @JsonIgnore
    public boolean ssoActivated() {
        return ssoActivated;
    }

    @JsonIgnore
    public List<String> ssoDomains() {
        return ssoDomains;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SSOMetadata withSsoActivated(boolean ssoActivated) {
        Utils.checkNotNull(ssoActivated, "ssoActivated");
        this.ssoActivated = ssoActivated;
        return this;
    }

    public SSOMetadata withSsoDomains(List<String> ssoDomains) {
        Utils.checkNotNull(ssoDomains, "ssoDomains");
        this.ssoDomains = ssoDomains;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SSOMetadata other = (SSOMetadata) o;
        return 
            Objects.deepEquals(this.ssoActivated, other.ssoActivated) &&
            Objects.deepEquals(this.ssoDomains, other.ssoDomains);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ssoActivated,
            ssoDomains);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SSOMetadata.class,
                "ssoActivated", ssoActivated,
                "ssoDomains", ssoDomains);
    }
    
    public final static class Builder {
 
        private Boolean ssoActivated;
 
        private List<String> ssoDomains;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ssoActivated(boolean ssoActivated) {
            Utils.checkNotNull(ssoActivated, "ssoActivated");
            this.ssoActivated = ssoActivated;
            return this;
        }

        public Builder ssoDomains(List<String> ssoDomains) {
            Utils.checkNotNull(ssoDomains, "ssoDomains");
            this.ssoDomains = ssoDomains;
            return this;
        }
        
        public SSOMetadata build() {
            return new SSOMetadata(
                ssoActivated,
                ssoDomains);
        }
    }
}

