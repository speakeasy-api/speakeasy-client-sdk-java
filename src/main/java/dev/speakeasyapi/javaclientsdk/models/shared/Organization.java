/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Organization - A speakeasy organization
 */

public class Organization {

    @JsonProperty("account_type")
    private AccountType accountType;

    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("free_trial_expiry")
    private JsonNullable<OffsetDateTime> freeTrialExpiry;

    @JsonProperty("id")
    private String id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("internal")
    private Optional<Boolean> internal;

    @JsonProperty("name")
    private String name;

    @JsonProperty("slug")
    private String slug;

    @JsonProperty("sso_activated")
    private boolean ssoActivated;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sso_connection_id")
    private JsonNullable<String> ssoConnectionId;

    @JsonProperty("telemetry_disabled")
    private boolean telemetryDisabled;

    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    @JsonCreator
    public Organization(
            @JsonProperty("account_type") AccountType accountType,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("free_trial_expiry") JsonNullable<OffsetDateTime> freeTrialExpiry,
            @JsonProperty("id") String id,
            @JsonProperty("internal") Optional<Boolean> internal,
            @JsonProperty("name") String name,
            @JsonProperty("slug") String slug,
            @JsonProperty("sso_activated") boolean ssoActivated,
            @JsonProperty("sso_connection_id") JsonNullable<String> ssoConnectionId,
            @JsonProperty("telemetry_disabled") boolean telemetryDisabled,
            @JsonProperty("updated_at") OffsetDateTime updatedAt) {
        Utils.checkNotNull(accountType, "accountType");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(freeTrialExpiry, "freeTrialExpiry");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(internal, "internal");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(ssoActivated, "ssoActivated");
        Utils.checkNotNull(ssoConnectionId, "ssoConnectionId");
        Utils.checkNotNull(telemetryDisabled, "telemetryDisabled");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.accountType = accountType;
        this.createdAt = createdAt;
        this.freeTrialExpiry = freeTrialExpiry;
        this.id = id;
        this.internal = internal;
        this.name = name;
        this.slug = slug;
        this.ssoActivated = ssoActivated;
        this.ssoConnectionId = ssoConnectionId;
        this.telemetryDisabled = telemetryDisabled;
        this.updatedAt = updatedAt;
    }
    
    public Organization(
            AccountType accountType,
            OffsetDateTime createdAt,
            String id,
            String name,
            String slug,
            boolean ssoActivated,
            boolean telemetryDisabled,
            OffsetDateTime updatedAt) {
        this(accountType, createdAt, JsonNullable.undefined(), id, Optional.empty(), name, slug, ssoActivated, JsonNullable.undefined(), telemetryDisabled, updatedAt);
    }

    @JsonIgnore
    public AccountType accountType() {
        return accountType;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> freeTrialExpiry() {
        return freeTrialExpiry;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public Optional<Boolean> internal() {
        return internal;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public String slug() {
        return slug;
    }

    @JsonIgnore
    public boolean ssoActivated() {
        return ssoActivated;
    }

    @JsonIgnore
    public JsonNullable<String> ssoConnectionId() {
        return ssoConnectionId;
    }

    @JsonIgnore
    public boolean telemetryDisabled() {
        return telemetryDisabled;
    }

    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Organization withAccountType(AccountType accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = accountType;
        return this;
    }

    public Organization withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public Organization withFreeTrialExpiry(OffsetDateTime freeTrialExpiry) {
        Utils.checkNotNull(freeTrialExpiry, "freeTrialExpiry");
        this.freeTrialExpiry = JsonNullable.of(freeTrialExpiry);
        return this;
    }

    public Organization withFreeTrialExpiry(JsonNullable<OffsetDateTime> freeTrialExpiry) {
        Utils.checkNotNull(freeTrialExpiry, "freeTrialExpiry");
        this.freeTrialExpiry = freeTrialExpiry;
        return this;
    }

    public Organization withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Organization withInternal(boolean internal) {
        Utils.checkNotNull(internal, "internal");
        this.internal = Optional.ofNullable(internal);
        return this;
    }

    public Organization withInternal(Optional<Boolean> internal) {
        Utils.checkNotNull(internal, "internal");
        this.internal = internal;
        return this;
    }

    public Organization withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Organization withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    public Organization withSsoActivated(boolean ssoActivated) {
        Utils.checkNotNull(ssoActivated, "ssoActivated");
        this.ssoActivated = ssoActivated;
        return this;
    }

    public Organization withSsoConnectionId(String ssoConnectionId) {
        Utils.checkNotNull(ssoConnectionId, "ssoConnectionId");
        this.ssoConnectionId = JsonNullable.of(ssoConnectionId);
        return this;
    }

    public Organization withSsoConnectionId(JsonNullable<String> ssoConnectionId) {
        Utils.checkNotNull(ssoConnectionId, "ssoConnectionId");
        this.ssoConnectionId = ssoConnectionId;
        return this;
    }

    public Organization withTelemetryDisabled(boolean telemetryDisabled) {
        Utils.checkNotNull(telemetryDisabled, "telemetryDisabled");
        this.telemetryDisabled = telemetryDisabled;
        return this;
    }

    public Organization withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Organization other = (Organization) o;
        return 
            Objects.deepEquals(this.accountType, other.accountType) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.freeTrialExpiry, other.freeTrialExpiry) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.internal, other.internal) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.slug, other.slug) &&
            Objects.deepEquals(this.ssoActivated, other.ssoActivated) &&
            Objects.deepEquals(this.ssoConnectionId, other.ssoConnectionId) &&
            Objects.deepEquals(this.telemetryDisabled, other.telemetryDisabled) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountType,
            createdAt,
            freeTrialExpiry,
            id,
            internal,
            name,
            slug,
            ssoActivated,
            ssoConnectionId,
            telemetryDisabled,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Organization.class,
                "accountType", accountType,
                "createdAt", createdAt,
                "freeTrialExpiry", freeTrialExpiry,
                "id", id,
                "internal", internal,
                "name", name,
                "slug", slug,
                "ssoActivated", ssoActivated,
                "ssoConnectionId", ssoConnectionId,
                "telemetryDisabled", telemetryDisabled,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private AccountType accountType;
 
        private OffsetDateTime createdAt;
 
        private JsonNullable<OffsetDateTime> freeTrialExpiry = JsonNullable.undefined();
 
        private String id;
 
        private Optional<Boolean> internal = Optional.empty();
 
        private String name;
 
        private String slug;
 
        private Boolean ssoActivated;
 
        private JsonNullable<String> ssoConnectionId = JsonNullable.undefined();
 
        private Boolean telemetryDisabled;
 
        private OffsetDateTime updatedAt;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accountType(AccountType accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = accountType;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder freeTrialExpiry(OffsetDateTime freeTrialExpiry) {
            Utils.checkNotNull(freeTrialExpiry, "freeTrialExpiry");
            this.freeTrialExpiry = JsonNullable.of(freeTrialExpiry);
            return this;
        }

        public Builder freeTrialExpiry(JsonNullable<OffsetDateTime> freeTrialExpiry) {
            Utils.checkNotNull(freeTrialExpiry, "freeTrialExpiry");
            this.freeTrialExpiry = freeTrialExpiry;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder internal(boolean internal) {
            Utils.checkNotNull(internal, "internal");
            this.internal = Optional.ofNullable(internal);
            return this;
        }

        public Builder internal(Optional<Boolean> internal) {
            Utils.checkNotNull(internal, "internal");
            this.internal = internal;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }

        public Builder ssoActivated(boolean ssoActivated) {
            Utils.checkNotNull(ssoActivated, "ssoActivated");
            this.ssoActivated = ssoActivated;
            return this;
        }

        public Builder ssoConnectionId(String ssoConnectionId) {
            Utils.checkNotNull(ssoConnectionId, "ssoConnectionId");
            this.ssoConnectionId = JsonNullable.of(ssoConnectionId);
            return this;
        }

        public Builder ssoConnectionId(JsonNullable<String> ssoConnectionId) {
            Utils.checkNotNull(ssoConnectionId, "ssoConnectionId");
            this.ssoConnectionId = ssoConnectionId;
            return this;
        }

        public Builder telemetryDisabled(boolean telemetryDisabled) {
            Utils.checkNotNull(telemetryDisabled, "telemetryDisabled");
            this.telemetryDisabled = telemetryDisabled;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public Organization build() {
            return new Organization(
                accountType,
                createdAt,
                freeTrialExpiry,
                id,
                internal,
                name,
                slug,
                ssoActivated,
                ssoConnectionId,
                telemetryDisabled,
                updatedAt);
        }
    }
}

