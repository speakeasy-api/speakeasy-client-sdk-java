/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

/**
 * Workspace - A speakeasy workspace
 */

public class Workspace {

    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    @JsonProperty("id")
    private String id;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oci_repo")
    private Optional<String> ociRepo;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oci_repo_created_at")
    private Optional<OffsetDateTime> ociRepoCreatedAt;

    @JsonProperty("organization_id")
    private String organizationId;

    @JsonProperty("slug")
    private String slug;

    @JsonProperty("telemetry_disabled")
    private boolean telemetryDisabled;

    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    @JsonProperty("verified")
    private boolean verified;

    @JsonCreator
    public Workspace(
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("id") String id,
            @JsonProperty("name") String name,
            @JsonProperty("oci_repo") Optional<String> ociRepo,
            @JsonProperty("oci_repo_created_at") Optional<OffsetDateTime> ociRepoCreatedAt,
            @JsonProperty("organization_id") String organizationId,
            @JsonProperty("slug") String slug,
            @JsonProperty("telemetry_disabled") boolean telemetryDisabled,
            @JsonProperty("updated_at") OffsetDateTime updatedAt,
            @JsonProperty("verified") boolean verified) {
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(ociRepo, "ociRepo");
        Utils.checkNotNull(ociRepoCreatedAt, "ociRepoCreatedAt");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(telemetryDisabled, "telemetryDisabled");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(verified, "verified");
        this.createdAt = createdAt;
        this.id = id;
        this.name = name;
        this.ociRepo = ociRepo;
        this.ociRepoCreatedAt = ociRepoCreatedAt;
        this.organizationId = organizationId;
        this.slug = slug;
        this.telemetryDisabled = telemetryDisabled;
        this.updatedAt = updatedAt;
        this.verified = verified;
    }
    
    public Workspace(
            OffsetDateTime createdAt,
            String id,
            String name,
            String organizationId,
            String slug,
            boolean telemetryDisabled,
            OffsetDateTime updatedAt,
            boolean verified) {
        this(createdAt, id, name, Optional.empty(), Optional.empty(), organizationId, slug, telemetryDisabled, updatedAt, verified);
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> ociRepo() {
        return ociRepo;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> ociRepoCreatedAt() {
        return ociRepoCreatedAt;
    }

    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    @JsonIgnore
    public String slug() {
        return slug;
    }

    @JsonIgnore
    public boolean telemetryDisabled() {
        return telemetryDisabled;
    }

    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public boolean verified() {
        return verified;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Workspace withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public Workspace withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Workspace withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Workspace withOciRepo(String ociRepo) {
        Utils.checkNotNull(ociRepo, "ociRepo");
        this.ociRepo = Optional.ofNullable(ociRepo);
        return this;
    }

    public Workspace withOciRepo(Optional<String> ociRepo) {
        Utils.checkNotNull(ociRepo, "ociRepo");
        this.ociRepo = ociRepo;
        return this;
    }

    public Workspace withOciRepoCreatedAt(OffsetDateTime ociRepoCreatedAt) {
        Utils.checkNotNull(ociRepoCreatedAt, "ociRepoCreatedAt");
        this.ociRepoCreatedAt = Optional.ofNullable(ociRepoCreatedAt);
        return this;
    }

    public Workspace withOciRepoCreatedAt(Optional<OffsetDateTime> ociRepoCreatedAt) {
        Utils.checkNotNull(ociRepoCreatedAt, "ociRepoCreatedAt");
        this.ociRepoCreatedAt = ociRepoCreatedAt;
        return this;
    }

    public Workspace withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public Workspace withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    public Workspace withTelemetryDisabled(boolean telemetryDisabled) {
        Utils.checkNotNull(telemetryDisabled, "telemetryDisabled");
        this.telemetryDisabled = telemetryDisabled;
        return this;
    }

    public Workspace withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public Workspace withVerified(boolean verified) {
        Utils.checkNotNull(verified, "verified");
        this.verified = verified;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Workspace other = (Workspace) o;
        return 
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.ociRepo, other.ociRepo) &&
            Objects.deepEquals(this.ociRepoCreatedAt, other.ociRepoCreatedAt) &&
            Objects.deepEquals(this.organizationId, other.organizationId) &&
            Objects.deepEquals(this.slug, other.slug) &&
            Objects.deepEquals(this.telemetryDisabled, other.telemetryDisabled) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.verified, other.verified);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            createdAt,
            id,
            name,
            ociRepo,
            ociRepoCreatedAt,
            organizationId,
            slug,
            telemetryDisabled,
            updatedAt,
            verified);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Workspace.class,
                "createdAt", createdAt,
                "id", id,
                "name", name,
                "ociRepo", ociRepo,
                "ociRepoCreatedAt", ociRepoCreatedAt,
                "organizationId", organizationId,
                "slug", slug,
                "telemetryDisabled", telemetryDisabled,
                "updatedAt", updatedAt,
                "verified", verified);
    }
    
    public final static class Builder {
 
        private OffsetDateTime createdAt;
 
        private String id;
 
        private String name;
 
        private Optional<String> ociRepo = Optional.empty();
 
        private Optional<OffsetDateTime> ociRepoCreatedAt = Optional.empty();
 
        private String organizationId;
 
        private String slug;
 
        private Boolean telemetryDisabled;
 
        private OffsetDateTime updatedAt;
 
        private Boolean verified;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder ociRepo(String ociRepo) {
            Utils.checkNotNull(ociRepo, "ociRepo");
            this.ociRepo = Optional.ofNullable(ociRepo);
            return this;
        }

        public Builder ociRepo(Optional<String> ociRepo) {
            Utils.checkNotNull(ociRepo, "ociRepo");
            this.ociRepo = ociRepo;
            return this;
        }

        public Builder ociRepoCreatedAt(OffsetDateTime ociRepoCreatedAt) {
            Utils.checkNotNull(ociRepoCreatedAt, "ociRepoCreatedAt");
            this.ociRepoCreatedAt = Optional.ofNullable(ociRepoCreatedAt);
            return this;
        }

        public Builder ociRepoCreatedAt(Optional<OffsetDateTime> ociRepoCreatedAt) {
            Utils.checkNotNull(ociRepoCreatedAt, "ociRepoCreatedAt");
            this.ociRepoCreatedAt = ociRepoCreatedAt;
            return this;
        }

        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }

        public Builder telemetryDisabled(boolean telemetryDisabled) {
            Utils.checkNotNull(telemetryDisabled, "telemetryDisabled");
            this.telemetryDisabled = telemetryDisabled;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder verified(boolean verified) {
            Utils.checkNotNull(verified, "verified");
            this.verified = verified;
            return this;
        }
        
        public Workspace build() {
            return new Workspace(
                createdAt,
                id,
                name,
                ociRepo,
                ociRepoCreatedAt,
                organizationId,
                slug,
                telemetryDisabled,
                updatedAt,
                verified);
        }
    }
}

