/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class Revision {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contents_metadata")
    private Optional<? extends RevisionContentsMetadata> contentsMetadata;

    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    @JsonProperty("digest")
    private String digest;

    /**
     * Format {namespace_id}/{revision_digest}
     */
    @JsonProperty("id")
    private String id;

    @JsonProperty("namespace_name")
    private String namespaceName;

    @JsonProperty("tags")
    private List<String> tags;

    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    @JsonCreator
    public Revision(
            @JsonProperty("contents_metadata") Optional<? extends RevisionContentsMetadata> contentsMetadata,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("digest") String digest,
            @JsonProperty("id") String id,
            @JsonProperty("namespace_name") String namespaceName,
            @JsonProperty("tags") List<String> tags,
            @JsonProperty("updated_at") OffsetDateTime updatedAt) {
        Utils.checkNotNull(contentsMetadata, "contentsMetadata");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(digest, "digest");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(namespaceName, "namespaceName");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.contentsMetadata = contentsMetadata;
        this.createdAt = createdAt;
        this.digest = digest;
        this.id = id;
        this.namespaceName = namespaceName;
        this.tags = tags;
        this.updatedAt = updatedAt;
    }
    
    public Revision(
            OffsetDateTime createdAt,
            String digest,
            String id,
            String namespaceName,
            List<String> tags,
            OffsetDateTime updatedAt) {
        this(Optional.empty(), createdAt, digest, id, namespaceName, tags, updatedAt);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RevisionContentsMetadata> contentsMetadata() {
        return (Optional<RevisionContentsMetadata>) contentsMetadata;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public String digest() {
        return digest;
    }

    /**
     * Format {namespace_id}/{revision_digest}
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String namespaceName() {
        return namespaceName;
    }

    @JsonIgnore
    public List<String> tags() {
        return tags;
    }

    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Revision withContentsMetadata(RevisionContentsMetadata contentsMetadata) {
        Utils.checkNotNull(contentsMetadata, "contentsMetadata");
        this.contentsMetadata = Optional.ofNullable(contentsMetadata);
        return this;
    }

    public Revision withContentsMetadata(Optional<? extends RevisionContentsMetadata> contentsMetadata) {
        Utils.checkNotNull(contentsMetadata, "contentsMetadata");
        this.contentsMetadata = contentsMetadata;
        return this;
    }

    public Revision withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public Revision withDigest(String digest) {
        Utils.checkNotNull(digest, "digest");
        this.digest = digest;
        return this;
    }

    /**
     * Format {namespace_id}/{revision_digest}
     */
    public Revision withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Revision withNamespaceName(String namespaceName) {
        Utils.checkNotNull(namespaceName, "namespaceName");
        this.namespaceName = namespaceName;
        return this;
    }

    public Revision withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    public Revision withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Revision other = (Revision) o;
        return 
            Objects.deepEquals(this.contentsMetadata, other.contentsMetadata) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.digest, other.digest) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.namespaceName, other.namespaceName) &&
            Objects.deepEquals(this.tags, other.tags) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            contentsMetadata,
            createdAt,
            digest,
            id,
            namespaceName,
            tags,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Revision.class,
                "contentsMetadata", contentsMetadata,
                "createdAt", createdAt,
                "digest", digest,
                "id", id,
                "namespaceName", namespaceName,
                "tags", tags,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private Optional<? extends RevisionContentsMetadata> contentsMetadata = Optional.empty();
 
        private OffsetDateTime createdAt;
 
        private String digest;
 
        private String id;
 
        private String namespaceName;
 
        private List<String> tags;
 
        private OffsetDateTime updatedAt;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder contentsMetadata(RevisionContentsMetadata contentsMetadata) {
            Utils.checkNotNull(contentsMetadata, "contentsMetadata");
            this.contentsMetadata = Optional.ofNullable(contentsMetadata);
            return this;
        }

        public Builder contentsMetadata(Optional<? extends RevisionContentsMetadata> contentsMetadata) {
            Utils.checkNotNull(contentsMetadata, "contentsMetadata");
            this.contentsMetadata = contentsMetadata;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder digest(String digest) {
            Utils.checkNotNull(digest, "digest");
            this.digest = digest;
            return this;
        }

        /**
         * Format {namespace_id}/{revision_digest}
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder namespaceName(String namespaceName) {
            Utils.checkNotNull(namespaceName, "namespaceName");
            this.namespaceName = namespaceName;
            return this;
        }

        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public Revision build() {
            return new Revision(
                contentsMetadata,
                createdAt,
                digest,
                id,
                namespaceName,
                tags,
                updatedAt);
        }
    }
}

