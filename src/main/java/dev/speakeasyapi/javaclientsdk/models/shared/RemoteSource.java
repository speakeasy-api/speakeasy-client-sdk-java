/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * RemoteSource - Remote source configuration
 */

public class RemoteSource {

    @JsonProperty("inputs")
    private List<RemoteDocument> inputs;

    /**
     * A document hosted in the registry
     */
    @JsonProperty("output")
    private RemoteDocument output;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overlays")
    private Optional<? extends List<RemoteDocument>> overlays;

    @JsonCreator
    public RemoteSource(
            @JsonProperty("inputs") List<RemoteDocument> inputs,
            @JsonProperty("output") RemoteDocument output,
            @JsonProperty("overlays") Optional<? extends List<RemoteDocument>> overlays) {
        Utils.checkNotNull(inputs, "inputs");
        Utils.checkNotNull(output, "output");
        Utils.checkNotNull(overlays, "overlays");
        this.inputs = inputs;
        this.output = output;
        this.overlays = overlays;
    }
    
    public RemoteSource(
            List<RemoteDocument> inputs,
            RemoteDocument output) {
        this(inputs, output, Optional.empty());
    }

    @JsonIgnore
    public List<RemoteDocument> inputs() {
        return inputs;
    }

    /**
     * A document hosted in the registry
     */
    @JsonIgnore
    public RemoteDocument output() {
        return output;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<RemoteDocument>> overlays() {
        return (Optional<List<RemoteDocument>>) overlays;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RemoteSource withInputs(List<RemoteDocument> inputs) {
        Utils.checkNotNull(inputs, "inputs");
        this.inputs = inputs;
        return this;
    }

    /**
     * A document hosted in the registry
     */
    public RemoteSource withOutput(RemoteDocument output) {
        Utils.checkNotNull(output, "output");
        this.output = output;
        return this;
    }

    public RemoteSource withOverlays(List<RemoteDocument> overlays) {
        Utils.checkNotNull(overlays, "overlays");
        this.overlays = Optional.ofNullable(overlays);
        return this;
    }

    public RemoteSource withOverlays(Optional<? extends List<RemoteDocument>> overlays) {
        Utils.checkNotNull(overlays, "overlays");
        this.overlays = overlays;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RemoteSource other = (RemoteSource) o;
        return 
            Objects.deepEquals(this.inputs, other.inputs) &&
            Objects.deepEquals(this.output, other.output) &&
            Objects.deepEquals(this.overlays, other.overlays);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            inputs,
            output,
            overlays);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RemoteSource.class,
                "inputs", inputs,
                "output", output,
                "overlays", overlays);
    }
    
    public final static class Builder {
 
        private List<RemoteDocument> inputs;
 
        private RemoteDocument output;
 
        private Optional<? extends List<RemoteDocument>> overlays = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder inputs(List<RemoteDocument> inputs) {
            Utils.checkNotNull(inputs, "inputs");
            this.inputs = inputs;
            return this;
        }

        /**
         * A document hosted in the registry
         */
        public Builder output(RemoteDocument output) {
            Utils.checkNotNull(output, "output");
            this.output = output;
            return this;
        }

        public Builder overlays(List<RemoteDocument> overlays) {
            Utils.checkNotNull(overlays, "overlays");
            this.overlays = Optional.ofNullable(overlays);
            return this;
        }

        public Builder overlays(Optional<? extends List<RemoteDocument>> overlays) {
            Utils.checkNotNull(overlays, "overlays");
            this.overlays = overlays;
            return this;
        }
        
        public RemoteSource build() {
            return new RemoteSource(
                inputs,
                output,
                overlays);
        }
    }
}

