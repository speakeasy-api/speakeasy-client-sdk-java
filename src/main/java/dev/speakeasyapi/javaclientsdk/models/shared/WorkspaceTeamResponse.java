/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * WorkspaceTeamResponse - Workspace team response
 */

public class WorkspaceTeamResponse {

    /**
     * SSO metadata for a workspace
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sso_metadata")
    private Optional<? extends SSOMetadata> ssoMetadata;

    @JsonProperty("users")
    private List<User> users;

    @JsonCreator
    public WorkspaceTeamResponse(
            @JsonProperty("sso_metadata") Optional<? extends SSOMetadata> ssoMetadata,
            @JsonProperty("users") List<User> users) {
        Utils.checkNotNull(ssoMetadata, "ssoMetadata");
        Utils.checkNotNull(users, "users");
        this.ssoMetadata = ssoMetadata;
        this.users = users;
    }
    
    public WorkspaceTeamResponse(
            List<User> users) {
        this(Optional.empty(), users);
    }

    /**
     * SSO metadata for a workspace
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SSOMetadata> ssoMetadata() {
        return (Optional<SSOMetadata>) ssoMetadata;
    }

    @JsonIgnore
    public List<User> users() {
        return users;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * SSO metadata for a workspace
     */
    public WorkspaceTeamResponse withSsoMetadata(SSOMetadata ssoMetadata) {
        Utils.checkNotNull(ssoMetadata, "ssoMetadata");
        this.ssoMetadata = Optional.ofNullable(ssoMetadata);
        return this;
    }

    /**
     * SSO metadata for a workspace
     */
    public WorkspaceTeamResponse withSsoMetadata(Optional<? extends SSOMetadata> ssoMetadata) {
        Utils.checkNotNull(ssoMetadata, "ssoMetadata");
        this.ssoMetadata = ssoMetadata;
        return this;
    }

    public WorkspaceTeamResponse withUsers(List<User> users) {
        Utils.checkNotNull(users, "users");
        this.users = users;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkspaceTeamResponse other = (WorkspaceTeamResponse) o;
        return 
            Objects.deepEquals(this.ssoMetadata, other.ssoMetadata) &&
            Objects.deepEquals(this.users, other.users);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ssoMetadata,
            users);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkspaceTeamResponse.class,
                "ssoMetadata", ssoMetadata,
                "users", users);
    }
    
    public final static class Builder {
 
        private Optional<? extends SSOMetadata> ssoMetadata = Optional.empty();
 
        private List<User> users;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * SSO metadata for a workspace
         */
        public Builder ssoMetadata(SSOMetadata ssoMetadata) {
            Utils.checkNotNull(ssoMetadata, "ssoMetadata");
            this.ssoMetadata = Optional.ofNullable(ssoMetadata);
            return this;
        }

        /**
         * SSO metadata for a workspace
         */
        public Builder ssoMetadata(Optional<? extends SSOMetadata> ssoMetadata) {
            Utils.checkNotNull(ssoMetadata, "ssoMetadata");
            this.ssoMetadata = ssoMetadata;
            return this;
        }

        public Builder users(List<User> users) {
            Utils.checkNotNull(users, "users");
            this.users = users;
            return this;
        }
        
        public WorkspaceTeamResponse build() {
            return new WorkspaceTeamResponse(
                ssoMetadata,
                users);
        }
    }
}

