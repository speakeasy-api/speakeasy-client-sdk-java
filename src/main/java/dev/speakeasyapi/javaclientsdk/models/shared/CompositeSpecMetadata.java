/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class CompositeSpecMetadata {

    /**
     * The subscription ID for the remote source subscription, if applicable. This indicates that the namespace is created by a remote source and thus is composite.
     */
    @JsonProperty("subscription_id")
    private String subscriptionId;

    @JsonProperty("subscription_settings")
    private RemoteSourceSubscriptionSettings subscriptionSettings;

    @JsonCreator
    public CompositeSpecMetadata(
            @JsonProperty("subscription_id") String subscriptionId,
            @JsonProperty("subscription_settings") RemoteSourceSubscriptionSettings subscriptionSettings) {
        Utils.checkNotNull(subscriptionId, "subscriptionId");
        Utils.checkNotNull(subscriptionSettings, "subscriptionSettings");
        this.subscriptionId = subscriptionId;
        this.subscriptionSettings = subscriptionSettings;
    }

    /**
     * The subscription ID for the remote source subscription, if applicable. This indicates that the namespace is created by a remote source and thus is composite.
     */
    @JsonIgnore
    public String subscriptionId() {
        return subscriptionId;
    }

    @JsonIgnore
    public RemoteSourceSubscriptionSettings subscriptionSettings() {
        return subscriptionSettings;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The subscription ID for the remote source subscription, if applicable. This indicates that the namespace is created by a remote source and thus is composite.
     */
    public CompositeSpecMetadata withSubscriptionId(String subscriptionId) {
        Utils.checkNotNull(subscriptionId, "subscriptionId");
        this.subscriptionId = subscriptionId;
        return this;
    }

    public CompositeSpecMetadata withSubscriptionSettings(RemoteSourceSubscriptionSettings subscriptionSettings) {
        Utils.checkNotNull(subscriptionSettings, "subscriptionSettings");
        this.subscriptionSettings = subscriptionSettings;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompositeSpecMetadata other = (CompositeSpecMetadata) o;
        return 
            Objects.deepEquals(this.subscriptionId, other.subscriptionId) &&
            Objects.deepEquals(this.subscriptionSettings, other.subscriptionSettings);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            subscriptionId,
            subscriptionSettings);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompositeSpecMetadata.class,
                "subscriptionId", subscriptionId,
                "subscriptionSettings", subscriptionSettings);
    }
    
    public final static class Builder {
 
        private String subscriptionId;
 
        private RemoteSourceSubscriptionSettings subscriptionSettings;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The subscription ID for the remote source subscription, if applicable. This indicates that the namespace is created by a remote source and thus is composite.
         */
        public Builder subscriptionId(String subscriptionId) {
            Utils.checkNotNull(subscriptionId, "subscriptionId");
            this.subscriptionId = subscriptionId;
            return this;
        }

        public Builder subscriptionSettings(RemoteSourceSubscriptionSettings subscriptionSettings) {
            Utils.checkNotNull(subscriptionSettings, "subscriptionSettings");
            this.subscriptionSettings = subscriptionSettings;
            return this;
        }
        
        public CompositeSpecMetadata build() {
            return new CompositeSpecMetadata(
                subscriptionId,
                subscriptionSettings);
        }
    }
}

