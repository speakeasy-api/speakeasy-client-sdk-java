/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class User {

    /**
     * Indicates whether the user is an admin.
     */
    @JsonProperty("admin")
    private boolean admin;

    /**
     * Indicates whether the user has been confirmed.
     */
    @JsonProperty("confirmed")
    private boolean confirmed;

    /**
     * Timestamp of the user's creation.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * Identifier of the default workspace.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_workspace_id")
    private JsonNullable<String> defaultWorkspaceId;

    /**
     * Display name of the user.
     */
    @JsonProperty("display_name")
    private String displayName;

    /**
     * Email address of the user.
     */
    @JsonProperty("email")
    private String email;

    /**
     * Indicates whether the email address has been verified.
     */
    @JsonProperty("email_verified")
    private boolean emailVerified;

    /**
     * GitHub handle of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("github_handle")
    private JsonNullable<String> githubHandle;

    /**
     * Unique identifier for the user.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Indicates whether the user is internal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("internal")
    private Optional<Boolean> internal;

    /**
     * Timestamp of the last login.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_login_at")
    private JsonNullable<OffsetDateTime> lastLoginAt;

    /**
     * URL of the user's photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photo_url")
    private JsonNullable<String> photoUrl;

    /**
     * Timestamp of the user's last update.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    /**
     * Indicates whether the user has been whitelisted.
     */
    @JsonProperty("whitelisted")
    private boolean whitelisted;

    @JsonCreator
    public User(
            @JsonProperty("admin") boolean admin,
            @JsonProperty("confirmed") boolean confirmed,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("default_workspace_id") JsonNullable<String> defaultWorkspaceId,
            @JsonProperty("display_name") String displayName,
            @JsonProperty("email") String email,
            @JsonProperty("email_verified") boolean emailVerified,
            @JsonProperty("github_handle") JsonNullable<String> githubHandle,
            @JsonProperty("id") String id,
            @JsonProperty("internal") Optional<Boolean> internal,
            @JsonProperty("last_login_at") JsonNullable<OffsetDateTime> lastLoginAt,
            @JsonProperty("photo_url") JsonNullable<String> photoUrl,
            @JsonProperty("updated_at") OffsetDateTime updatedAt,
            @JsonProperty("whitelisted") boolean whitelisted) {
        Utils.checkNotNull(admin, "admin");
        Utils.checkNotNull(confirmed, "confirmed");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(defaultWorkspaceId, "defaultWorkspaceId");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(emailVerified, "emailVerified");
        Utils.checkNotNull(githubHandle, "githubHandle");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(internal, "internal");
        Utils.checkNotNull(lastLoginAt, "lastLoginAt");
        Utils.checkNotNull(photoUrl, "photoUrl");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(whitelisted, "whitelisted");
        this.admin = admin;
        this.confirmed = confirmed;
        this.createdAt = createdAt;
        this.defaultWorkspaceId = defaultWorkspaceId;
        this.displayName = displayName;
        this.email = email;
        this.emailVerified = emailVerified;
        this.githubHandle = githubHandle;
        this.id = id;
        this.internal = internal;
        this.lastLoginAt = lastLoginAt;
        this.photoUrl = photoUrl;
        this.updatedAt = updatedAt;
        this.whitelisted = whitelisted;
    }
    
    public User(
            boolean admin,
            boolean confirmed,
            OffsetDateTime createdAt,
            String displayName,
            String email,
            boolean emailVerified,
            String id,
            OffsetDateTime updatedAt,
            boolean whitelisted) {
        this(admin, confirmed, createdAt, JsonNullable.undefined(), displayName, email, emailVerified, JsonNullable.undefined(), id, Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), updatedAt, whitelisted);
    }

    /**
     * Indicates whether the user is an admin.
     */
    @JsonIgnore
    public boolean admin() {
        return admin;
    }

    /**
     * Indicates whether the user has been confirmed.
     */
    @JsonIgnore
    public boolean confirmed() {
        return confirmed;
    }

    /**
     * Timestamp of the user's creation.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * Identifier of the default workspace.
     */
    @JsonIgnore
    public JsonNullable<String> defaultWorkspaceId() {
        return defaultWorkspaceId;
    }

    /**
     * Display name of the user.
     */
    @JsonIgnore
    public String displayName() {
        return displayName;
    }

    /**
     * Email address of the user.
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * Indicates whether the email address has been verified.
     */
    @JsonIgnore
    public boolean emailVerified() {
        return emailVerified;
    }

    /**
     * GitHub handle of the user.
     */
    @JsonIgnore
    public JsonNullable<String> githubHandle() {
        return githubHandle;
    }

    /**
     * Unique identifier for the user.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Indicates whether the user is internal.
     */
    @JsonIgnore
    public Optional<Boolean> internal() {
        return internal;
    }

    /**
     * Timestamp of the last login.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> lastLoginAt() {
        return lastLoginAt;
    }

    /**
     * URL of the user's photo.
     */
    @JsonIgnore
    public JsonNullable<String> photoUrl() {
        return photoUrl;
    }

    /**
     * Timestamp of the user's last update.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    /**
     * Indicates whether the user has been whitelisted.
     */
    @JsonIgnore
    public boolean whitelisted() {
        return whitelisted;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates whether the user is an admin.
     */
    public User withAdmin(boolean admin) {
        Utils.checkNotNull(admin, "admin");
        this.admin = admin;
        return this;
    }

    /**
     * Indicates whether the user has been confirmed.
     */
    public User withConfirmed(boolean confirmed) {
        Utils.checkNotNull(confirmed, "confirmed");
        this.confirmed = confirmed;
        return this;
    }

    /**
     * Timestamp of the user's creation.
     */
    public User withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Identifier of the default workspace.
     */
    public User withDefaultWorkspaceId(String defaultWorkspaceId) {
        Utils.checkNotNull(defaultWorkspaceId, "defaultWorkspaceId");
        this.defaultWorkspaceId = JsonNullable.of(defaultWorkspaceId);
        return this;
    }

    /**
     * Identifier of the default workspace.
     */
    public User withDefaultWorkspaceId(JsonNullable<String> defaultWorkspaceId) {
        Utils.checkNotNull(defaultWorkspaceId, "defaultWorkspaceId");
        this.defaultWorkspaceId = defaultWorkspaceId;
        return this;
    }

    /**
     * Display name of the user.
     */
    public User withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * Email address of the user.
     */
    public User withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Indicates whether the email address has been verified.
     */
    public User withEmailVerified(boolean emailVerified) {
        Utils.checkNotNull(emailVerified, "emailVerified");
        this.emailVerified = emailVerified;
        return this;
    }

    /**
     * GitHub handle of the user.
     */
    public User withGithubHandle(String githubHandle) {
        Utils.checkNotNull(githubHandle, "githubHandle");
        this.githubHandle = JsonNullable.of(githubHandle);
        return this;
    }

    /**
     * GitHub handle of the user.
     */
    public User withGithubHandle(JsonNullable<String> githubHandle) {
        Utils.checkNotNull(githubHandle, "githubHandle");
        this.githubHandle = githubHandle;
        return this;
    }

    /**
     * Unique identifier for the user.
     */
    public User withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Indicates whether the user is internal.
     */
    public User withInternal(boolean internal) {
        Utils.checkNotNull(internal, "internal");
        this.internal = Optional.ofNullable(internal);
        return this;
    }

    /**
     * Indicates whether the user is internal.
     */
    public User withInternal(Optional<Boolean> internal) {
        Utils.checkNotNull(internal, "internal");
        this.internal = internal;
        return this;
    }

    /**
     * Timestamp of the last login.
     */
    public User withLastLoginAt(OffsetDateTime lastLoginAt) {
        Utils.checkNotNull(lastLoginAt, "lastLoginAt");
        this.lastLoginAt = JsonNullable.of(lastLoginAt);
        return this;
    }

    /**
     * Timestamp of the last login.
     */
    public User withLastLoginAt(JsonNullable<OffsetDateTime> lastLoginAt) {
        Utils.checkNotNull(lastLoginAt, "lastLoginAt");
        this.lastLoginAt = lastLoginAt;
        return this;
    }

    /**
     * URL of the user's photo.
     */
    public User withPhotoUrl(String photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = JsonNullable.of(photoUrl);
        return this;
    }

    /**
     * URL of the user's photo.
     */
    public User withPhotoUrl(JsonNullable<String> photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = photoUrl;
        return this;
    }

    /**
     * Timestamp of the user's last update.
     */
    public User withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Indicates whether the user has been whitelisted.
     */
    public User withWhitelisted(boolean whitelisted) {
        Utils.checkNotNull(whitelisted, "whitelisted");
        this.whitelisted = whitelisted;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User other = (User) o;
        return 
            Objects.deepEquals(this.admin, other.admin) &&
            Objects.deepEquals(this.confirmed, other.confirmed) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.defaultWorkspaceId, other.defaultWorkspaceId) &&
            Objects.deepEquals(this.displayName, other.displayName) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.emailVerified, other.emailVerified) &&
            Objects.deepEquals(this.githubHandle, other.githubHandle) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.internal, other.internal) &&
            Objects.deepEquals(this.lastLoginAt, other.lastLoginAt) &&
            Objects.deepEquals(this.photoUrl, other.photoUrl) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.whitelisted, other.whitelisted);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            admin,
            confirmed,
            createdAt,
            defaultWorkspaceId,
            displayName,
            email,
            emailVerified,
            githubHandle,
            id,
            internal,
            lastLoginAt,
            photoUrl,
            updatedAt,
            whitelisted);
    }
    
    @Override
    public String toString() {
        return Utils.toString(User.class,
                "admin", admin,
                "confirmed", confirmed,
                "createdAt", createdAt,
                "defaultWorkspaceId", defaultWorkspaceId,
                "displayName", displayName,
                "email", email,
                "emailVerified", emailVerified,
                "githubHandle", githubHandle,
                "id", id,
                "internal", internal,
                "lastLoginAt", lastLoginAt,
                "photoUrl", photoUrl,
                "updatedAt", updatedAt,
                "whitelisted", whitelisted);
    }
    
    public final static class Builder {
 
        private Boolean admin;
 
        private Boolean confirmed;
 
        private OffsetDateTime createdAt;
 
        private JsonNullable<String> defaultWorkspaceId = JsonNullable.undefined();
 
        private String displayName;
 
        private String email;
 
        private Boolean emailVerified;
 
        private JsonNullable<String> githubHandle = JsonNullable.undefined();
 
        private String id;
 
        private Optional<Boolean> internal = Optional.empty();
 
        private JsonNullable<OffsetDateTime> lastLoginAt = JsonNullable.undefined();
 
        private JsonNullable<String> photoUrl = JsonNullable.undefined();
 
        private OffsetDateTime updatedAt;
 
        private Boolean whitelisted;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates whether the user is an admin.
         */
        public Builder admin(boolean admin) {
            Utils.checkNotNull(admin, "admin");
            this.admin = admin;
            return this;
        }

        /**
         * Indicates whether the user has been confirmed.
         */
        public Builder confirmed(boolean confirmed) {
            Utils.checkNotNull(confirmed, "confirmed");
            this.confirmed = confirmed;
            return this;
        }

        /**
         * Timestamp of the user's creation.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Identifier of the default workspace.
         */
        public Builder defaultWorkspaceId(String defaultWorkspaceId) {
            Utils.checkNotNull(defaultWorkspaceId, "defaultWorkspaceId");
            this.defaultWorkspaceId = JsonNullable.of(defaultWorkspaceId);
            return this;
        }

        /**
         * Identifier of the default workspace.
         */
        public Builder defaultWorkspaceId(JsonNullable<String> defaultWorkspaceId) {
            Utils.checkNotNull(defaultWorkspaceId, "defaultWorkspaceId");
            this.defaultWorkspaceId = defaultWorkspaceId;
            return this;
        }

        /**
         * Display name of the user.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * Email address of the user.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * Indicates whether the email address has been verified.
         */
        public Builder emailVerified(boolean emailVerified) {
            Utils.checkNotNull(emailVerified, "emailVerified");
            this.emailVerified = emailVerified;
            return this;
        }

        /**
         * GitHub handle of the user.
         */
        public Builder githubHandle(String githubHandle) {
            Utils.checkNotNull(githubHandle, "githubHandle");
            this.githubHandle = JsonNullable.of(githubHandle);
            return this;
        }

        /**
         * GitHub handle of the user.
         */
        public Builder githubHandle(JsonNullable<String> githubHandle) {
            Utils.checkNotNull(githubHandle, "githubHandle");
            this.githubHandle = githubHandle;
            return this;
        }

        /**
         * Unique identifier for the user.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Indicates whether the user is internal.
         */
        public Builder internal(boolean internal) {
            Utils.checkNotNull(internal, "internal");
            this.internal = Optional.ofNullable(internal);
            return this;
        }

        /**
         * Indicates whether the user is internal.
         */
        public Builder internal(Optional<Boolean> internal) {
            Utils.checkNotNull(internal, "internal");
            this.internal = internal;
            return this;
        }

        /**
         * Timestamp of the last login.
         */
        public Builder lastLoginAt(OffsetDateTime lastLoginAt) {
            Utils.checkNotNull(lastLoginAt, "lastLoginAt");
            this.lastLoginAt = JsonNullable.of(lastLoginAt);
            return this;
        }

        /**
         * Timestamp of the last login.
         */
        public Builder lastLoginAt(JsonNullable<OffsetDateTime> lastLoginAt) {
            Utils.checkNotNull(lastLoginAt, "lastLoginAt");
            this.lastLoginAt = lastLoginAt;
            return this;
        }

        /**
         * URL of the user's photo.
         */
        public Builder photoUrl(String photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = JsonNullable.of(photoUrl);
            return this;
        }

        /**
         * URL of the user's photo.
         */
        public Builder photoUrl(JsonNullable<String> photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = photoUrl;
            return this;
        }

        /**
         * Timestamp of the user's last update.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Indicates whether the user has been whitelisted.
         */
        public Builder whitelisted(boolean whitelisted) {
            Utils.checkNotNull(whitelisted, "whitelisted");
            this.whitelisted = whitelisted;
            return this;
        }
        
        public User build() {
            return new User(
                admin,
                confirmed,
                createdAt,
                defaultWorkspaceId,
                displayName,
                email,
                emailVerified,
                githubHandle,
                id,
                internal,
                lastLoginAt,
                photoUrl,
                updatedAt,
                whitelisted);
        }
    }
}

