/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * WorkspaceToken - A workspace token
 */

public class WorkspaceToken {

    @JsonProperty("alg")
    private String alg;

    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<String> createdBy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private JsonNullable<String> email;

    @JsonProperty("id")
    private String id;

    @JsonProperty("key")
    private String key;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_used")
    private JsonNullable<OffsetDateTime> lastUsed;

    @JsonProperty("name")
    private String name;

    @JsonProperty("workspace_id")
    private String workspaceId;

    @JsonCreator
    public WorkspaceToken(
            @JsonProperty("alg") String alg,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("created_by") JsonNullable<String> createdBy,
            @JsonProperty("email") JsonNullable<String> email,
            @JsonProperty("id") String id,
            @JsonProperty("key") String key,
            @JsonProperty("last_used") JsonNullable<OffsetDateTime> lastUsed,
            @JsonProperty("name") String name,
            @JsonProperty("workspace_id") String workspaceId) {
        Utils.checkNotNull(alg, "alg");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(lastUsed, "lastUsed");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.alg = alg;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.email = email;
        this.id = id;
        this.key = key;
        this.lastUsed = lastUsed;
        this.name = name;
        this.workspaceId = workspaceId;
    }
    
    public WorkspaceToken(
            String alg,
            OffsetDateTime createdAt,
            String id,
            String key,
            String name,
            String workspaceId) {
        this(alg, createdAt, JsonNullable.undefined(), JsonNullable.undefined(), id, key, JsonNullable.undefined(), name, workspaceId);
    }

    @JsonIgnore
    public String alg() {
        return alg;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public JsonNullable<String> createdBy() {
        return createdBy;
    }

    @JsonIgnore
    public JsonNullable<String> email() {
        return email;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String key() {
        return key;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> lastUsed() {
        return lastUsed;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public WorkspaceToken withAlg(String alg) {
        Utils.checkNotNull(alg, "alg");
        this.alg = alg;
        return this;
    }

    public WorkspaceToken withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public WorkspaceToken withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    public WorkspaceToken withCreatedBy(JsonNullable<String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    public WorkspaceToken withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = JsonNullable.of(email);
        return this;
    }

    public WorkspaceToken withEmail(JsonNullable<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public WorkspaceToken withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public WorkspaceToken withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public WorkspaceToken withLastUsed(OffsetDateTime lastUsed) {
        Utils.checkNotNull(lastUsed, "lastUsed");
        this.lastUsed = JsonNullable.of(lastUsed);
        return this;
    }

    public WorkspaceToken withLastUsed(JsonNullable<OffsetDateTime> lastUsed) {
        Utils.checkNotNull(lastUsed, "lastUsed");
        this.lastUsed = lastUsed;
        return this;
    }

    public WorkspaceToken withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public WorkspaceToken withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkspaceToken other = (WorkspaceToken) o;
        return 
            Objects.deepEquals(this.alg, other.alg) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.createdBy, other.createdBy) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.lastUsed, other.lastUsed) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            alg,
            createdAt,
            createdBy,
            email,
            id,
            key,
            lastUsed,
            name,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkspaceToken.class,
                "alg", alg,
                "createdAt", createdAt,
                "createdBy", createdBy,
                "email", email,
                "id", id,
                "key", key,
                "lastUsed", lastUsed,
                "name", name,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private String alg;
 
        private OffsetDateTime createdAt;
 
        private JsonNullable<String> createdBy = JsonNullable.undefined();
 
        private JsonNullable<String> email = JsonNullable.undefined();
 
        private String id;
 
        private String key;
 
        private JsonNullable<OffsetDateTime> lastUsed = JsonNullable.undefined();
 
        private String name;
 
        private String workspaceId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder alg(String alg) {
            Utils.checkNotNull(alg, "alg");
            this.alg = alg;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        public Builder createdBy(JsonNullable<String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = JsonNullable.of(email);
            return this;
        }

        public Builder email(JsonNullable<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder lastUsed(OffsetDateTime lastUsed) {
            Utils.checkNotNull(lastUsed, "lastUsed");
            this.lastUsed = JsonNullable.of(lastUsed);
            return this;
        }

        public Builder lastUsed(JsonNullable<OffsetDateTime> lastUsed) {
            Utils.checkNotNull(lastUsed, "lastUsed");
            this.lastUsed = lastUsed;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public WorkspaceToken build() {
            return new WorkspaceToken(
                alg,
                createdAt,
                createdBy,
                email,
                id,
                key,
                lastUsed,
                name,
                workspaceId);
        }
    }
}

