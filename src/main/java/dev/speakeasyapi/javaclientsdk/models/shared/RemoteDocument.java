/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * RemoteDocument - A document hosted in the registry
 */

public class RemoteDocument {

    @JsonProperty("registry_url")
    private String registryUrl;

    @JsonCreator
    public RemoteDocument(
            @JsonProperty("registry_url") String registryUrl) {
        Utils.checkNotNull(registryUrl, "registryUrl");
        this.registryUrl = registryUrl;
    }

    @JsonIgnore
    public String registryUrl() {
        return registryUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RemoteDocument withRegistryUrl(String registryUrl) {
        Utils.checkNotNull(registryUrl, "registryUrl");
        this.registryUrl = registryUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RemoteDocument other = (RemoteDocument) o;
        return 
            Objects.deepEquals(this.registryUrl, other.registryUrl);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            registryUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RemoteDocument.class,
                "registryUrl", registryUrl);
    }
    
    public final static class Builder {
 
        private String registryUrl;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder registryUrl(String registryUrl) {
            Utils.checkNotNull(registryUrl, "registryUrl");
            this.registryUrl = registryUrl;
            return this;
        }
        
        public RemoteDocument build() {
            return new RemoteDocument(
                registryUrl);
        }
    }
}

