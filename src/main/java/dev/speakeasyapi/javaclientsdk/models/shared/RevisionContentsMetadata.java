/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;


public class RevisionContentsMetadata {

    /**
     * Whether the OAS contains code samples.
     */
    @JsonProperty("contains_code_samples")
    private boolean containsCodeSamples;

    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The OAS description
     */
    @JsonProperty("description")
    private String description;

    /**
     * The hash of the contents
     */
    @JsonProperty("hash")
    private String hash;

    /**
     * The fully qualified namespace
     */
    @JsonProperty("namespace")
    private String namespace;

    /**
     * The number of overlay actions in the OAS. Will be 0 if the OAS is not an overlay.
     */
    @JsonProperty("num_overlay_actions")
    private long numOverlayActions;

    /**
     * The operation IDs contained in the OAS. Will be empty if the OAS is an overlay.
     */
    @JsonProperty("operation_ids")
    private List<String> operationIds;

    /**
     * The digest of the parent bundle
     */
    @JsonProperty("revision_digest")
    private String revisionDigest;

    /**
     * The tags contained in the OAS -- NOT the OCI tags. Will be empty if the OAS is an overlay.
     */
    @JsonProperty("tags")
    private List<String> tags;

    /**
     * The OAS title
     */
    @JsonProperty("title")
    private String title;

    @JsonProperty("type")
    private RevisionContentsMetadataType type;

    /**
     * The OAS version
     */
    @JsonProperty("version")
    private String version;

    /**
     * The workspace ID
     */
    @JsonProperty("workspace_id")
    private String workspaceId;

    @JsonCreator
    public RevisionContentsMetadata(
            @JsonProperty("contains_code_samples") boolean containsCodeSamples,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("description") String description,
            @JsonProperty("hash") String hash,
            @JsonProperty("namespace") String namespace,
            @JsonProperty("num_overlay_actions") long numOverlayActions,
            @JsonProperty("operation_ids") List<String> operationIds,
            @JsonProperty("revision_digest") String revisionDigest,
            @JsonProperty("tags") List<String> tags,
            @JsonProperty("title") String title,
            @JsonProperty("type") RevisionContentsMetadataType type,
            @JsonProperty("version") String version,
            @JsonProperty("workspace_id") String workspaceId) {
        Utils.checkNotNull(containsCodeSamples, "containsCodeSamples");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(hash, "hash");
        Utils.checkNotNull(namespace, "namespace");
        Utils.checkNotNull(numOverlayActions, "numOverlayActions");
        Utils.checkNotNull(operationIds, "operationIds");
        Utils.checkNotNull(revisionDigest, "revisionDigest");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.containsCodeSamples = containsCodeSamples;
        this.createdAt = createdAt;
        this.description = description;
        this.hash = hash;
        this.namespace = namespace;
        this.numOverlayActions = numOverlayActions;
        this.operationIds = operationIds;
        this.revisionDigest = revisionDigest;
        this.tags = tags;
        this.title = title;
        this.type = type;
        this.version = version;
        this.workspaceId = workspaceId;
    }

    /**
     * Whether the OAS contains code samples.
     */
    @JsonIgnore
    public boolean containsCodeSamples() {
        return containsCodeSamples;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The OAS description
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The hash of the contents
     */
    @JsonIgnore
    public String hash() {
        return hash;
    }

    /**
     * The fully qualified namespace
     */
    @JsonIgnore
    public String namespace() {
        return namespace;
    }

    /**
     * The number of overlay actions in the OAS. Will be 0 if the OAS is not an overlay.
     */
    @JsonIgnore
    public long numOverlayActions() {
        return numOverlayActions;
    }

    /**
     * The operation IDs contained in the OAS. Will be empty if the OAS is an overlay.
     */
    @JsonIgnore
    public List<String> operationIds() {
        return operationIds;
    }

    /**
     * The digest of the parent bundle
     */
    @JsonIgnore
    public String revisionDigest() {
        return revisionDigest;
    }

    /**
     * The tags contained in the OAS -- NOT the OCI tags. Will be empty if the OAS is an overlay.
     */
    @JsonIgnore
    public List<String> tags() {
        return tags;
    }

    /**
     * The OAS title
     */
    @JsonIgnore
    public String title() {
        return title;
    }

    @JsonIgnore
    public RevisionContentsMetadataType type() {
        return type;
    }

    /**
     * The OAS version
     */
    @JsonIgnore
    public String version() {
        return version;
    }

    /**
     * The workspace ID
     */
    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Whether the OAS contains code samples.
     */
    public RevisionContentsMetadata withContainsCodeSamples(boolean containsCodeSamples) {
        Utils.checkNotNull(containsCodeSamples, "containsCodeSamples");
        this.containsCodeSamples = containsCodeSamples;
        return this;
    }

    public RevisionContentsMetadata withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The OAS description
     */
    public RevisionContentsMetadata withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The hash of the contents
     */
    public RevisionContentsMetadata withHash(String hash) {
        Utils.checkNotNull(hash, "hash");
        this.hash = hash;
        return this;
    }

    /**
     * The fully qualified namespace
     */
    public RevisionContentsMetadata withNamespace(String namespace) {
        Utils.checkNotNull(namespace, "namespace");
        this.namespace = namespace;
        return this;
    }

    /**
     * The number of overlay actions in the OAS. Will be 0 if the OAS is not an overlay.
     */
    public RevisionContentsMetadata withNumOverlayActions(long numOverlayActions) {
        Utils.checkNotNull(numOverlayActions, "numOverlayActions");
        this.numOverlayActions = numOverlayActions;
        return this;
    }

    /**
     * The operation IDs contained in the OAS. Will be empty if the OAS is an overlay.
     */
    public RevisionContentsMetadata withOperationIds(List<String> operationIds) {
        Utils.checkNotNull(operationIds, "operationIds");
        this.operationIds = operationIds;
        return this;
    }

    /**
     * The digest of the parent bundle
     */
    public RevisionContentsMetadata withRevisionDigest(String revisionDigest) {
        Utils.checkNotNull(revisionDigest, "revisionDigest");
        this.revisionDigest = revisionDigest;
        return this;
    }

    /**
     * The tags contained in the OAS -- NOT the OCI tags. Will be empty if the OAS is an overlay.
     */
    public RevisionContentsMetadata withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    /**
     * The OAS title
     */
    public RevisionContentsMetadata withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public RevisionContentsMetadata withType(RevisionContentsMetadataType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The OAS version
     */
    public RevisionContentsMetadata withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * The workspace ID
     */
    public RevisionContentsMetadata withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RevisionContentsMetadata other = (RevisionContentsMetadata) o;
        return 
            Objects.deepEquals(this.containsCodeSamples, other.containsCodeSamples) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.hash, other.hash) &&
            Objects.deepEquals(this.namespace, other.namespace) &&
            Objects.deepEquals(this.numOverlayActions, other.numOverlayActions) &&
            Objects.deepEquals(this.operationIds, other.operationIds) &&
            Objects.deepEquals(this.revisionDigest, other.revisionDigest) &&
            Objects.deepEquals(this.tags, other.tags) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            containsCodeSamples,
            createdAt,
            description,
            hash,
            namespace,
            numOverlayActions,
            operationIds,
            revisionDigest,
            tags,
            title,
            type,
            version,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RevisionContentsMetadata.class,
                "containsCodeSamples", containsCodeSamples,
                "createdAt", createdAt,
                "description", description,
                "hash", hash,
                "namespace", namespace,
                "numOverlayActions", numOverlayActions,
                "operationIds", operationIds,
                "revisionDigest", revisionDigest,
                "tags", tags,
                "title", title,
                "type", type,
                "version", version,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private Boolean containsCodeSamples;
 
        private OffsetDateTime createdAt;
 
        private String description;
 
        private String hash;
 
        private String namespace;
 
        private Long numOverlayActions;
 
        private List<String> operationIds;
 
        private String revisionDigest;
 
        private List<String> tags;
 
        private String title;
 
        private RevisionContentsMetadataType type;
 
        private String version;
 
        private String workspaceId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether the OAS contains code samples.
         */
        public Builder containsCodeSamples(boolean containsCodeSamples) {
            Utils.checkNotNull(containsCodeSamples, "containsCodeSamples");
            this.containsCodeSamples = containsCodeSamples;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The OAS description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The hash of the contents
         */
        public Builder hash(String hash) {
            Utils.checkNotNull(hash, "hash");
            this.hash = hash;
            return this;
        }

        /**
         * The fully qualified namespace
         */
        public Builder namespace(String namespace) {
            Utils.checkNotNull(namespace, "namespace");
            this.namespace = namespace;
            return this;
        }

        /**
         * The number of overlay actions in the OAS. Will be 0 if the OAS is not an overlay.
         */
        public Builder numOverlayActions(long numOverlayActions) {
            Utils.checkNotNull(numOverlayActions, "numOverlayActions");
            this.numOverlayActions = numOverlayActions;
            return this;
        }

        /**
         * The operation IDs contained in the OAS. Will be empty if the OAS is an overlay.
         */
        public Builder operationIds(List<String> operationIds) {
            Utils.checkNotNull(operationIds, "operationIds");
            this.operationIds = operationIds;
            return this;
        }

        /**
         * The digest of the parent bundle
         */
        public Builder revisionDigest(String revisionDigest) {
            Utils.checkNotNull(revisionDigest, "revisionDigest");
            this.revisionDigest = revisionDigest;
            return this;
        }

        /**
         * The tags contained in the OAS -- NOT the OCI tags. Will be empty if the OAS is an overlay.
         */
        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        /**
         * The OAS title
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder type(RevisionContentsMetadataType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The OAS version
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * The workspace ID
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public RevisionContentsMetadata build() {
            return new RevisionContentsMetadata(
                containsCodeSamples,
                createdAt,
                description,
                hash,
                namespace,
                numOverlayActions,
                operationIds,
                revisionDigest,
                tags,
                title,
                type,
                version,
                workspaceId);
        }
    }
}

