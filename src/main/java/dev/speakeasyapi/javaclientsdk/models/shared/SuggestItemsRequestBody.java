/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public class SuggestItemsRequestBody {

    /**
     * The list of "things" to get suggestions for. One suggestion will be returned for each item in the list.
     */
    @JsonProperty("items")
    private List<String> items;

    /**
     * The prompt to use for the suggestion. Think of this as the "preamble".
     */
    @JsonProperty("prompt")
    private String prompt;

    @JsonCreator
    public SuggestItemsRequestBody(
            @JsonProperty("items") List<String> items,
            @JsonProperty("prompt") String prompt) {
        Utils.checkNotNull(items, "items");
        Utils.checkNotNull(prompt, "prompt");
        this.items = items;
        this.prompt = prompt;
    }

    /**
     * The list of "things" to get suggestions for. One suggestion will be returned for each item in the list.
     */
    @JsonIgnore
    public List<String> items() {
        return items;
    }

    /**
     * The prompt to use for the suggestion. Think of this as the "preamble".
     */
    @JsonIgnore
    public String prompt() {
        return prompt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The list of "things" to get suggestions for. One suggestion will be returned for each item in the list.
     */
    public SuggestItemsRequestBody withItems(List<String> items) {
        Utils.checkNotNull(items, "items");
        this.items = items;
        return this;
    }

    /**
     * The prompt to use for the suggestion. Think of this as the "preamble".
     */
    public SuggestItemsRequestBody withPrompt(String prompt) {
        Utils.checkNotNull(prompt, "prompt");
        this.prompt = prompt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SuggestItemsRequestBody other = (SuggestItemsRequestBody) o;
        return 
            Objects.deepEquals(this.items, other.items) &&
            Objects.deepEquals(this.prompt, other.prompt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            items,
            prompt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SuggestItemsRequestBody.class,
                "items", items,
                "prompt", prompt);
    }
    
    public final static class Builder {
 
        private List<String> items;
 
        private String prompt;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The list of "things" to get suggestions for. One suggestion will be returned for each item in the list.
         */
        public Builder items(List<String> items) {
            Utils.checkNotNull(items, "items");
            this.items = items;
            return this;
        }

        /**
         * The prompt to use for the suggestion. Think of this as the "preamble".
         */
        public Builder prompt(String prompt) {
            Utils.checkNotNull(prompt, "prompt");
            this.prompt = prompt;
            return this;
        }
        
        public SuggestItemsRequestBody build() {
            return new SuggestItemsRequestBody(
                items,
                prompt);
        }
    }
}

