/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * GithubSetupStateResponse - The state of a particular SDK targets github setup
 */

public class GithubSetupStateResponse {

    @JsonProperty("actions")
    private Actions actions;

    @JsonProperty("app_installed")
    private boolean appInstalled;

    @JsonProperty("secrets")
    private Secrets secrets;

    @JsonCreator
    public GithubSetupStateResponse(
            @JsonProperty("actions") Actions actions,
            @JsonProperty("app_installed") boolean appInstalled,
            @JsonProperty("secrets") Secrets secrets) {
        Utils.checkNotNull(actions, "actions");
        Utils.checkNotNull(appInstalled, "appInstalled");
        Utils.checkNotNull(secrets, "secrets");
        this.actions = actions;
        this.appInstalled = appInstalled;
        this.secrets = secrets;
    }

    @JsonIgnore
    public Actions actions() {
        return actions;
    }

    @JsonIgnore
    public boolean appInstalled() {
        return appInstalled;
    }

    @JsonIgnore
    public Secrets secrets() {
        return secrets;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GithubSetupStateResponse withActions(Actions actions) {
        Utils.checkNotNull(actions, "actions");
        this.actions = actions;
        return this;
    }

    public GithubSetupStateResponse withAppInstalled(boolean appInstalled) {
        Utils.checkNotNull(appInstalled, "appInstalled");
        this.appInstalled = appInstalled;
        return this;
    }

    public GithubSetupStateResponse withSecrets(Secrets secrets) {
        Utils.checkNotNull(secrets, "secrets");
        this.secrets = secrets;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GithubSetupStateResponse other = (GithubSetupStateResponse) o;
        return 
            Objects.deepEquals(this.actions, other.actions) &&
            Objects.deepEquals(this.appInstalled, other.appInstalled) &&
            Objects.deepEquals(this.secrets, other.secrets);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            actions,
            appInstalled,
            secrets);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GithubSetupStateResponse.class,
                "actions", actions,
                "appInstalled", appInstalled,
                "secrets", secrets);
    }
    
    public final static class Builder {
 
        private Actions actions;
 
        private Boolean appInstalled;
 
        private Secrets secrets;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder actions(Actions actions) {
            Utils.checkNotNull(actions, "actions");
            this.actions = actions;
            return this;
        }

        public Builder appInstalled(boolean appInstalled) {
            Utils.checkNotNull(appInstalled, "appInstalled");
            this.appInstalled = appInstalled;
            return this;
        }

        public Builder secrets(Secrets secrets) {
            Utils.checkNotNull(secrets, "secrets");
            this.secrets = secrets;
            return this;
        }
        
        public GithubSetupStateResponse build() {
            return new GithubSetupStateResponse(
                actions,
                appInstalled,
                secrets);
        }
    }
}

