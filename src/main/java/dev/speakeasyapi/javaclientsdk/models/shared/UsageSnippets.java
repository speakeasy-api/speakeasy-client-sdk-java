/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public class UsageSnippets {

    @JsonProperty("snippets")
    private List<UsageSnippet> snippets;

    @JsonCreator
    public UsageSnippets(
            @JsonProperty("snippets") List<UsageSnippet> snippets) {
        Utils.checkNotNull(snippets, "snippets");
        this.snippets = snippets;
    }

    @JsonIgnore
    public List<UsageSnippet> snippets() {
        return snippets;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UsageSnippets withSnippets(List<UsageSnippet> snippets) {
        Utils.checkNotNull(snippets, "snippets");
        this.snippets = snippets;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UsageSnippets other = (UsageSnippets) o;
        return 
            Objects.deepEquals(this.snippets, other.snippets);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            snippets);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UsageSnippets.class,
                "snippets", snippets);
    }
    
    public final static class Builder {
 
        private List<UsageSnippet> snippets;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder snippets(List<UsageSnippet> snippets) {
            Utils.checkNotNull(snippets, "snippets");
            this.snippets = snippets;
            return this;
        }
        
        public UsageSnippets build() {
            return new UsageSnippets(
                snippets);
        }
    }
}

