/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import dev.speakeasyapi.javaclientsdk.utils.SpeakeasyMetadata;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class SuggestOpenAPIRequest {

    /**
     * The schema file to upload provided as a multipart/form-data file segment.
     */
    @SpeakeasyMetadata("request:mediaType=multipart/form-data")
    private SuggestOpenAPIRequestBody requestBody;

    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-session-id")
    private String xSessionId;

    @JsonCreator
    public SuggestOpenAPIRequest(
            SuggestOpenAPIRequestBody requestBody,
            String xSessionId) {
        Utils.checkNotNull(requestBody, "requestBody");
        Utils.checkNotNull(xSessionId, "xSessionId");
        this.requestBody = requestBody;
        this.xSessionId = xSessionId;
    }

    /**
     * The schema file to upload provided as a multipart/form-data file segment.
     */
    @JsonIgnore
    public SuggestOpenAPIRequestBody requestBody() {
        return requestBody;
    }

    @JsonIgnore
    public String xSessionId() {
        return xSessionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The schema file to upload provided as a multipart/form-data file segment.
     */
    public SuggestOpenAPIRequest withRequestBody(SuggestOpenAPIRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    public SuggestOpenAPIRequest withXSessionId(String xSessionId) {
        Utils.checkNotNull(xSessionId, "xSessionId");
        this.xSessionId = xSessionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SuggestOpenAPIRequest other = (SuggestOpenAPIRequest) o;
        return 
            Objects.deepEquals(this.requestBody, other.requestBody) &&
            Objects.deepEquals(this.xSessionId, other.xSessionId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            requestBody,
            xSessionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SuggestOpenAPIRequest.class,
                "requestBody", requestBody,
                "xSessionId", xSessionId);
    }
    
    public final static class Builder {
 
        private SuggestOpenAPIRequestBody requestBody;
 
        private String xSessionId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The schema file to upload provided as a multipart/form-data file segment.
         */
        public Builder requestBody(SuggestOpenAPIRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        public Builder xSessionId(String xSessionId) {
            Utils.checkNotNull(xSessionId, "xSessionId");
            this.xSessionId = xSessionId;
            return this;
        }
        
        public SuggestOpenAPIRequest build() {
            return new SuggestOpenAPIRequest(
                requestBody,
                xSessionId);
        }
    }
}

