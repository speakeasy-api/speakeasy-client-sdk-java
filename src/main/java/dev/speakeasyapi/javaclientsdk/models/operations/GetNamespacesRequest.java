/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import dev.speakeasyapi.javaclientsdk.utils.SpeakeasyMetadata;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class GetNamespacesRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=is_composite")
    private Optional<Boolean> isComposite;

    @JsonCreator
    public GetNamespacesRequest(
            Optional<Boolean> isComposite) {
        Utils.checkNotNull(isComposite, "isComposite");
        this.isComposite = isComposite;
    }
    
    public GetNamespacesRequest() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<Boolean> isComposite() {
        return isComposite;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetNamespacesRequest withIsComposite(boolean isComposite) {
        Utils.checkNotNull(isComposite, "isComposite");
        this.isComposite = Optional.ofNullable(isComposite);
        return this;
    }

    public GetNamespacesRequest withIsComposite(Optional<Boolean> isComposite) {
        Utils.checkNotNull(isComposite, "isComposite");
        this.isComposite = isComposite;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetNamespacesRequest other = (GetNamespacesRequest) o;
        return 
            Objects.deepEquals(this.isComposite, other.isComposite);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            isComposite);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetNamespacesRequest.class,
                "isComposite", isComposite);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> isComposite = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder isComposite(boolean isComposite) {
            Utils.checkNotNull(isComposite, "isComposite");
            this.isComposite = Optional.ofNullable(isComposite);
            return this;
        }

        public Builder isComposite(Optional<Boolean> isComposite) {
            Utils.checkNotNull(isComposite, "isComposite");
            this.isComposite = isComposite;
            return this;
        }
        
        public GetNamespacesRequest build() {
            return new GetNamespacesRequest(
                isComposite);
        }
    }
}

