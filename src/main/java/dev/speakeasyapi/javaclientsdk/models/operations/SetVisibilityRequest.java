/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import dev.speakeasyapi.javaclientsdk.utils.SpeakeasyMetadata;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class SetVisibilityRequest {

    /**
     * Namespace visibility
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends SetVisibilityRequestBody> requestBody;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=namespace_name")
    private String namespaceName;

    @JsonCreator
    public SetVisibilityRequest(
            Optional<? extends SetVisibilityRequestBody> requestBody,
            String namespaceName) {
        Utils.checkNotNull(requestBody, "requestBody");
        Utils.checkNotNull(namespaceName, "namespaceName");
        this.requestBody = requestBody;
        this.namespaceName = namespaceName;
    }
    
    public SetVisibilityRequest(
            String namespaceName) {
        this(Optional.empty(), namespaceName);
    }

    /**
     * Namespace visibility
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SetVisibilityRequestBody> requestBody() {
        return (Optional<SetVisibilityRequestBody>) requestBody;
    }

    @JsonIgnore
    public String namespaceName() {
        return namespaceName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Namespace visibility
     */
    public SetVisibilityRequest withRequestBody(SetVisibilityRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }

    /**
     * Namespace visibility
     */
    public SetVisibilityRequest withRequestBody(Optional<? extends SetVisibilityRequestBody> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    public SetVisibilityRequest withNamespaceName(String namespaceName) {
        Utils.checkNotNull(namespaceName, "namespaceName");
        this.namespaceName = namespaceName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SetVisibilityRequest other = (SetVisibilityRequest) o;
        return 
            Objects.deepEquals(this.requestBody, other.requestBody) &&
            Objects.deepEquals(this.namespaceName, other.namespaceName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            requestBody,
            namespaceName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SetVisibilityRequest.class,
                "requestBody", requestBody,
                "namespaceName", namespaceName);
    }
    
    public final static class Builder {
 
        private Optional<? extends SetVisibilityRequestBody> requestBody = Optional.empty();
 
        private String namespaceName;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Namespace visibility
         */
        public Builder requestBody(SetVisibilityRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        /**
         * Namespace visibility
         */
        public Builder requestBody(Optional<? extends SetVisibilityRequestBody> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        public Builder namespaceName(String namespaceName) {
            Utils.checkNotNull(namespaceName, "namespaceName");
            this.namespaceName = namespaceName;
            return this;
        }
        
        public SetVisibilityRequest build() {
            return new SetVisibilityRequest(
                requestBody,
                namespaceName);
        }
    }
}

