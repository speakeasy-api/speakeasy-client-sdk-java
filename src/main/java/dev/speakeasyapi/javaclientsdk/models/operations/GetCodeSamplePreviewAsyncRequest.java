/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import dev.speakeasyapi.javaclientsdk.utils.SpeakeasyMetadata;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class GetCodeSamplePreviewAsyncRequest {

    /**
     * The ID of the job to check the status and retrieve results
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=jobID")
    private String jobID;

    @JsonCreator
    public GetCodeSamplePreviewAsyncRequest(
            String jobID) {
        Utils.checkNotNull(jobID, "jobID");
        this.jobID = jobID;
    }

    /**
     * The ID of the job to check the status and retrieve results
     */
    @JsonIgnore
    public String jobID() {
        return jobID;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the job to check the status and retrieve results
     */
    public GetCodeSamplePreviewAsyncRequest withJobID(String jobID) {
        Utils.checkNotNull(jobID, "jobID");
        this.jobID = jobID;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCodeSamplePreviewAsyncRequest other = (GetCodeSamplePreviewAsyncRequest) o;
        return 
            Objects.deepEquals(this.jobID, other.jobID);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            jobID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetCodeSamplePreviewAsyncRequest.class,
                "jobID", jobID);
    }
    
    public final static class Builder {
 
        private String jobID;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the job to check the status and retrieve results
         */
        public Builder jobID(String jobID) {
            Utils.checkNotNull(jobID, "jobID");
            this.jobID = jobID;
            return this;
        }
        
        public GetCodeSamplePreviewAsyncRequest build() {
            return new GetCodeSamplePreviewAsyncRequest(
                jobID);
        }
    }
}

