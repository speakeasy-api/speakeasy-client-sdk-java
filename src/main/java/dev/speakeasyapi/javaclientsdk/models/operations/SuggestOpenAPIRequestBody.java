/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import dev.speakeasyapi.javaclientsdk.models.shared.SuggestOpts;
import dev.speakeasyapi.javaclientsdk.utils.SpeakeasyMetadata;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * SuggestOpenAPIRequestBody - The schema file to upload provided as a multipart/form-data file segment.
 */

public class SuggestOpenAPIRequestBody {

    @SpeakeasyMetadata("multipartForm:name=opts,json")
    private Optional<? extends SuggestOpts> opts;

    @SpeakeasyMetadata("multipartForm:file")
    private Schema schema;

    @JsonCreator
    public SuggestOpenAPIRequestBody(
            Optional<? extends SuggestOpts> opts,
            Schema schema) {
        Utils.checkNotNull(opts, "opts");
        Utils.checkNotNull(schema, "schema");
        this.opts = opts;
        this.schema = schema;
    }
    
    public SuggestOpenAPIRequestBody(
            Schema schema) {
        this(Optional.empty(), schema);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SuggestOpts> opts() {
        return (Optional<SuggestOpts>) opts;
    }

    @JsonIgnore
    public Schema schema() {
        return schema;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SuggestOpenAPIRequestBody withOpts(SuggestOpts opts) {
        Utils.checkNotNull(opts, "opts");
        this.opts = Optional.ofNullable(opts);
        return this;
    }

    public SuggestOpenAPIRequestBody withOpts(Optional<? extends SuggestOpts> opts) {
        Utils.checkNotNull(opts, "opts");
        this.opts = opts;
        return this;
    }

    public SuggestOpenAPIRequestBody withSchema(Schema schema) {
        Utils.checkNotNull(schema, "schema");
        this.schema = schema;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SuggestOpenAPIRequestBody other = (SuggestOpenAPIRequestBody) o;
        return 
            Objects.deepEquals(this.opts, other.opts) &&
            Objects.deepEquals(this.schema, other.schema);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            opts,
            schema);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SuggestOpenAPIRequestBody.class,
                "opts", opts,
                "schema", schema);
    }
    
    public final static class Builder {
 
        private Optional<? extends SuggestOpts> opts = Optional.empty();
 
        private Schema schema;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder opts(SuggestOpts opts) {
            Utils.checkNotNull(opts, "opts");
            this.opts = Optional.ofNullable(opts);
            return this;
        }

        public Builder opts(Optional<? extends SuggestOpts> opts) {
            Utils.checkNotNull(opts, "opts");
            this.opts = opts;
            return this;
        }

        public Builder schema(Schema schema) {
            Utils.checkNotNull(schema, "schema");
            this.schema = schema;
            return this;
        }
        
        public SuggestOpenAPIRequestBody build() {
            return new SuggestOpenAPIRequestBody(
                opts,
                schema);
        }
    }
}

