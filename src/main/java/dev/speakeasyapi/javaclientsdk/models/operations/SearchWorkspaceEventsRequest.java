/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import dev.speakeasyapi.javaclientsdk.models.shared.InteractionType;
import dev.speakeasyapi.javaclientsdk.utils.SpeakeasyMetadata;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class SearchWorkspaceEventsRequest {

    /**
     * Shared execution ID for cli events across a single action.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=execution_id")
    private Optional<String> executionId;

    /**
     * A specific gen lock ID for the events.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=generate_gen_lock_id")
    private Optional<String> generateGenLockId;

    /**
     * Specified interaction type for events.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=interaction_type")
    private Optional<? extends InteractionType> interactionType;

    /**
     * Number of results to return.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Long> limit;

    /**
     * Unique identifier of the lint report digest.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=lint_report_digest")
    private Optional<String> lintReportDigest;

    /**
     * Unique identifier of the openapi diff report digest.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=openapi_diff_report_digest")
    private Optional<String> openapiDiffReportDigest;

    /**
     * Unique identifier of the source revision digest.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=source_revision_digest")
    private Optional<String> sourceRevisionDigest;

    /**
     * Whether the event was successful or not.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=success")
    private Optional<Boolean> success;

    /**
     * Unique identifier of the workspace.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=workspace_id")
    private Optional<String> workspaceId;

    @JsonCreator
    public SearchWorkspaceEventsRequest(
            Optional<String> executionId,
            Optional<String> generateGenLockId,
            Optional<? extends InteractionType> interactionType,
            Optional<Long> limit,
            Optional<String> lintReportDigest,
            Optional<String> openapiDiffReportDigest,
            Optional<String> sourceRevisionDigest,
            Optional<Boolean> success,
            Optional<String> workspaceId) {
        Utils.checkNotNull(executionId, "executionId");
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        Utils.checkNotNull(interactionType, "interactionType");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(lintReportDigest, "lintReportDigest");
        Utils.checkNotNull(openapiDiffReportDigest, "openapiDiffReportDigest");
        Utils.checkNotNull(sourceRevisionDigest, "sourceRevisionDigest");
        Utils.checkNotNull(success, "success");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.executionId = executionId;
        this.generateGenLockId = generateGenLockId;
        this.interactionType = interactionType;
        this.limit = limit;
        this.lintReportDigest = lintReportDigest;
        this.openapiDiffReportDigest = openapiDiffReportDigest;
        this.sourceRevisionDigest = sourceRevisionDigest;
        this.success = success;
        this.workspaceId = workspaceId;
    }
    
    public SearchWorkspaceEventsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Shared execution ID for cli events across a single action.
     */
    @JsonIgnore
    public Optional<String> executionId() {
        return executionId;
    }

    /**
     * A specific gen lock ID for the events.
     */
    @JsonIgnore
    public Optional<String> generateGenLockId() {
        return generateGenLockId;
    }

    /**
     * Specified interaction type for events.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InteractionType> interactionType() {
        return (Optional<InteractionType>) interactionType;
    }

    /**
     * Number of results to return.
     */
    @JsonIgnore
    public Optional<Long> limit() {
        return limit;
    }

    /**
     * Unique identifier of the lint report digest.
     */
    @JsonIgnore
    public Optional<String> lintReportDigest() {
        return lintReportDigest;
    }

    /**
     * Unique identifier of the openapi diff report digest.
     */
    @JsonIgnore
    public Optional<String> openapiDiffReportDigest() {
        return openapiDiffReportDigest;
    }

    /**
     * Unique identifier of the source revision digest.
     */
    @JsonIgnore
    public Optional<String> sourceRevisionDigest() {
        return sourceRevisionDigest;
    }

    /**
     * Whether the event was successful or not.
     */
    @JsonIgnore
    public Optional<Boolean> success() {
        return success;
    }

    /**
     * Unique identifier of the workspace.
     */
    @JsonIgnore
    public Optional<String> workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Shared execution ID for cli events across a single action.
     */
    public SearchWorkspaceEventsRequest withExecutionId(String executionId) {
        Utils.checkNotNull(executionId, "executionId");
        this.executionId = Optional.ofNullable(executionId);
        return this;
    }

    /**
     * Shared execution ID for cli events across a single action.
     */
    public SearchWorkspaceEventsRequest withExecutionId(Optional<String> executionId) {
        Utils.checkNotNull(executionId, "executionId");
        this.executionId = executionId;
        return this;
    }

    /**
     * A specific gen lock ID for the events.
     */
    public SearchWorkspaceEventsRequest withGenerateGenLockId(String generateGenLockId) {
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        this.generateGenLockId = Optional.ofNullable(generateGenLockId);
        return this;
    }

    /**
     * A specific gen lock ID for the events.
     */
    public SearchWorkspaceEventsRequest withGenerateGenLockId(Optional<String> generateGenLockId) {
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        this.generateGenLockId = generateGenLockId;
        return this;
    }

    /**
     * Specified interaction type for events.
     */
    public SearchWorkspaceEventsRequest withInteractionType(InteractionType interactionType) {
        Utils.checkNotNull(interactionType, "interactionType");
        this.interactionType = Optional.ofNullable(interactionType);
        return this;
    }

    /**
     * Specified interaction type for events.
     */
    public SearchWorkspaceEventsRequest withInteractionType(Optional<? extends InteractionType> interactionType) {
        Utils.checkNotNull(interactionType, "interactionType");
        this.interactionType = interactionType;
        return this;
    }

    /**
     * Number of results to return.
     */
    public SearchWorkspaceEventsRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    /**
     * Number of results to return.
     */
    public SearchWorkspaceEventsRequest withLimit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * Unique identifier of the lint report digest.
     */
    public SearchWorkspaceEventsRequest withLintReportDigest(String lintReportDigest) {
        Utils.checkNotNull(lintReportDigest, "lintReportDigest");
        this.lintReportDigest = Optional.ofNullable(lintReportDigest);
        return this;
    }

    /**
     * Unique identifier of the lint report digest.
     */
    public SearchWorkspaceEventsRequest withLintReportDigest(Optional<String> lintReportDigest) {
        Utils.checkNotNull(lintReportDigest, "lintReportDigest");
        this.lintReportDigest = lintReportDigest;
        return this;
    }

    /**
     * Unique identifier of the openapi diff report digest.
     */
    public SearchWorkspaceEventsRequest withOpenapiDiffReportDigest(String openapiDiffReportDigest) {
        Utils.checkNotNull(openapiDiffReportDigest, "openapiDiffReportDigest");
        this.openapiDiffReportDigest = Optional.ofNullable(openapiDiffReportDigest);
        return this;
    }

    /**
     * Unique identifier of the openapi diff report digest.
     */
    public SearchWorkspaceEventsRequest withOpenapiDiffReportDigest(Optional<String> openapiDiffReportDigest) {
        Utils.checkNotNull(openapiDiffReportDigest, "openapiDiffReportDigest");
        this.openapiDiffReportDigest = openapiDiffReportDigest;
        return this;
    }

    /**
     * Unique identifier of the source revision digest.
     */
    public SearchWorkspaceEventsRequest withSourceRevisionDigest(String sourceRevisionDigest) {
        Utils.checkNotNull(sourceRevisionDigest, "sourceRevisionDigest");
        this.sourceRevisionDigest = Optional.ofNullable(sourceRevisionDigest);
        return this;
    }

    /**
     * Unique identifier of the source revision digest.
     */
    public SearchWorkspaceEventsRequest withSourceRevisionDigest(Optional<String> sourceRevisionDigest) {
        Utils.checkNotNull(sourceRevisionDigest, "sourceRevisionDigest");
        this.sourceRevisionDigest = sourceRevisionDigest;
        return this;
    }

    /**
     * Whether the event was successful or not.
     */
    public SearchWorkspaceEventsRequest withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = Optional.ofNullable(success);
        return this;
    }

    /**
     * Whether the event was successful or not.
     */
    public SearchWorkspaceEventsRequest withSuccess(Optional<Boolean> success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    /**
     * Unique identifier of the workspace.
     */
    public SearchWorkspaceEventsRequest withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = Optional.ofNullable(workspaceId);
        return this;
    }

    /**
     * Unique identifier of the workspace.
     */
    public SearchWorkspaceEventsRequest withWorkspaceId(Optional<String> workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchWorkspaceEventsRequest other = (SearchWorkspaceEventsRequest) o;
        return 
            Objects.deepEquals(this.executionId, other.executionId) &&
            Objects.deepEquals(this.generateGenLockId, other.generateGenLockId) &&
            Objects.deepEquals(this.interactionType, other.interactionType) &&
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.lintReportDigest, other.lintReportDigest) &&
            Objects.deepEquals(this.openapiDiffReportDigest, other.openapiDiffReportDigest) &&
            Objects.deepEquals(this.sourceRevisionDigest, other.sourceRevisionDigest) &&
            Objects.deepEquals(this.success, other.success) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            executionId,
            generateGenLockId,
            interactionType,
            limit,
            lintReportDigest,
            openapiDiffReportDigest,
            sourceRevisionDigest,
            success,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchWorkspaceEventsRequest.class,
                "executionId", executionId,
                "generateGenLockId", generateGenLockId,
                "interactionType", interactionType,
                "limit", limit,
                "lintReportDigest", lintReportDigest,
                "openapiDiffReportDigest", openapiDiffReportDigest,
                "sourceRevisionDigest", sourceRevisionDigest,
                "success", success,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private Optional<String> executionId = Optional.empty();
 
        private Optional<String> generateGenLockId = Optional.empty();
 
        private Optional<? extends InteractionType> interactionType = Optional.empty();
 
        private Optional<Long> limit = Optional.empty();
 
        private Optional<String> lintReportDigest = Optional.empty();
 
        private Optional<String> openapiDiffReportDigest = Optional.empty();
 
        private Optional<String> sourceRevisionDigest = Optional.empty();
 
        private Optional<Boolean> success = Optional.empty();
 
        private Optional<String> workspaceId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Shared execution ID for cli events across a single action.
         */
        public Builder executionId(String executionId) {
            Utils.checkNotNull(executionId, "executionId");
            this.executionId = Optional.ofNullable(executionId);
            return this;
        }

        /**
         * Shared execution ID for cli events across a single action.
         */
        public Builder executionId(Optional<String> executionId) {
            Utils.checkNotNull(executionId, "executionId");
            this.executionId = executionId;
            return this;
        }

        /**
         * A specific gen lock ID for the events.
         */
        public Builder generateGenLockId(String generateGenLockId) {
            Utils.checkNotNull(generateGenLockId, "generateGenLockId");
            this.generateGenLockId = Optional.ofNullable(generateGenLockId);
            return this;
        }

        /**
         * A specific gen lock ID for the events.
         */
        public Builder generateGenLockId(Optional<String> generateGenLockId) {
            Utils.checkNotNull(generateGenLockId, "generateGenLockId");
            this.generateGenLockId = generateGenLockId;
            return this;
        }

        /**
         * Specified interaction type for events.
         */
        public Builder interactionType(InteractionType interactionType) {
            Utils.checkNotNull(interactionType, "interactionType");
            this.interactionType = Optional.ofNullable(interactionType);
            return this;
        }

        /**
         * Specified interaction type for events.
         */
        public Builder interactionType(Optional<? extends InteractionType> interactionType) {
            Utils.checkNotNull(interactionType, "interactionType");
            this.interactionType = interactionType;
            return this;
        }

        /**
         * Number of results to return.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * Number of results to return.
         */
        public Builder limit(Optional<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        /**
         * Unique identifier of the lint report digest.
         */
        public Builder lintReportDigest(String lintReportDigest) {
            Utils.checkNotNull(lintReportDigest, "lintReportDigest");
            this.lintReportDigest = Optional.ofNullable(lintReportDigest);
            return this;
        }

        /**
         * Unique identifier of the lint report digest.
         */
        public Builder lintReportDigest(Optional<String> lintReportDigest) {
            Utils.checkNotNull(lintReportDigest, "lintReportDigest");
            this.lintReportDigest = lintReportDigest;
            return this;
        }

        /**
         * Unique identifier of the openapi diff report digest.
         */
        public Builder openapiDiffReportDigest(String openapiDiffReportDigest) {
            Utils.checkNotNull(openapiDiffReportDigest, "openapiDiffReportDigest");
            this.openapiDiffReportDigest = Optional.ofNullable(openapiDiffReportDigest);
            return this;
        }

        /**
         * Unique identifier of the openapi diff report digest.
         */
        public Builder openapiDiffReportDigest(Optional<String> openapiDiffReportDigest) {
            Utils.checkNotNull(openapiDiffReportDigest, "openapiDiffReportDigest");
            this.openapiDiffReportDigest = openapiDiffReportDigest;
            return this;
        }

        /**
         * Unique identifier of the source revision digest.
         */
        public Builder sourceRevisionDigest(String sourceRevisionDigest) {
            Utils.checkNotNull(sourceRevisionDigest, "sourceRevisionDigest");
            this.sourceRevisionDigest = Optional.ofNullable(sourceRevisionDigest);
            return this;
        }

        /**
         * Unique identifier of the source revision digest.
         */
        public Builder sourceRevisionDigest(Optional<String> sourceRevisionDigest) {
            Utils.checkNotNull(sourceRevisionDigest, "sourceRevisionDigest");
            this.sourceRevisionDigest = sourceRevisionDigest;
            return this;
        }

        /**
         * Whether the event was successful or not.
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = Optional.ofNullable(success);
            return this;
        }

        /**
         * Whether the event was successful or not.
         */
        public Builder success(Optional<Boolean> success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }

        /**
         * Unique identifier of the workspace.
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = Optional.ofNullable(workspaceId);
            return this;
        }

        /**
         * Unique identifier of the workspace.
         */
        public Builder workspaceId(Optional<String> workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public SearchWorkspaceEventsRequest build() {
            return new SearchWorkspaceEventsRequest(
                executionId,
                generateGenLockId,
                interactionType,
                limit,
                lintReportDigest,
                openapiDiffReportDigest,
                sourceRevisionDigest,
                success,
                workspaceId);
        }
    }
}

