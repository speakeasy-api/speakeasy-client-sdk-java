/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.speakeasyapi.javaclientsdk.models.shared.CodeSamplesJobStatus;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * GenerateCodeSamplePreviewAsyncResponseBody - Job accepted, returns a job ID to poll for status and result
 */

public class GenerateCodeSamplePreviewAsyncResponseBody {

    /**
     * The job ID for polling
     */
    @JsonProperty("job_id")
    private String jobId;

    /**
     * The current status of the job. Possible values are `pending` or `running`.
     */
    @JsonProperty("status")
    private CodeSamplesJobStatus status;

    @JsonCreator
    public GenerateCodeSamplePreviewAsyncResponseBody(
            @JsonProperty("job_id") String jobId,
            @JsonProperty("status") CodeSamplesJobStatus status) {
        Utils.checkNotNull(jobId, "jobId");
        Utils.checkNotNull(status, "status");
        this.jobId = jobId;
        this.status = status;
    }

    /**
     * The job ID for polling
     */
    @JsonIgnore
    public String jobId() {
        return jobId;
    }

    /**
     * The current status of the job. Possible values are `pending` or `running`.
     */
    @JsonIgnore
    public CodeSamplesJobStatus status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The job ID for polling
     */
    public GenerateCodeSamplePreviewAsyncResponseBody withJobId(String jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = jobId;
        return this;
    }

    /**
     * The current status of the job. Possible values are `pending` or `running`.
     */
    public GenerateCodeSamplePreviewAsyncResponseBody withStatus(CodeSamplesJobStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GenerateCodeSamplePreviewAsyncResponseBody other = (GenerateCodeSamplePreviewAsyncResponseBody) o;
        return 
            Objects.deepEquals(this.jobId, other.jobId) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            jobId,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GenerateCodeSamplePreviewAsyncResponseBody.class,
                "jobId", jobId,
                "status", status);
    }
    
    public final static class Builder {
 
        private String jobId;
 
        private CodeSamplesJobStatus status;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The job ID for polling
         */
        public Builder jobId(String jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = jobId;
            return this;
        }

        /**
         * The current status of the job. Possible values are `pending` or `running`.
         */
        public Builder status(CodeSamplesJobStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public GenerateCodeSamplePreviewAsyncResponseBody build() {
            return new GenerateCodeSamplePreviewAsyncResponseBody(
                jobId,
                status);
        }
    }
}

