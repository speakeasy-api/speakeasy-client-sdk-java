/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import dev.speakeasyapi.javaclientsdk.utils.LazySingletonValue;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * ArchiveNamespaceRequestBody - Archived status
 */

public class ArchiveNamespaceRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    private Optional<Boolean> archived;

    @JsonCreator
    public ArchiveNamespaceRequestBody(
            @JsonProperty("archived") Optional<Boolean> archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = archived;
    }
    
    public ArchiveNamespaceRequestBody() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<Boolean> archived() {
        return archived;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ArchiveNamespaceRequestBody withArchived(boolean archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = Optional.ofNullable(archived);
        return this;
    }

    public ArchiveNamespaceRequestBody withArchived(Optional<Boolean> archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = archived;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ArchiveNamespaceRequestBody other = (ArchiveNamespaceRequestBody) o;
        return 
            Objects.deepEquals(this.archived, other.archived);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            archived);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ArchiveNamespaceRequestBody.class,
                "archived", archived);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> archived;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder archived(boolean archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = Optional.ofNullable(archived);
            return this;
        }

        public Builder archived(Optional<Boolean> archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = archived;
            return this;
        }
        
        public ArchiveNamespaceRequestBody build() {
            if (archived == null) {
                archived = _SINGLETON_VALUE_Archived.value();
            }            return new ArchiveNamespaceRequestBody(
                archived);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Archived =
                new LazySingletonValue<>(
                        "archived",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});
    }
}

