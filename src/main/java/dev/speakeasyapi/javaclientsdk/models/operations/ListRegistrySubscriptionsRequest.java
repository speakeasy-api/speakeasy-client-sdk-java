/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.speakeasyapi.javaclientsdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import dev.speakeasyapi.javaclientsdk.models.shared.SubscriptionType;
import dev.speakeasyapi.javaclientsdk.utils.SpeakeasyMetadata;
import dev.speakeasyapi.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class ListRegistrySubscriptionsRequest {

    /**
     * The event type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=event_type")
    private Optional<String> eventType;

    /**
     * The namespace name
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=namespace_name")
    private Optional<String> namespaceName;

    /**
     * The subscription type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=subscription_type")
    private Optional<? extends SubscriptionType> subscriptionType;

    /**
     * The tag
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=tag")
    private Optional<String> tag;

    /**
     * The workspace ID
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=workspace_id")
    private Optional<String> workspaceId;

    @JsonCreator
    public ListRegistrySubscriptionsRequest(
            Optional<String> eventType,
            Optional<String> namespaceName,
            Optional<? extends SubscriptionType> subscriptionType,
            Optional<String> tag,
            Optional<String> workspaceId) {
        Utils.checkNotNull(eventType, "eventType");
        Utils.checkNotNull(namespaceName, "namespaceName");
        Utils.checkNotNull(subscriptionType, "subscriptionType");
        Utils.checkNotNull(tag, "tag");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.eventType = eventType;
        this.namespaceName = namespaceName;
        this.subscriptionType = subscriptionType;
        this.tag = tag;
        this.workspaceId = workspaceId;
    }
    
    public ListRegistrySubscriptionsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The event type
     */
    @JsonIgnore
    public Optional<String> eventType() {
        return eventType;
    }

    /**
     * The namespace name
     */
    @JsonIgnore
    public Optional<String> namespaceName() {
        return namespaceName;
    }

    /**
     * The subscription type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SubscriptionType> subscriptionType() {
        return (Optional<SubscriptionType>) subscriptionType;
    }

    /**
     * The tag
     */
    @JsonIgnore
    public Optional<String> tag() {
        return tag;
    }

    /**
     * The workspace ID
     */
    @JsonIgnore
    public Optional<String> workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The event type
     */
    public ListRegistrySubscriptionsRequest withEventType(String eventType) {
        Utils.checkNotNull(eventType, "eventType");
        this.eventType = Optional.ofNullable(eventType);
        return this;
    }

    /**
     * The event type
     */
    public ListRegistrySubscriptionsRequest withEventType(Optional<String> eventType) {
        Utils.checkNotNull(eventType, "eventType");
        this.eventType = eventType;
        return this;
    }

    /**
     * The namespace name
     */
    public ListRegistrySubscriptionsRequest withNamespaceName(String namespaceName) {
        Utils.checkNotNull(namespaceName, "namespaceName");
        this.namespaceName = Optional.ofNullable(namespaceName);
        return this;
    }

    /**
     * The namespace name
     */
    public ListRegistrySubscriptionsRequest withNamespaceName(Optional<String> namespaceName) {
        Utils.checkNotNull(namespaceName, "namespaceName");
        this.namespaceName = namespaceName;
        return this;
    }

    /**
     * The subscription type
     */
    public ListRegistrySubscriptionsRequest withSubscriptionType(SubscriptionType subscriptionType) {
        Utils.checkNotNull(subscriptionType, "subscriptionType");
        this.subscriptionType = Optional.ofNullable(subscriptionType);
        return this;
    }

    /**
     * The subscription type
     */
    public ListRegistrySubscriptionsRequest withSubscriptionType(Optional<? extends SubscriptionType> subscriptionType) {
        Utils.checkNotNull(subscriptionType, "subscriptionType");
        this.subscriptionType = subscriptionType;
        return this;
    }

    /**
     * The tag
     */
    public ListRegistrySubscriptionsRequest withTag(String tag) {
        Utils.checkNotNull(tag, "tag");
        this.tag = Optional.ofNullable(tag);
        return this;
    }

    /**
     * The tag
     */
    public ListRegistrySubscriptionsRequest withTag(Optional<String> tag) {
        Utils.checkNotNull(tag, "tag");
        this.tag = tag;
        return this;
    }

    /**
     * The workspace ID
     */
    public ListRegistrySubscriptionsRequest withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = Optional.ofNullable(workspaceId);
        return this;
    }

    /**
     * The workspace ID
     */
    public ListRegistrySubscriptionsRequest withWorkspaceId(Optional<String> workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListRegistrySubscriptionsRequest other = (ListRegistrySubscriptionsRequest) o;
        return 
            Objects.deepEquals(this.eventType, other.eventType) &&
            Objects.deepEquals(this.namespaceName, other.namespaceName) &&
            Objects.deepEquals(this.subscriptionType, other.subscriptionType) &&
            Objects.deepEquals(this.tag, other.tag) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            eventType,
            namespaceName,
            subscriptionType,
            tag,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListRegistrySubscriptionsRequest.class,
                "eventType", eventType,
                "namespaceName", namespaceName,
                "subscriptionType", subscriptionType,
                "tag", tag,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private Optional<String> eventType = Optional.empty();
 
        private Optional<String> namespaceName = Optional.empty();
 
        private Optional<? extends SubscriptionType> subscriptionType = Optional.empty();
 
        private Optional<String> tag = Optional.empty();
 
        private Optional<String> workspaceId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The event type
         */
        public Builder eventType(String eventType) {
            Utils.checkNotNull(eventType, "eventType");
            this.eventType = Optional.ofNullable(eventType);
            return this;
        }

        /**
         * The event type
         */
        public Builder eventType(Optional<String> eventType) {
            Utils.checkNotNull(eventType, "eventType");
            this.eventType = eventType;
            return this;
        }

        /**
         * The namespace name
         */
        public Builder namespaceName(String namespaceName) {
            Utils.checkNotNull(namespaceName, "namespaceName");
            this.namespaceName = Optional.ofNullable(namespaceName);
            return this;
        }

        /**
         * The namespace name
         */
        public Builder namespaceName(Optional<String> namespaceName) {
            Utils.checkNotNull(namespaceName, "namespaceName");
            this.namespaceName = namespaceName;
            return this;
        }

        /**
         * The subscription type
         */
        public Builder subscriptionType(SubscriptionType subscriptionType) {
            Utils.checkNotNull(subscriptionType, "subscriptionType");
            this.subscriptionType = Optional.ofNullable(subscriptionType);
            return this;
        }

        /**
         * The subscription type
         */
        public Builder subscriptionType(Optional<? extends SubscriptionType> subscriptionType) {
            Utils.checkNotNull(subscriptionType, "subscriptionType");
            this.subscriptionType = subscriptionType;
            return this;
        }

        /**
         * The tag
         */
        public Builder tag(String tag) {
            Utils.checkNotNull(tag, "tag");
            this.tag = Optional.ofNullable(tag);
            return this;
        }

        /**
         * The tag
         */
        public Builder tag(Optional<String> tag) {
            Utils.checkNotNull(tag, "tag");
            this.tag = tag;
            return this;
        }

        /**
         * The workspace ID
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = Optional.ofNullable(workspaceId);
            return this;
        }

        /**
         * The workspace ID
         */
        public Builder workspaceId(Optional<String> workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public ListRegistrySubscriptionsRequest build() {
            return new ListRegistrySubscriptionsRequest(
                eventType,
                namespaceName,
                subscriptionType,
                tag,
                workspaceId);
        }
    }
}

