/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.SpeakeasyMetadata;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class FetchPublishingPRsRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=generate_gen_lock_id")
    private String generateGenLockId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=org")
    private String org;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=repo")
    private String repo;

    @JsonCreator
    public FetchPublishingPRsRequest(
            String generateGenLockId,
            String org,
            String repo) {
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        Utils.checkNotNull(org, "org");
        Utils.checkNotNull(repo, "repo");
        this.generateGenLockId = generateGenLockId;
        this.org = org;
        this.repo = repo;
    }

    @JsonIgnore
    public String generateGenLockId() {
        return generateGenLockId;
    }

    @JsonIgnore
    public String org() {
        return org;
    }

    @JsonIgnore
    public String repo() {
        return repo;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FetchPublishingPRsRequest withGenerateGenLockId(String generateGenLockId) {
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        this.generateGenLockId = generateGenLockId;
        return this;
    }

    public FetchPublishingPRsRequest withOrg(String org) {
        Utils.checkNotNull(org, "org");
        this.org = org;
        return this;
    }

    public FetchPublishingPRsRequest withRepo(String repo) {
        Utils.checkNotNull(repo, "repo");
        this.repo = repo;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FetchPublishingPRsRequest other = (FetchPublishingPRsRequest) o;
        return 
            java.util.Objects.deepEquals(this.generateGenLockId, other.generateGenLockId) &&
            java.util.Objects.deepEquals(this.org, other.org) &&
            java.util.Objects.deepEquals(this.repo, other.repo);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            generateGenLockId,
            org,
            repo);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FetchPublishingPRsRequest.class,
                "generateGenLockId", generateGenLockId,
                "org", org,
                "repo", repo);
    }
    
    public final static class Builder {
 
        private String generateGenLockId;
 
        private String org;
 
        private String repo;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder generateGenLockId(String generateGenLockId) {
            Utils.checkNotNull(generateGenLockId, "generateGenLockId");
            this.generateGenLockId = generateGenLockId;
            return this;
        }

        public Builder org(String org) {
            Utils.checkNotNull(org, "org");
            this.org = org;
            return this;
        }

        public Builder repo(String repo) {
            Utils.checkNotNull(repo, "repo");
            this.repo = repo;
            return this;
        }
        
        public FetchPublishingPRsRequest build() {
            return new FetchPublishingPRsRequest(
                generateGenLockId,
                org,
                repo);
        }
    }
}

