/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * Annotations - Annotations
 */

public class Annotations {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.authors")
    private Optional<? extends String> orgOpencontainersImageAuthors;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.base.digest")
    private Optional<? extends String> orgOpencontainersImageBaseDigest;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.base.name")
    private Optional<? extends String> orgOpencontainersImageBaseName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.created")
    private Optional<? extends String> orgOpencontainersImageCreated;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.description")
    private Optional<? extends String> orgOpencontainersImageDescription;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.documentation")
    private Optional<? extends String> orgOpencontainersImageDocumentation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.licenses")
    private Optional<? extends String> orgOpencontainersImageLicenses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.ref.name")
    private Optional<? extends String> orgOpencontainersImageRefName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.revision")
    private Optional<? extends String> orgOpencontainersImageRevision;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.source")
    private Optional<? extends String> orgOpencontainersImageSource;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.title")
    private Optional<? extends String> orgOpencontainersImageTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.url")
    private Optional<? extends String> orgOpencontainersImageUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.vendor")
    private Optional<? extends String> orgOpencontainersImageVendor;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.version")
    private Optional<? extends String> orgOpencontainersImageVersion;

    public Annotations(
            @JsonProperty("org.opencontainers.image.authors") Optional<? extends String> orgOpencontainersImageAuthors,
            @JsonProperty("org.opencontainers.image.base.digest") Optional<? extends String> orgOpencontainersImageBaseDigest,
            @JsonProperty("org.opencontainers.image.base.name") Optional<? extends String> orgOpencontainersImageBaseName,
            @JsonProperty("org.opencontainers.image.created") Optional<? extends String> orgOpencontainersImageCreated,
            @JsonProperty("org.opencontainers.image.description") Optional<? extends String> orgOpencontainersImageDescription,
            @JsonProperty("org.opencontainers.image.documentation") Optional<? extends String> orgOpencontainersImageDocumentation,
            @JsonProperty("org.opencontainers.image.licenses") Optional<? extends String> orgOpencontainersImageLicenses,
            @JsonProperty("org.opencontainers.image.ref.name") Optional<? extends String> orgOpencontainersImageRefName,
            @JsonProperty("org.opencontainers.image.revision") Optional<? extends String> orgOpencontainersImageRevision,
            @JsonProperty("org.opencontainers.image.source") Optional<? extends String> orgOpencontainersImageSource,
            @JsonProperty("org.opencontainers.image.title") Optional<? extends String> orgOpencontainersImageTitle,
            @JsonProperty("org.opencontainers.image.url") Optional<? extends String> orgOpencontainersImageUrl,
            @JsonProperty("org.opencontainers.image.vendor") Optional<? extends String> orgOpencontainersImageVendor,
            @JsonProperty("org.opencontainers.image.version") Optional<? extends String> orgOpencontainersImageVersion) {
        Utils.checkNotNull(orgOpencontainersImageAuthors, "orgOpencontainersImageAuthors");
        Utils.checkNotNull(orgOpencontainersImageBaseDigest, "orgOpencontainersImageBaseDigest");
        Utils.checkNotNull(orgOpencontainersImageBaseName, "orgOpencontainersImageBaseName");
        Utils.checkNotNull(orgOpencontainersImageCreated, "orgOpencontainersImageCreated");
        Utils.checkNotNull(orgOpencontainersImageDescription, "orgOpencontainersImageDescription");
        Utils.checkNotNull(orgOpencontainersImageDocumentation, "orgOpencontainersImageDocumentation");
        Utils.checkNotNull(orgOpencontainersImageLicenses, "orgOpencontainersImageLicenses");
        Utils.checkNotNull(orgOpencontainersImageRefName, "orgOpencontainersImageRefName");
        Utils.checkNotNull(orgOpencontainersImageRevision, "orgOpencontainersImageRevision");
        Utils.checkNotNull(orgOpencontainersImageSource, "orgOpencontainersImageSource");
        Utils.checkNotNull(orgOpencontainersImageTitle, "orgOpencontainersImageTitle");
        Utils.checkNotNull(orgOpencontainersImageUrl, "orgOpencontainersImageUrl");
        Utils.checkNotNull(orgOpencontainersImageVendor, "orgOpencontainersImageVendor");
        Utils.checkNotNull(orgOpencontainersImageVersion, "orgOpencontainersImageVersion");
        this.orgOpencontainersImageAuthors = orgOpencontainersImageAuthors;
        this.orgOpencontainersImageBaseDigest = orgOpencontainersImageBaseDigest;
        this.orgOpencontainersImageBaseName = orgOpencontainersImageBaseName;
        this.orgOpencontainersImageCreated = orgOpencontainersImageCreated;
        this.orgOpencontainersImageDescription = orgOpencontainersImageDescription;
        this.orgOpencontainersImageDocumentation = orgOpencontainersImageDocumentation;
        this.orgOpencontainersImageLicenses = orgOpencontainersImageLicenses;
        this.orgOpencontainersImageRefName = orgOpencontainersImageRefName;
        this.orgOpencontainersImageRevision = orgOpencontainersImageRevision;
        this.orgOpencontainersImageSource = orgOpencontainersImageSource;
        this.orgOpencontainersImageTitle = orgOpencontainersImageTitle;
        this.orgOpencontainersImageUrl = orgOpencontainersImageUrl;
        this.orgOpencontainersImageVendor = orgOpencontainersImageVendor;
        this.orgOpencontainersImageVersion = orgOpencontainersImageVersion;
    }

    public Optional<? extends String> orgOpencontainersImageAuthors() {
        return orgOpencontainersImageAuthors;
    }

    public Optional<? extends String> orgOpencontainersImageBaseDigest() {
        return orgOpencontainersImageBaseDigest;
    }

    public Optional<? extends String> orgOpencontainersImageBaseName() {
        return orgOpencontainersImageBaseName;
    }

    public Optional<? extends String> orgOpencontainersImageCreated() {
        return orgOpencontainersImageCreated;
    }

    public Optional<? extends String> orgOpencontainersImageDescription() {
        return orgOpencontainersImageDescription;
    }

    public Optional<? extends String> orgOpencontainersImageDocumentation() {
        return orgOpencontainersImageDocumentation;
    }

    public Optional<? extends String> orgOpencontainersImageLicenses() {
        return orgOpencontainersImageLicenses;
    }

    public Optional<? extends String> orgOpencontainersImageRefName() {
        return orgOpencontainersImageRefName;
    }

    public Optional<? extends String> orgOpencontainersImageRevision() {
        return orgOpencontainersImageRevision;
    }

    public Optional<? extends String> orgOpencontainersImageSource() {
        return orgOpencontainersImageSource;
    }

    public Optional<? extends String> orgOpencontainersImageTitle() {
        return orgOpencontainersImageTitle;
    }

    public Optional<? extends String> orgOpencontainersImageUrl() {
        return orgOpencontainersImageUrl;
    }

    public Optional<? extends String> orgOpencontainersImageVendor() {
        return orgOpencontainersImageVendor;
    }

    public Optional<? extends String> orgOpencontainersImageVersion() {
        return orgOpencontainersImageVersion;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Annotations withOrgOpencontainersImageAuthors(String orgOpencontainersImageAuthors) {
        Utils.checkNotNull(orgOpencontainersImageAuthors, "orgOpencontainersImageAuthors");
        this.orgOpencontainersImageAuthors = Optional.ofNullable(orgOpencontainersImageAuthors);
        return this;
    }

    public Annotations withOrgOpencontainersImageAuthors(Optional<? extends String> orgOpencontainersImageAuthors) {
        Utils.checkNotNull(orgOpencontainersImageAuthors, "orgOpencontainersImageAuthors");
        this.orgOpencontainersImageAuthors = orgOpencontainersImageAuthors;
        return this;
    }

    public Annotations withOrgOpencontainersImageBaseDigest(String orgOpencontainersImageBaseDigest) {
        Utils.checkNotNull(orgOpencontainersImageBaseDigest, "orgOpencontainersImageBaseDigest");
        this.orgOpencontainersImageBaseDigest = Optional.ofNullable(orgOpencontainersImageBaseDigest);
        return this;
    }

    public Annotations withOrgOpencontainersImageBaseDigest(Optional<? extends String> orgOpencontainersImageBaseDigest) {
        Utils.checkNotNull(orgOpencontainersImageBaseDigest, "orgOpencontainersImageBaseDigest");
        this.orgOpencontainersImageBaseDigest = orgOpencontainersImageBaseDigest;
        return this;
    }

    public Annotations withOrgOpencontainersImageBaseName(String orgOpencontainersImageBaseName) {
        Utils.checkNotNull(orgOpencontainersImageBaseName, "orgOpencontainersImageBaseName");
        this.orgOpencontainersImageBaseName = Optional.ofNullable(orgOpencontainersImageBaseName);
        return this;
    }

    public Annotations withOrgOpencontainersImageBaseName(Optional<? extends String> orgOpencontainersImageBaseName) {
        Utils.checkNotNull(orgOpencontainersImageBaseName, "orgOpencontainersImageBaseName");
        this.orgOpencontainersImageBaseName = orgOpencontainersImageBaseName;
        return this;
    }

    public Annotations withOrgOpencontainersImageCreated(String orgOpencontainersImageCreated) {
        Utils.checkNotNull(orgOpencontainersImageCreated, "orgOpencontainersImageCreated");
        this.orgOpencontainersImageCreated = Optional.ofNullable(orgOpencontainersImageCreated);
        return this;
    }

    public Annotations withOrgOpencontainersImageCreated(Optional<? extends String> orgOpencontainersImageCreated) {
        Utils.checkNotNull(orgOpencontainersImageCreated, "orgOpencontainersImageCreated");
        this.orgOpencontainersImageCreated = orgOpencontainersImageCreated;
        return this;
    }

    public Annotations withOrgOpencontainersImageDescription(String orgOpencontainersImageDescription) {
        Utils.checkNotNull(orgOpencontainersImageDescription, "orgOpencontainersImageDescription");
        this.orgOpencontainersImageDescription = Optional.ofNullable(orgOpencontainersImageDescription);
        return this;
    }

    public Annotations withOrgOpencontainersImageDescription(Optional<? extends String> orgOpencontainersImageDescription) {
        Utils.checkNotNull(orgOpencontainersImageDescription, "orgOpencontainersImageDescription");
        this.orgOpencontainersImageDescription = orgOpencontainersImageDescription;
        return this;
    }

    public Annotations withOrgOpencontainersImageDocumentation(String orgOpencontainersImageDocumentation) {
        Utils.checkNotNull(orgOpencontainersImageDocumentation, "orgOpencontainersImageDocumentation");
        this.orgOpencontainersImageDocumentation = Optional.ofNullable(orgOpencontainersImageDocumentation);
        return this;
    }

    public Annotations withOrgOpencontainersImageDocumentation(Optional<? extends String> orgOpencontainersImageDocumentation) {
        Utils.checkNotNull(orgOpencontainersImageDocumentation, "orgOpencontainersImageDocumentation");
        this.orgOpencontainersImageDocumentation = orgOpencontainersImageDocumentation;
        return this;
    }

    public Annotations withOrgOpencontainersImageLicenses(String orgOpencontainersImageLicenses) {
        Utils.checkNotNull(orgOpencontainersImageLicenses, "orgOpencontainersImageLicenses");
        this.orgOpencontainersImageLicenses = Optional.ofNullable(orgOpencontainersImageLicenses);
        return this;
    }

    public Annotations withOrgOpencontainersImageLicenses(Optional<? extends String> orgOpencontainersImageLicenses) {
        Utils.checkNotNull(orgOpencontainersImageLicenses, "orgOpencontainersImageLicenses");
        this.orgOpencontainersImageLicenses = orgOpencontainersImageLicenses;
        return this;
    }

    public Annotations withOrgOpencontainersImageRefName(String orgOpencontainersImageRefName) {
        Utils.checkNotNull(orgOpencontainersImageRefName, "orgOpencontainersImageRefName");
        this.orgOpencontainersImageRefName = Optional.ofNullable(orgOpencontainersImageRefName);
        return this;
    }

    public Annotations withOrgOpencontainersImageRefName(Optional<? extends String> orgOpencontainersImageRefName) {
        Utils.checkNotNull(orgOpencontainersImageRefName, "orgOpencontainersImageRefName");
        this.orgOpencontainersImageRefName = orgOpencontainersImageRefName;
        return this;
    }

    public Annotations withOrgOpencontainersImageRevision(String orgOpencontainersImageRevision) {
        Utils.checkNotNull(orgOpencontainersImageRevision, "orgOpencontainersImageRevision");
        this.orgOpencontainersImageRevision = Optional.ofNullable(orgOpencontainersImageRevision);
        return this;
    }

    public Annotations withOrgOpencontainersImageRevision(Optional<? extends String> orgOpencontainersImageRevision) {
        Utils.checkNotNull(orgOpencontainersImageRevision, "orgOpencontainersImageRevision");
        this.orgOpencontainersImageRevision = orgOpencontainersImageRevision;
        return this;
    }

    public Annotations withOrgOpencontainersImageSource(String orgOpencontainersImageSource) {
        Utils.checkNotNull(orgOpencontainersImageSource, "orgOpencontainersImageSource");
        this.orgOpencontainersImageSource = Optional.ofNullable(orgOpencontainersImageSource);
        return this;
    }

    public Annotations withOrgOpencontainersImageSource(Optional<? extends String> orgOpencontainersImageSource) {
        Utils.checkNotNull(orgOpencontainersImageSource, "orgOpencontainersImageSource");
        this.orgOpencontainersImageSource = orgOpencontainersImageSource;
        return this;
    }

    public Annotations withOrgOpencontainersImageTitle(String orgOpencontainersImageTitle) {
        Utils.checkNotNull(orgOpencontainersImageTitle, "orgOpencontainersImageTitle");
        this.orgOpencontainersImageTitle = Optional.ofNullable(orgOpencontainersImageTitle);
        return this;
    }

    public Annotations withOrgOpencontainersImageTitle(Optional<? extends String> orgOpencontainersImageTitle) {
        Utils.checkNotNull(orgOpencontainersImageTitle, "orgOpencontainersImageTitle");
        this.orgOpencontainersImageTitle = orgOpencontainersImageTitle;
        return this;
    }

    public Annotations withOrgOpencontainersImageUrl(String orgOpencontainersImageUrl) {
        Utils.checkNotNull(orgOpencontainersImageUrl, "orgOpencontainersImageUrl");
        this.orgOpencontainersImageUrl = Optional.ofNullable(orgOpencontainersImageUrl);
        return this;
    }

    public Annotations withOrgOpencontainersImageUrl(Optional<? extends String> orgOpencontainersImageUrl) {
        Utils.checkNotNull(orgOpencontainersImageUrl, "orgOpencontainersImageUrl");
        this.orgOpencontainersImageUrl = orgOpencontainersImageUrl;
        return this;
    }

    public Annotations withOrgOpencontainersImageVendor(String orgOpencontainersImageVendor) {
        Utils.checkNotNull(orgOpencontainersImageVendor, "orgOpencontainersImageVendor");
        this.orgOpencontainersImageVendor = Optional.ofNullable(orgOpencontainersImageVendor);
        return this;
    }

    public Annotations withOrgOpencontainersImageVendor(Optional<? extends String> orgOpencontainersImageVendor) {
        Utils.checkNotNull(orgOpencontainersImageVendor, "orgOpencontainersImageVendor");
        this.orgOpencontainersImageVendor = orgOpencontainersImageVendor;
        return this;
    }

    public Annotations withOrgOpencontainersImageVersion(String orgOpencontainersImageVersion) {
        Utils.checkNotNull(orgOpencontainersImageVersion, "orgOpencontainersImageVersion");
        this.orgOpencontainersImageVersion = Optional.ofNullable(orgOpencontainersImageVersion);
        return this;
    }

    public Annotations withOrgOpencontainersImageVersion(Optional<? extends String> orgOpencontainersImageVersion) {
        Utils.checkNotNull(orgOpencontainersImageVersion, "orgOpencontainersImageVersion");
        this.orgOpencontainersImageVersion = orgOpencontainersImageVersion;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Annotations other = (Annotations) o;
        return 
            java.util.Objects.deepEquals(this.orgOpencontainersImageAuthors, other.orgOpencontainersImageAuthors) &&
            java.util.Objects.deepEquals(this.orgOpencontainersImageBaseDigest, other.orgOpencontainersImageBaseDigest) &&
            java.util.Objects.deepEquals(this.orgOpencontainersImageBaseName, other.orgOpencontainersImageBaseName) &&
            java.util.Objects.deepEquals(this.orgOpencontainersImageCreated, other.orgOpencontainersImageCreated) &&
            java.util.Objects.deepEquals(this.orgOpencontainersImageDescription, other.orgOpencontainersImageDescription) &&
            java.util.Objects.deepEquals(this.orgOpencontainersImageDocumentation, other.orgOpencontainersImageDocumentation) &&
            java.util.Objects.deepEquals(this.orgOpencontainersImageLicenses, other.orgOpencontainersImageLicenses) &&
            java.util.Objects.deepEquals(this.orgOpencontainersImageRefName, other.orgOpencontainersImageRefName) &&
            java.util.Objects.deepEquals(this.orgOpencontainersImageRevision, other.orgOpencontainersImageRevision) &&
            java.util.Objects.deepEquals(this.orgOpencontainersImageSource, other.orgOpencontainersImageSource) &&
            java.util.Objects.deepEquals(this.orgOpencontainersImageTitle, other.orgOpencontainersImageTitle) &&
            java.util.Objects.deepEquals(this.orgOpencontainersImageUrl, other.orgOpencontainersImageUrl) &&
            java.util.Objects.deepEquals(this.orgOpencontainersImageVendor, other.orgOpencontainersImageVendor) &&
            java.util.Objects.deepEquals(this.orgOpencontainersImageVersion, other.orgOpencontainersImageVersion);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            orgOpencontainersImageAuthors,
            orgOpencontainersImageBaseDigest,
            orgOpencontainersImageBaseName,
            orgOpencontainersImageCreated,
            orgOpencontainersImageDescription,
            orgOpencontainersImageDocumentation,
            orgOpencontainersImageLicenses,
            orgOpencontainersImageRefName,
            orgOpencontainersImageRevision,
            orgOpencontainersImageSource,
            orgOpencontainersImageTitle,
            orgOpencontainersImageUrl,
            orgOpencontainersImageVendor,
            orgOpencontainersImageVersion);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Annotations.class,
                "orgOpencontainersImageAuthors", orgOpencontainersImageAuthors,
                "orgOpencontainersImageBaseDigest", orgOpencontainersImageBaseDigest,
                "orgOpencontainersImageBaseName", orgOpencontainersImageBaseName,
                "orgOpencontainersImageCreated", orgOpencontainersImageCreated,
                "orgOpencontainersImageDescription", orgOpencontainersImageDescription,
                "orgOpencontainersImageDocumentation", orgOpencontainersImageDocumentation,
                "orgOpencontainersImageLicenses", orgOpencontainersImageLicenses,
                "orgOpencontainersImageRefName", orgOpencontainersImageRefName,
                "orgOpencontainersImageRevision", orgOpencontainersImageRevision,
                "orgOpencontainersImageSource", orgOpencontainersImageSource,
                "orgOpencontainersImageTitle", orgOpencontainersImageTitle,
                "orgOpencontainersImageUrl", orgOpencontainersImageUrl,
                "orgOpencontainersImageVendor", orgOpencontainersImageVendor,
                "orgOpencontainersImageVersion", orgOpencontainersImageVersion);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> orgOpencontainersImageAuthors = Optional.empty();
 
        private Optional<? extends String> orgOpencontainersImageBaseDigest = Optional.empty();
 
        private Optional<? extends String> orgOpencontainersImageBaseName = Optional.empty();
 
        private Optional<? extends String> orgOpencontainersImageCreated = Optional.empty();
 
        private Optional<? extends String> orgOpencontainersImageDescription = Optional.empty();
 
        private Optional<? extends String> orgOpencontainersImageDocumentation = Optional.empty();
 
        private Optional<? extends String> orgOpencontainersImageLicenses = Optional.empty();
 
        private Optional<? extends String> orgOpencontainersImageRefName = Optional.empty();
 
        private Optional<? extends String> orgOpencontainersImageRevision = Optional.empty();
 
        private Optional<? extends String> orgOpencontainersImageSource = Optional.empty();
 
        private Optional<? extends String> orgOpencontainersImageTitle = Optional.empty();
 
        private Optional<? extends String> orgOpencontainersImageUrl = Optional.empty();
 
        private Optional<? extends String> orgOpencontainersImageVendor = Optional.empty();
 
        private Optional<? extends String> orgOpencontainersImageVersion = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder orgOpencontainersImageAuthors(String orgOpencontainersImageAuthors) {
            Utils.checkNotNull(orgOpencontainersImageAuthors, "orgOpencontainersImageAuthors");
            this.orgOpencontainersImageAuthors = Optional.ofNullable(orgOpencontainersImageAuthors);
            return this;
        }

        public Builder orgOpencontainersImageAuthors(Optional<? extends String> orgOpencontainersImageAuthors) {
            Utils.checkNotNull(orgOpencontainersImageAuthors, "orgOpencontainersImageAuthors");
            this.orgOpencontainersImageAuthors = orgOpencontainersImageAuthors;
            return this;
        }

        public Builder orgOpencontainersImageBaseDigest(String orgOpencontainersImageBaseDigest) {
            Utils.checkNotNull(orgOpencontainersImageBaseDigest, "orgOpencontainersImageBaseDigest");
            this.orgOpencontainersImageBaseDigest = Optional.ofNullable(orgOpencontainersImageBaseDigest);
            return this;
        }

        public Builder orgOpencontainersImageBaseDigest(Optional<? extends String> orgOpencontainersImageBaseDigest) {
            Utils.checkNotNull(orgOpencontainersImageBaseDigest, "orgOpencontainersImageBaseDigest");
            this.orgOpencontainersImageBaseDigest = orgOpencontainersImageBaseDigest;
            return this;
        }

        public Builder orgOpencontainersImageBaseName(String orgOpencontainersImageBaseName) {
            Utils.checkNotNull(orgOpencontainersImageBaseName, "orgOpencontainersImageBaseName");
            this.orgOpencontainersImageBaseName = Optional.ofNullable(orgOpencontainersImageBaseName);
            return this;
        }

        public Builder orgOpencontainersImageBaseName(Optional<? extends String> orgOpencontainersImageBaseName) {
            Utils.checkNotNull(orgOpencontainersImageBaseName, "orgOpencontainersImageBaseName");
            this.orgOpencontainersImageBaseName = orgOpencontainersImageBaseName;
            return this;
        }

        public Builder orgOpencontainersImageCreated(String orgOpencontainersImageCreated) {
            Utils.checkNotNull(orgOpencontainersImageCreated, "orgOpencontainersImageCreated");
            this.orgOpencontainersImageCreated = Optional.ofNullable(orgOpencontainersImageCreated);
            return this;
        }

        public Builder orgOpencontainersImageCreated(Optional<? extends String> orgOpencontainersImageCreated) {
            Utils.checkNotNull(orgOpencontainersImageCreated, "orgOpencontainersImageCreated");
            this.orgOpencontainersImageCreated = orgOpencontainersImageCreated;
            return this;
        }

        public Builder orgOpencontainersImageDescription(String orgOpencontainersImageDescription) {
            Utils.checkNotNull(orgOpencontainersImageDescription, "orgOpencontainersImageDescription");
            this.orgOpencontainersImageDescription = Optional.ofNullable(orgOpencontainersImageDescription);
            return this;
        }

        public Builder orgOpencontainersImageDescription(Optional<? extends String> orgOpencontainersImageDescription) {
            Utils.checkNotNull(orgOpencontainersImageDescription, "orgOpencontainersImageDescription");
            this.orgOpencontainersImageDescription = orgOpencontainersImageDescription;
            return this;
        }

        public Builder orgOpencontainersImageDocumentation(String orgOpencontainersImageDocumentation) {
            Utils.checkNotNull(orgOpencontainersImageDocumentation, "orgOpencontainersImageDocumentation");
            this.orgOpencontainersImageDocumentation = Optional.ofNullable(orgOpencontainersImageDocumentation);
            return this;
        }

        public Builder orgOpencontainersImageDocumentation(Optional<? extends String> orgOpencontainersImageDocumentation) {
            Utils.checkNotNull(orgOpencontainersImageDocumentation, "orgOpencontainersImageDocumentation");
            this.orgOpencontainersImageDocumentation = orgOpencontainersImageDocumentation;
            return this;
        }

        public Builder orgOpencontainersImageLicenses(String orgOpencontainersImageLicenses) {
            Utils.checkNotNull(orgOpencontainersImageLicenses, "orgOpencontainersImageLicenses");
            this.orgOpencontainersImageLicenses = Optional.ofNullable(orgOpencontainersImageLicenses);
            return this;
        }

        public Builder orgOpencontainersImageLicenses(Optional<? extends String> orgOpencontainersImageLicenses) {
            Utils.checkNotNull(orgOpencontainersImageLicenses, "orgOpencontainersImageLicenses");
            this.orgOpencontainersImageLicenses = orgOpencontainersImageLicenses;
            return this;
        }

        public Builder orgOpencontainersImageRefName(String orgOpencontainersImageRefName) {
            Utils.checkNotNull(orgOpencontainersImageRefName, "orgOpencontainersImageRefName");
            this.orgOpencontainersImageRefName = Optional.ofNullable(orgOpencontainersImageRefName);
            return this;
        }

        public Builder orgOpencontainersImageRefName(Optional<? extends String> orgOpencontainersImageRefName) {
            Utils.checkNotNull(orgOpencontainersImageRefName, "orgOpencontainersImageRefName");
            this.orgOpencontainersImageRefName = orgOpencontainersImageRefName;
            return this;
        }

        public Builder orgOpencontainersImageRevision(String orgOpencontainersImageRevision) {
            Utils.checkNotNull(orgOpencontainersImageRevision, "orgOpencontainersImageRevision");
            this.orgOpencontainersImageRevision = Optional.ofNullable(orgOpencontainersImageRevision);
            return this;
        }

        public Builder orgOpencontainersImageRevision(Optional<? extends String> orgOpencontainersImageRevision) {
            Utils.checkNotNull(orgOpencontainersImageRevision, "orgOpencontainersImageRevision");
            this.orgOpencontainersImageRevision = orgOpencontainersImageRevision;
            return this;
        }

        public Builder orgOpencontainersImageSource(String orgOpencontainersImageSource) {
            Utils.checkNotNull(orgOpencontainersImageSource, "orgOpencontainersImageSource");
            this.orgOpencontainersImageSource = Optional.ofNullable(orgOpencontainersImageSource);
            return this;
        }

        public Builder orgOpencontainersImageSource(Optional<? extends String> orgOpencontainersImageSource) {
            Utils.checkNotNull(orgOpencontainersImageSource, "orgOpencontainersImageSource");
            this.orgOpencontainersImageSource = orgOpencontainersImageSource;
            return this;
        }

        public Builder orgOpencontainersImageTitle(String orgOpencontainersImageTitle) {
            Utils.checkNotNull(orgOpencontainersImageTitle, "orgOpencontainersImageTitle");
            this.orgOpencontainersImageTitle = Optional.ofNullable(orgOpencontainersImageTitle);
            return this;
        }

        public Builder orgOpencontainersImageTitle(Optional<? extends String> orgOpencontainersImageTitle) {
            Utils.checkNotNull(orgOpencontainersImageTitle, "orgOpencontainersImageTitle");
            this.orgOpencontainersImageTitle = orgOpencontainersImageTitle;
            return this;
        }

        public Builder orgOpencontainersImageUrl(String orgOpencontainersImageUrl) {
            Utils.checkNotNull(orgOpencontainersImageUrl, "orgOpencontainersImageUrl");
            this.orgOpencontainersImageUrl = Optional.ofNullable(orgOpencontainersImageUrl);
            return this;
        }

        public Builder orgOpencontainersImageUrl(Optional<? extends String> orgOpencontainersImageUrl) {
            Utils.checkNotNull(orgOpencontainersImageUrl, "orgOpencontainersImageUrl");
            this.orgOpencontainersImageUrl = orgOpencontainersImageUrl;
            return this;
        }

        public Builder orgOpencontainersImageVendor(String orgOpencontainersImageVendor) {
            Utils.checkNotNull(orgOpencontainersImageVendor, "orgOpencontainersImageVendor");
            this.orgOpencontainersImageVendor = Optional.ofNullable(orgOpencontainersImageVendor);
            return this;
        }

        public Builder orgOpencontainersImageVendor(Optional<? extends String> orgOpencontainersImageVendor) {
            Utils.checkNotNull(orgOpencontainersImageVendor, "orgOpencontainersImageVendor");
            this.orgOpencontainersImageVendor = orgOpencontainersImageVendor;
            return this;
        }

        public Builder orgOpencontainersImageVersion(String orgOpencontainersImageVersion) {
            Utils.checkNotNull(orgOpencontainersImageVersion, "orgOpencontainersImageVersion");
            this.orgOpencontainersImageVersion = Optional.ofNullable(orgOpencontainersImageVersion);
            return this;
        }

        public Builder orgOpencontainersImageVersion(Optional<? extends String> orgOpencontainersImageVersion) {
            Utils.checkNotNull(orgOpencontainersImageVersion, "orgOpencontainersImageVersion");
            this.orgOpencontainersImageVersion = orgOpencontainersImageVersion;
            return this;
        }
        
        public Annotations build() {
            return new Annotations(
                orgOpencontainersImageAuthors,
                orgOpencontainersImageBaseDigest,
                orgOpencontainersImageBaseName,
                orgOpencontainersImageCreated,
                orgOpencontainersImageDescription,
                orgOpencontainersImageDocumentation,
                orgOpencontainersImageLicenses,
                orgOpencontainersImageRefName,
                orgOpencontainersImageRevision,
                orgOpencontainersImageSource,
                orgOpencontainersImageTitle,
                orgOpencontainersImageUrl,
                orgOpencontainersImageVendor,
                orgOpencontainersImageVersion);
        }
    }
}

