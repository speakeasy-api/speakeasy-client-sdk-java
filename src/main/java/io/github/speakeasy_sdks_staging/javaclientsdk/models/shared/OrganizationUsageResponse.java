/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;
/**
 * OrganizationUsageResponse - A billing summary of organization usage
 */

public class OrganizationUsageResponse {

    /**
     * List of allowed languages
     */
    @JsonProperty("allowed_languages")
    private java.util.List<String> allowedLanguages;

    /**
     * Expiry date of the free trial, will be null if no trial
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("free_trial_expiry")
    private Optional<? extends OffsetDateTime> freeTrialExpiry;

    /**
     * Total number of allowed languages, -1 if unlimited
     */
    @JsonProperty("total_allowed_languages")
    private long totalAllowedLanguages;

    @JsonProperty("usage")
    private java.util.List<OrganizationUsage> usage;

    @JsonCreator
    public OrganizationUsageResponse(
            @JsonProperty("allowed_languages") java.util.List<String> allowedLanguages,
            @JsonProperty("free_trial_expiry") Optional<? extends OffsetDateTime> freeTrialExpiry,
            @JsonProperty("total_allowed_languages") long totalAllowedLanguages,
            @JsonProperty("usage") java.util.List<OrganizationUsage> usage) {
        Utils.checkNotNull(allowedLanguages, "allowedLanguages");
        Utils.checkNotNull(freeTrialExpiry, "freeTrialExpiry");
        Utils.checkNotNull(totalAllowedLanguages, "totalAllowedLanguages");
        Utils.checkNotNull(usage, "usage");
        this.allowedLanguages = allowedLanguages;
        this.freeTrialExpiry = freeTrialExpiry;
        this.totalAllowedLanguages = totalAllowedLanguages;
        this.usage = usage;
    }
    
    public OrganizationUsageResponse(
            java.util.List<String> allowedLanguages,
            long totalAllowedLanguages,
            java.util.List<OrganizationUsage> usage) {
        this(allowedLanguages, Optional.empty(), totalAllowedLanguages, usage);
    }

    /**
     * List of allowed languages
     */
    @JsonIgnore
    public java.util.List<String> allowedLanguages() {
        return allowedLanguages;
    }

    /**
     * Expiry date of the free trial, will be null if no trial
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OffsetDateTime> freeTrialExpiry() {
        return (Optional<OffsetDateTime>) freeTrialExpiry;
    }

    /**
     * Total number of allowed languages, -1 if unlimited
     */
    @JsonIgnore
    public long totalAllowedLanguages() {
        return totalAllowedLanguages;
    }

    @JsonIgnore
    public java.util.List<OrganizationUsage> usage() {
        return usage;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * List of allowed languages
     */
    public OrganizationUsageResponse withAllowedLanguages(java.util.List<String> allowedLanguages) {
        Utils.checkNotNull(allowedLanguages, "allowedLanguages");
        this.allowedLanguages = allowedLanguages;
        return this;
    }

    /**
     * Expiry date of the free trial, will be null if no trial
     */
    public OrganizationUsageResponse withFreeTrialExpiry(OffsetDateTime freeTrialExpiry) {
        Utils.checkNotNull(freeTrialExpiry, "freeTrialExpiry");
        this.freeTrialExpiry = Optional.ofNullable(freeTrialExpiry);
        return this;
    }

    /**
     * Expiry date of the free trial, will be null if no trial
     */
    public OrganizationUsageResponse withFreeTrialExpiry(Optional<? extends OffsetDateTime> freeTrialExpiry) {
        Utils.checkNotNull(freeTrialExpiry, "freeTrialExpiry");
        this.freeTrialExpiry = freeTrialExpiry;
        return this;
    }

    /**
     * Total number of allowed languages, -1 if unlimited
     */
    public OrganizationUsageResponse withTotalAllowedLanguages(long totalAllowedLanguages) {
        Utils.checkNotNull(totalAllowedLanguages, "totalAllowedLanguages");
        this.totalAllowedLanguages = totalAllowedLanguages;
        return this;
    }

    public OrganizationUsageResponse withUsage(java.util.List<OrganizationUsage> usage) {
        Utils.checkNotNull(usage, "usage");
        this.usage = usage;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrganizationUsageResponse other = (OrganizationUsageResponse) o;
        return 
            java.util.Objects.deepEquals(this.allowedLanguages, other.allowedLanguages) &&
            java.util.Objects.deepEquals(this.freeTrialExpiry, other.freeTrialExpiry) &&
            java.util.Objects.deepEquals(this.totalAllowedLanguages, other.totalAllowedLanguages) &&
            java.util.Objects.deepEquals(this.usage, other.usage);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            allowedLanguages,
            freeTrialExpiry,
            totalAllowedLanguages,
            usage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OrganizationUsageResponse.class,
                "allowedLanguages", allowedLanguages,
                "freeTrialExpiry", freeTrialExpiry,
                "totalAllowedLanguages", totalAllowedLanguages,
                "usage", usage);
    }
    
    public final static class Builder {
 
        private java.util.List<String> allowedLanguages;
 
        private Optional<? extends OffsetDateTime> freeTrialExpiry = Optional.empty();
 
        private Long totalAllowedLanguages;
 
        private java.util.List<OrganizationUsage> usage;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of allowed languages
         */
        public Builder allowedLanguages(java.util.List<String> allowedLanguages) {
            Utils.checkNotNull(allowedLanguages, "allowedLanguages");
            this.allowedLanguages = allowedLanguages;
            return this;
        }

        /**
         * Expiry date of the free trial, will be null if no trial
         */
        public Builder freeTrialExpiry(OffsetDateTime freeTrialExpiry) {
            Utils.checkNotNull(freeTrialExpiry, "freeTrialExpiry");
            this.freeTrialExpiry = Optional.ofNullable(freeTrialExpiry);
            return this;
        }

        /**
         * Expiry date of the free trial, will be null if no trial
         */
        public Builder freeTrialExpiry(Optional<? extends OffsetDateTime> freeTrialExpiry) {
            Utils.checkNotNull(freeTrialExpiry, "freeTrialExpiry");
            this.freeTrialExpiry = freeTrialExpiry;
            return this;
        }

        /**
         * Total number of allowed languages, -1 if unlimited
         */
        public Builder totalAllowedLanguages(long totalAllowedLanguages) {
            Utils.checkNotNull(totalAllowedLanguages, "totalAllowedLanguages");
            this.totalAllowedLanguages = totalAllowedLanguages;
            return this;
        }

        public Builder usage(java.util.List<OrganizationUsage> usage) {
            Utils.checkNotNull(usage, "usage");
            this.usage = usage;
            return this;
        }
        
        public OrganizationUsageResponse build() {
            return new OrganizationUsageResponse(
                allowedLanguages,
                freeTrialExpiry,
                totalAllowedLanguages,
                usage);
        }
    }
}

