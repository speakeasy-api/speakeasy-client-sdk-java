/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class ShortURL {

    @JsonProperty("full_url")
    private String fullUrl;

    @JsonProperty("short_url")
    private String shortUrl;

    @JsonCreator
    public ShortURL(
            @JsonProperty("full_url") String fullUrl,
            @JsonProperty("short_url") String shortUrl) {
        Utils.checkNotNull(fullUrl, "fullUrl");
        Utils.checkNotNull(shortUrl, "shortUrl");
        this.fullUrl = fullUrl;
        this.shortUrl = shortUrl;
    }

    @JsonIgnore
    public String fullUrl() {
        return fullUrl;
    }

    @JsonIgnore
    public String shortUrl() {
        return shortUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ShortURL withFullUrl(String fullUrl) {
        Utils.checkNotNull(fullUrl, "fullUrl");
        this.fullUrl = fullUrl;
        return this;
    }

    public ShortURL withShortUrl(String shortUrl) {
        Utils.checkNotNull(shortUrl, "shortUrl");
        this.shortUrl = shortUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ShortURL other = (ShortURL) o;
        return 
            Objects.deepEquals(this.fullUrl, other.fullUrl) &&
            Objects.deepEquals(this.shortUrl, other.shortUrl);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            fullUrl,
            shortUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ShortURL.class,
                "fullUrl", fullUrl,
                "shortUrl", shortUrl);
    }
    
    public final static class Builder {
 
        private String fullUrl;
 
        private String shortUrl;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder fullUrl(String fullUrl) {
            Utils.checkNotNull(fullUrl, "fullUrl");
            this.fullUrl = fullUrl;
            return this;
        }

        public Builder shortUrl(String shortUrl) {
            Utils.checkNotNull(shortUrl, "shortUrl");
            this.shortUrl = shortUrl;
            return this;
        }
        
        public ShortURL build() {
            return new ShortURL(
                fullUrl,
                shortUrl);
        }
    }
}

