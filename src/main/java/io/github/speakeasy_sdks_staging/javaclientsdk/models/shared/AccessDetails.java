/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;


public class AccessDetails {

    @JsonProperty("generation_allowed")
    private boolean generationAllowed;

    public AccessDetails(
            @JsonProperty("generation_allowed") boolean generationAllowed) {
        Utils.checkNotNull(generationAllowed, "generationAllowed");
        this.generationAllowed = generationAllowed;
    }

    public boolean generationAllowed() {
        return generationAllowed;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public AccessDetails withGenerationAllowed(boolean generationAllowed) {
        Utils.checkNotNull(generationAllowed, "generationAllowed");
        this.generationAllowed = generationAllowed;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccessDetails other = (AccessDetails) o;
        return 
            java.util.Objects.deepEquals(this.generationAllowed, other.generationAllowed);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            generationAllowed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccessDetails.class,
                "generationAllowed", generationAllowed);
    }
    
    public final static class Builder {
 
        private Boolean generationAllowed;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder generationAllowed(boolean generationAllowed) {
            Utils.checkNotNull(generationAllowed, "generationAllowed");
            this.generationAllowed = generationAllowed;
            return this;
        }
        
        public AccessDetails build() {
            return new AccessDetails(
                generationAllowed);
        }
    }
}

