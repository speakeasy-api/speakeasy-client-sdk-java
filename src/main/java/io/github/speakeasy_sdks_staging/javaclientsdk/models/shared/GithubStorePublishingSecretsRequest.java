/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * GithubStorePublishingSecretsRequest - A request to store publishing secrets for a github target
 */

public class GithubStorePublishingSecretsRequest {

    /**
     * The generation lock ID
     */
    @JsonProperty("generate_gen_lock_id")
    private String generateGenLockId;

    /**
     * A map of secrets to store in the GitHub target
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secrets")
    private Optional<? extends java.util.Map<String, String>> secrets;

    @JsonCreator
    public GithubStorePublishingSecretsRequest(
            @JsonProperty("generate_gen_lock_id") String generateGenLockId,
            @JsonProperty("secrets") Optional<? extends java.util.Map<String, String>> secrets) {
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        Utils.checkNotNull(secrets, "secrets");
        this.generateGenLockId = generateGenLockId;
        this.secrets = secrets;
    }
    
    public GithubStorePublishingSecretsRequest(
            String generateGenLockId) {
        this(generateGenLockId, Optional.empty());
    }

    /**
     * The generation lock ID
     */
    @JsonIgnore
    public String generateGenLockId() {
        return generateGenLockId;
    }

    /**
     * A map of secrets to store in the GitHub target
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.Map<String, String>> secrets() {
        return (Optional<java.util.Map<String, String>>) secrets;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The generation lock ID
     */
    public GithubStorePublishingSecretsRequest withGenerateGenLockId(String generateGenLockId) {
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        this.generateGenLockId = generateGenLockId;
        return this;
    }

    /**
     * A map of secrets to store in the GitHub target
     */
    public GithubStorePublishingSecretsRequest withSecrets(java.util.Map<String, String> secrets) {
        Utils.checkNotNull(secrets, "secrets");
        this.secrets = Optional.ofNullable(secrets);
        return this;
    }

    /**
     * A map of secrets to store in the GitHub target
     */
    public GithubStorePublishingSecretsRequest withSecrets(Optional<? extends java.util.Map<String, String>> secrets) {
        Utils.checkNotNull(secrets, "secrets");
        this.secrets = secrets;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GithubStorePublishingSecretsRequest other = (GithubStorePublishingSecretsRequest) o;
        return 
            java.util.Objects.deepEquals(this.generateGenLockId, other.generateGenLockId) &&
            java.util.Objects.deepEquals(this.secrets, other.secrets);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            generateGenLockId,
            secrets);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GithubStorePublishingSecretsRequest.class,
                "generateGenLockId", generateGenLockId,
                "secrets", secrets);
    }
    
    public final static class Builder {
 
        private String generateGenLockId;
 
        private Optional<? extends java.util.Map<String, String>> secrets = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The generation lock ID
         */
        public Builder generateGenLockId(String generateGenLockId) {
            Utils.checkNotNull(generateGenLockId, "generateGenLockId");
            this.generateGenLockId = generateGenLockId;
            return this;
        }

        /**
         * A map of secrets to store in the GitHub target
         */
        public Builder secrets(java.util.Map<String, String> secrets) {
            Utils.checkNotNull(secrets, "secrets");
            this.secrets = Optional.ofNullable(secrets);
            return this;
        }

        /**
         * A map of secrets to store in the GitHub target
         */
        public Builder secrets(Optional<? extends java.util.Map<String, String>> secrets) {
            Utils.checkNotNull(secrets, "secrets");
            this.secrets = secrets;
            return this;
        }
        
        public GithubStorePublishingSecretsRequest build() {
            return new GithubStorePublishingSecretsRequest(
                generateGenLockId,
                secrets);
        }
    }
}

