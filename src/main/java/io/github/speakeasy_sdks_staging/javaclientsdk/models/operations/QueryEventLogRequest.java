/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.SpeakeasyMetadata;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class QueryEventLogRequest {

    /**
     * The filter to apply to the query.
     */
    @SpeakeasyMetadata("queryParam:serialization=json,name=filters")
    private Optional<? extends io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Filters> filters;

    @JsonCreator
    public QueryEventLogRequest(
            Optional<? extends io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Filters> filters) {
        Utils.checkNotNull(filters, "filters");
        this.filters = filters;
    }
    
    public QueryEventLogRequest() {
        this(Optional.empty());
    }

    /**
     * The filter to apply to the query.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Filters> filters() {
        return (Optional<io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Filters>) filters;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The filter to apply to the query.
     */
    public QueryEventLogRequest withFilters(io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Filters filters) {
        Utils.checkNotNull(filters, "filters");
        this.filters = Optional.ofNullable(filters);
        return this;
    }

    /**
     * The filter to apply to the query.
     */
    public QueryEventLogRequest withFilters(Optional<? extends io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Filters> filters) {
        Utils.checkNotNull(filters, "filters");
        this.filters = filters;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryEventLogRequest other = (QueryEventLogRequest) o;
        return 
            java.util.Objects.deepEquals(this.filters, other.filters);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            filters);
    }
    
    @Override
    public String toString() {
        return Utils.toString(QueryEventLogRequest.class,
                "filters", filters);
    }
    
    public final static class Builder {
 
        private Optional<? extends io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Filters> filters = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The filter to apply to the query.
         */
        public Builder filters(io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Filters filters) {
            Utils.checkNotNull(filters, "filters");
            this.filters = Optional.ofNullable(filters);
            return this;
        }

        /**
         * The filter to apply to the query.
         */
        public Builder filters(Optional<? extends io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Filters> filters) {
            Utils.checkNotNull(filters, "filters");
            this.filters = filters;
            return this;
        }
        
        public QueryEventLogRequest build() {
            return new QueryEventLogRequest(
                filters);
        }
    }
}

