/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class OASOperation {

    @JsonProperty("description")
    private String description;

    @JsonProperty("method")
    private String method;

    @JsonProperty("operation_id")
    private String operationId;

    @JsonProperty("path")
    private String path;

    @JsonProperty("tags")
    private java.util.List<String> tags;

    @JsonCreator
    public OASOperation(
            @JsonProperty("description") String description,
            @JsonProperty("method") String method,
            @JsonProperty("operation_id") String operationId,
            @JsonProperty("path") String path,
            @JsonProperty("tags") java.util.List<String> tags) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(operationId, "operationId");
        Utils.checkNotNull(path, "path");
        Utils.checkNotNull(tags, "tags");
        this.description = description;
        this.method = method;
        this.operationId = operationId;
        this.path = path;
        this.tags = tags;
    }

    @JsonIgnore
    public String description() {
        return description;
    }

    @JsonIgnore
    public String method() {
        return method;
    }

    @JsonIgnore
    public String operationId() {
        return operationId;
    }

    @JsonIgnore
    public String path() {
        return path;
    }

    @JsonIgnore
    public java.util.List<String> tags() {
        return tags;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public OASOperation withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public OASOperation withMethod(String method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    public OASOperation withOperationId(String operationId) {
        Utils.checkNotNull(operationId, "operationId");
        this.operationId = operationId;
        return this;
    }

    public OASOperation withPath(String path) {
        Utils.checkNotNull(path, "path");
        this.path = path;
        return this;
    }

    public OASOperation withTags(java.util.List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OASOperation other = (OASOperation) o;
        return 
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.method, other.method) &&
            java.util.Objects.deepEquals(this.operationId, other.operationId) &&
            java.util.Objects.deepEquals(this.path, other.path) &&
            java.util.Objects.deepEquals(this.tags, other.tags);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            description,
            method,
            operationId,
            path,
            tags);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OASOperation.class,
                "description", description,
                "method", method,
                "operationId", operationId,
                "path", path,
                "tags", tags);
    }
    
    public final static class Builder {
 
        private String description;
 
        private String method;
 
        private String operationId;
 
        private String path;
 
        private java.util.List<String> tags;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder method(String method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        public Builder operationId(String operationId) {
            Utils.checkNotNull(operationId, "operationId");
            this.operationId = operationId;
            return this;
        }

        public Builder path(String path) {
            Utils.checkNotNull(path, "path");
            this.path = path;
            return this;
        }

        public Builder tags(java.util.List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }
        
        public OASOperation build() {
            return new OASOperation(
                description,
                method,
                operationId,
                path,
                tags);
        }
    }
}

