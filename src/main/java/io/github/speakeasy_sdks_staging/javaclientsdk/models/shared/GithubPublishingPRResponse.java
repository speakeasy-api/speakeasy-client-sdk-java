/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * GithubPublishingPRResponse - Open generation PRs pending publishing
 */

public class GithubPublishingPRResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generation_pull_request")
    private Optional<? extends String> generationPullRequest;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pending_version")
    private Optional<? extends String> pendingVersion;

    @JsonCreator
    public GithubPublishingPRResponse(
            @JsonProperty("generation_pull_request") Optional<? extends String> generationPullRequest,
            @JsonProperty("pending_version") Optional<? extends String> pendingVersion) {
        Utils.checkNotNull(generationPullRequest, "generationPullRequest");
        Utils.checkNotNull(pendingVersion, "pendingVersion");
        this.generationPullRequest = generationPullRequest;
        this.pendingVersion = pendingVersion;
    }
    
    public GithubPublishingPRResponse() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> generationPullRequest() {
        return (Optional<String>) generationPullRequest;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> pendingVersion() {
        return (Optional<String>) pendingVersion;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GithubPublishingPRResponse withGenerationPullRequest(String generationPullRequest) {
        Utils.checkNotNull(generationPullRequest, "generationPullRequest");
        this.generationPullRequest = Optional.ofNullable(generationPullRequest);
        return this;
    }

    public GithubPublishingPRResponse withGenerationPullRequest(Optional<? extends String> generationPullRequest) {
        Utils.checkNotNull(generationPullRequest, "generationPullRequest");
        this.generationPullRequest = generationPullRequest;
        return this;
    }

    public GithubPublishingPRResponse withPendingVersion(String pendingVersion) {
        Utils.checkNotNull(pendingVersion, "pendingVersion");
        this.pendingVersion = Optional.ofNullable(pendingVersion);
        return this;
    }

    public GithubPublishingPRResponse withPendingVersion(Optional<? extends String> pendingVersion) {
        Utils.checkNotNull(pendingVersion, "pendingVersion");
        this.pendingVersion = pendingVersion;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GithubPublishingPRResponse other = (GithubPublishingPRResponse) o;
        return 
            java.util.Objects.deepEquals(this.generationPullRequest, other.generationPullRequest) &&
            java.util.Objects.deepEquals(this.pendingVersion, other.pendingVersion);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            generationPullRequest,
            pendingVersion);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GithubPublishingPRResponse.class,
                "generationPullRequest", generationPullRequest,
                "pendingVersion", pendingVersion);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> generationPullRequest = Optional.empty();
 
        private Optional<? extends String> pendingVersion = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder generationPullRequest(String generationPullRequest) {
            Utils.checkNotNull(generationPullRequest, "generationPullRequest");
            this.generationPullRequest = Optional.ofNullable(generationPullRequest);
            return this;
        }

        public Builder generationPullRequest(Optional<? extends String> generationPullRequest) {
            Utils.checkNotNull(generationPullRequest, "generationPullRequest");
            this.generationPullRequest = generationPullRequest;
            return this;
        }

        public Builder pendingVersion(String pendingVersion) {
            Utils.checkNotNull(pendingVersion, "pendingVersion");
            this.pendingVersion = Optional.ofNullable(pendingVersion);
            return this;
        }

        public Builder pendingVersion(Optional<? extends String> pendingVersion) {
            Utils.checkNotNull(pendingVersion, "pendingVersion");
            this.pendingVersion = pendingVersion;
            return this;
        }
        
        public GithubPublishingPRResponse build() {
            return new GithubPublishingPRResponse(
                generationPullRequest,
                pendingVersion);
        }
    }
}

