/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.SpeakeasyMetadata;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class InsertVersionMetadataRequest {

    /**
     * A JSON representation of the metadata to insert.
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.VersionMetadataInput versionMetadata;

    /**
     * The ID of the Api to insert metadata for.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=apiID")
    private String apiID;

    /**
     * The version ID of the Api to insert metadata for.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=versionID")
    private String versionID;

    @JsonCreator
    public InsertVersionMetadataRequest(
            io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.VersionMetadataInput versionMetadata,
            String apiID,
            String versionID) {
        Utils.checkNotNull(versionMetadata, "versionMetadata");
        Utils.checkNotNull(apiID, "apiID");
        Utils.checkNotNull(versionID, "versionID");
        this.versionMetadata = versionMetadata;
        this.apiID = apiID;
        this.versionID = versionID;
    }

    /**
     * A JSON representation of the metadata to insert.
     */
    @JsonIgnore
    public io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.VersionMetadataInput versionMetadata() {
        return versionMetadata;
    }

    /**
     * The ID of the Api to insert metadata for.
     */
    @JsonIgnore
    public String apiID() {
        return apiID;
    }

    /**
     * The version ID of the Api to insert metadata for.
     */
    @JsonIgnore
    public String versionID() {
        return versionID;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A JSON representation of the metadata to insert.
     */
    public InsertVersionMetadataRequest withVersionMetadata(io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.VersionMetadataInput versionMetadata) {
        Utils.checkNotNull(versionMetadata, "versionMetadata");
        this.versionMetadata = versionMetadata;
        return this;
    }

    /**
     * The ID of the Api to insert metadata for.
     */
    public InsertVersionMetadataRequest withApiID(String apiID) {
        Utils.checkNotNull(apiID, "apiID");
        this.apiID = apiID;
        return this;
    }

    /**
     * The version ID of the Api to insert metadata for.
     */
    public InsertVersionMetadataRequest withVersionID(String versionID) {
        Utils.checkNotNull(versionID, "versionID");
        this.versionID = versionID;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InsertVersionMetadataRequest other = (InsertVersionMetadataRequest) o;
        return 
            java.util.Objects.deepEquals(this.versionMetadata, other.versionMetadata) &&
            java.util.Objects.deepEquals(this.apiID, other.apiID) &&
            java.util.Objects.deepEquals(this.versionID, other.versionID);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            versionMetadata,
            apiID,
            versionID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InsertVersionMetadataRequest.class,
                "versionMetadata", versionMetadata,
                "apiID", apiID,
                "versionID", versionID);
    }
    
    public final static class Builder {
 
        private io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.VersionMetadataInput versionMetadata;
 
        private String apiID;
 
        private String versionID;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A JSON representation of the metadata to insert.
         */
        public Builder versionMetadata(io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.VersionMetadataInput versionMetadata) {
            Utils.checkNotNull(versionMetadata, "versionMetadata");
            this.versionMetadata = versionMetadata;
            return this;
        }

        /**
         * The ID of the Api to insert metadata for.
         */
        public Builder apiID(String apiID) {
            Utils.checkNotNull(apiID, "apiID");
            this.apiID = apiID;
            return this;
        }

        /**
         * The version ID of the Api to insert metadata for.
         */
        public Builder versionID(String versionID) {
            Utils.checkNotNull(versionID, "versionID");
            this.versionID = versionID;
            return this;
        }
        
        public InsertVersionMetadataRequest build() {
            return new InsertVersionMetadataRequest(
                versionMetadata,
                apiID,
                versionID);
        }
    }
}

