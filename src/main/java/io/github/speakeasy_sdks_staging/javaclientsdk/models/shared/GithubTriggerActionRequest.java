/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * GithubTriggerActionRequest - A request to trigger an action on a GitHub target
 */

public class GithubTriggerActionRequest {

    /**
     * The generation lock ID
     */
    @JsonProperty("gen_lock_id")
    private String genLockId;

    /**
     * The GitHub organization name
     */
    @JsonProperty("org")
    private String org;

    /**
     * The GitHub repository name
     */
    @JsonProperty("repo_name")
    private String repoName;

    /**
     * A version to override the SDK too in workflow dispatch
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("set_version")
    private Optional<? extends String> setVersion;

    /**
     * The target name for the action
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_name")
    private Optional<? extends String> targetName;

    @JsonCreator
    public GithubTriggerActionRequest(
            @JsonProperty("gen_lock_id") String genLockId,
            @JsonProperty("org") String org,
            @JsonProperty("repo_name") String repoName,
            @JsonProperty("set_version") Optional<? extends String> setVersion,
            @JsonProperty("target_name") Optional<? extends String> targetName) {
        Utils.checkNotNull(genLockId, "genLockId");
        Utils.checkNotNull(org, "org");
        Utils.checkNotNull(repoName, "repoName");
        Utils.checkNotNull(setVersion, "setVersion");
        Utils.checkNotNull(targetName, "targetName");
        this.genLockId = genLockId;
        this.org = org;
        this.repoName = repoName;
        this.setVersion = setVersion;
        this.targetName = targetName;
    }
    
    public GithubTriggerActionRequest(
            String genLockId,
            String org,
            String repoName) {
        this(genLockId, org, repoName, Optional.empty(), Optional.empty());
    }

    /**
     * The generation lock ID
     */
    @JsonIgnore
    public String genLockId() {
        return genLockId;
    }

    /**
     * The GitHub organization name
     */
    @JsonIgnore
    public String org() {
        return org;
    }

    /**
     * The GitHub repository name
     */
    @JsonIgnore
    public String repoName() {
        return repoName;
    }

    /**
     * A version to override the SDK too in workflow dispatch
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> setVersion() {
        return (Optional<String>) setVersion;
    }

    /**
     * The target name for the action
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> targetName() {
        return (Optional<String>) targetName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The generation lock ID
     */
    public GithubTriggerActionRequest withGenLockId(String genLockId) {
        Utils.checkNotNull(genLockId, "genLockId");
        this.genLockId = genLockId;
        return this;
    }

    /**
     * The GitHub organization name
     */
    public GithubTriggerActionRequest withOrg(String org) {
        Utils.checkNotNull(org, "org");
        this.org = org;
        return this;
    }

    /**
     * The GitHub repository name
     */
    public GithubTriggerActionRequest withRepoName(String repoName) {
        Utils.checkNotNull(repoName, "repoName");
        this.repoName = repoName;
        return this;
    }

    /**
     * A version to override the SDK too in workflow dispatch
     */
    public GithubTriggerActionRequest withSetVersion(String setVersion) {
        Utils.checkNotNull(setVersion, "setVersion");
        this.setVersion = Optional.ofNullable(setVersion);
        return this;
    }

    /**
     * A version to override the SDK too in workflow dispatch
     */
    public GithubTriggerActionRequest withSetVersion(Optional<? extends String> setVersion) {
        Utils.checkNotNull(setVersion, "setVersion");
        this.setVersion = setVersion;
        return this;
    }

    /**
     * The target name for the action
     */
    public GithubTriggerActionRequest withTargetName(String targetName) {
        Utils.checkNotNull(targetName, "targetName");
        this.targetName = Optional.ofNullable(targetName);
        return this;
    }

    /**
     * The target name for the action
     */
    public GithubTriggerActionRequest withTargetName(Optional<? extends String> targetName) {
        Utils.checkNotNull(targetName, "targetName");
        this.targetName = targetName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GithubTriggerActionRequest other = (GithubTriggerActionRequest) o;
        return 
            java.util.Objects.deepEquals(this.genLockId, other.genLockId) &&
            java.util.Objects.deepEquals(this.org, other.org) &&
            java.util.Objects.deepEquals(this.repoName, other.repoName) &&
            java.util.Objects.deepEquals(this.setVersion, other.setVersion) &&
            java.util.Objects.deepEquals(this.targetName, other.targetName);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            genLockId,
            org,
            repoName,
            setVersion,
            targetName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GithubTriggerActionRequest.class,
                "genLockId", genLockId,
                "org", org,
                "repoName", repoName,
                "setVersion", setVersion,
                "targetName", targetName);
    }
    
    public final static class Builder {
 
        private String genLockId;
 
        private String org;
 
        private String repoName;
 
        private Optional<? extends String> setVersion = Optional.empty();
 
        private Optional<? extends String> targetName = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The generation lock ID
         */
        public Builder genLockId(String genLockId) {
            Utils.checkNotNull(genLockId, "genLockId");
            this.genLockId = genLockId;
            return this;
        }

        /**
         * The GitHub organization name
         */
        public Builder org(String org) {
            Utils.checkNotNull(org, "org");
            this.org = org;
            return this;
        }

        /**
         * The GitHub repository name
         */
        public Builder repoName(String repoName) {
            Utils.checkNotNull(repoName, "repoName");
            this.repoName = repoName;
            return this;
        }

        /**
         * A version to override the SDK too in workflow dispatch
         */
        public Builder setVersion(String setVersion) {
            Utils.checkNotNull(setVersion, "setVersion");
            this.setVersion = Optional.ofNullable(setVersion);
            return this;
        }

        /**
         * A version to override the SDK too in workflow dispatch
         */
        public Builder setVersion(Optional<? extends String> setVersion) {
            Utils.checkNotNull(setVersion, "setVersion");
            this.setVersion = setVersion;
            return this;
        }

        /**
         * The target name for the action
         */
        public Builder targetName(String targetName) {
            Utils.checkNotNull(targetName, "targetName");
            this.targetName = Optional.ofNullable(targetName);
            return this;
        }

        /**
         * The target name for the action
         */
        public Builder targetName(Optional<? extends String> targetName) {
            Utils.checkNotNull(targetName, "targetName");
            this.targetName = targetName;
            return this;
        }
        
        public GithubTriggerActionRequest build() {
            return new GithubTriggerActionRequest(
                genLockId,
                org,
                repoName,
                setVersion,
                targetName);
        }
    }
}

