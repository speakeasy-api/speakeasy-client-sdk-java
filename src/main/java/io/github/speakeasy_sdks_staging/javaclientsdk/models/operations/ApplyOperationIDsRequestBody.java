/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * ApplyOperationIDsRequestBody - Apply options
 */

public class ApplyOperationIDsRequestBody {

    /**
     * Whether to apply the suggestions as an overlay or replace the existing operationIDs. Default: false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("as_overlay")
    private Optional<? extends Boolean> asOverlay;

    @JsonCreator
    public ApplyOperationIDsRequestBody(
            @JsonProperty("as_overlay") Optional<? extends Boolean> asOverlay) {
        Utils.checkNotNull(asOverlay, "asOverlay");
        this.asOverlay = asOverlay;
    }
    
    public ApplyOperationIDsRequestBody() {
        this(Optional.empty());
    }

    /**
     * Whether to apply the suggestions as an overlay or replace the existing operationIDs. Default: false
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> asOverlay() {
        return (Optional<Boolean>) asOverlay;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Whether to apply the suggestions as an overlay or replace the existing operationIDs. Default: false
     */
    public ApplyOperationIDsRequestBody withAsOverlay(boolean asOverlay) {
        Utils.checkNotNull(asOverlay, "asOverlay");
        this.asOverlay = Optional.ofNullable(asOverlay);
        return this;
    }

    /**
     * Whether to apply the suggestions as an overlay or replace the existing operationIDs. Default: false
     */
    public ApplyOperationIDsRequestBody withAsOverlay(Optional<? extends Boolean> asOverlay) {
        Utils.checkNotNull(asOverlay, "asOverlay");
        this.asOverlay = asOverlay;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplyOperationIDsRequestBody other = (ApplyOperationIDsRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.asOverlay, other.asOverlay);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            asOverlay);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApplyOperationIDsRequestBody.class,
                "asOverlay", asOverlay);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> asOverlay = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether to apply the suggestions as an overlay or replace the existing operationIDs. Default: false
         */
        public Builder asOverlay(boolean asOverlay) {
            Utils.checkNotNull(asOverlay, "asOverlay");
            this.asOverlay = Optional.ofNullable(asOverlay);
            return this;
        }

        /**
         * Whether to apply the suggestions as an overlay or replace the existing operationIDs. Default: false
         */
        public Builder asOverlay(Optional<? extends Boolean> asOverlay) {
            Utils.checkNotNull(asOverlay, "asOverlay");
            this.asOverlay = asOverlay;
            return this;
        }
        
        public ApplyOperationIDsRequestBody build() {
            return new ApplyOperationIDsRequestBody(
                asOverlay);
        }
    }
}

