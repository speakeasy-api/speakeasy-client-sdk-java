/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class TargetSDK {

    /**
     * Remote commit ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commit_head")
    private Optional<? extends String> commitHead;

    /**
     * Timestamp when the event was created in the database.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * Version of the generated target (post generation)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_config_post_version")
    private Optional<? extends String> generateConfigPostVersion;

    /**
     * gen.lock ID (expected to be a uuid).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_id")
    private Optional<? extends String> generateGenLockId;

    /**
     * Indicates whether the target was considered published.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_published")
    private Optional<? extends Boolean> generatePublished;

    /**
     * The target of the event.
     */
    @JsonProperty("generate_target")
    private String generateTarget;

    /**
     * The version of the target.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_target_version")
    private Optional<? extends String> generateTargetVersion;

    /**
     * Current working directory relative to the git root.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_relative_cwd")
    private Optional<? extends String> gitRelativeCwd;

    /**
     * Default owner for git remote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_remote_default_owner")
    private Optional<? extends String> gitRemoteDefaultOwner;

    /**
     * Default repository name for git remote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_remote_default_repo")
    private Optional<? extends String> gitRemoteDefaultRepo;

    /**
     * Unique identifier for each event.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Indicates whether the event was successful.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    private Optional<? extends Boolean> success;

    public TargetSDK(
            @JsonProperty("commit_head") Optional<? extends String> commitHead,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("generate_config_post_version") Optional<? extends String> generateConfigPostVersion,
            @JsonProperty("generate_gen_lock_id") Optional<? extends String> generateGenLockId,
            @JsonProperty("generate_published") Optional<? extends Boolean> generatePublished,
            @JsonProperty("generate_target") String generateTarget,
            @JsonProperty("generate_target_version") Optional<? extends String> generateTargetVersion,
            @JsonProperty("git_relative_cwd") Optional<? extends String> gitRelativeCwd,
            @JsonProperty("git_remote_default_owner") Optional<? extends String> gitRemoteDefaultOwner,
            @JsonProperty("git_remote_default_repo") Optional<? extends String> gitRemoteDefaultRepo,
            @JsonProperty("id") String id,
            @JsonProperty("success") Optional<? extends Boolean> success) {
        Utils.checkNotNull(commitHead, "commitHead");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        Utils.checkNotNull(generatePublished, "generatePublished");
        Utils.checkNotNull(generateTarget, "generateTarget");
        Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
        Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
        Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
        Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(success, "success");
        this.commitHead = commitHead;
        this.createdAt = createdAt;
        this.generateConfigPostVersion = generateConfigPostVersion;
        this.generateGenLockId = generateGenLockId;
        this.generatePublished = generatePublished;
        this.generateTarget = generateTarget;
        this.generateTargetVersion = generateTargetVersion;
        this.gitRelativeCwd = gitRelativeCwd;
        this.gitRemoteDefaultOwner = gitRemoteDefaultOwner;
        this.gitRemoteDefaultRepo = gitRemoteDefaultRepo;
        this.id = id;
        this.success = success;
    }

    /**
     * Remote commit ID.
     */
    public Optional<? extends String> commitHead() {
        return commitHead;
    }

    /**
     * Timestamp when the event was created in the database.
     */
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * Version of the generated target (post generation)
     */
    public Optional<? extends String> generateConfigPostVersion() {
        return generateConfigPostVersion;
    }

    /**
     * gen.lock ID (expected to be a uuid).
     */
    public Optional<? extends String> generateGenLockId() {
        return generateGenLockId;
    }

    /**
     * Indicates whether the target was considered published.
     */
    public Optional<? extends Boolean> generatePublished() {
        return generatePublished;
    }

    /**
     * The target of the event.
     */
    public String generateTarget() {
        return generateTarget;
    }

    /**
     * The version of the target.
     */
    public Optional<? extends String> generateTargetVersion() {
        return generateTargetVersion;
    }

    /**
     * Current working directory relative to the git root.
     */
    public Optional<? extends String> gitRelativeCwd() {
        return gitRelativeCwd;
    }

    /**
     * Default owner for git remote.
     */
    public Optional<? extends String> gitRemoteDefaultOwner() {
        return gitRemoteDefaultOwner;
    }

    /**
     * Default repository name for git remote.
     */
    public Optional<? extends String> gitRemoteDefaultRepo() {
        return gitRemoteDefaultRepo;
    }

    /**
     * Unique identifier for each event.
     */
    public String id() {
        return id;
    }

    /**
     * Indicates whether the event was successful.
     */
    public Optional<? extends Boolean> success() {
        return success;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Remote commit ID.
     */
    public TargetSDK withCommitHead(String commitHead) {
        Utils.checkNotNull(commitHead, "commitHead");
        this.commitHead = Optional.ofNullable(commitHead);
        return this;
    }

    /**
     * Remote commit ID.
     */
    public TargetSDK withCommitHead(Optional<? extends String> commitHead) {
        Utils.checkNotNull(commitHead, "commitHead");
        this.commitHead = commitHead;
        return this;
    }

    /**
     * Timestamp when the event was created in the database.
     */
    public TargetSDK withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Version of the generated target (post generation)
     */
    public TargetSDK withGenerateConfigPostVersion(String generateConfigPostVersion) {
        Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
        this.generateConfigPostVersion = Optional.ofNullable(generateConfigPostVersion);
        return this;
    }

    /**
     * Version of the generated target (post generation)
     */
    public TargetSDK withGenerateConfigPostVersion(Optional<? extends String> generateConfigPostVersion) {
        Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
        this.generateConfigPostVersion = generateConfigPostVersion;
        return this;
    }

    /**
     * gen.lock ID (expected to be a uuid).
     */
    public TargetSDK withGenerateGenLockId(String generateGenLockId) {
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        this.generateGenLockId = Optional.ofNullable(generateGenLockId);
        return this;
    }

    /**
     * gen.lock ID (expected to be a uuid).
     */
    public TargetSDK withGenerateGenLockId(Optional<? extends String> generateGenLockId) {
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        this.generateGenLockId = generateGenLockId;
        return this;
    }

    /**
     * Indicates whether the target was considered published.
     */
    public TargetSDK withGeneratePublished(boolean generatePublished) {
        Utils.checkNotNull(generatePublished, "generatePublished");
        this.generatePublished = Optional.ofNullable(generatePublished);
        return this;
    }

    /**
     * Indicates whether the target was considered published.
     */
    public TargetSDK withGeneratePublished(Optional<? extends Boolean> generatePublished) {
        Utils.checkNotNull(generatePublished, "generatePublished");
        this.generatePublished = generatePublished;
        return this;
    }

    /**
     * The target of the event.
     */
    public TargetSDK withGenerateTarget(String generateTarget) {
        Utils.checkNotNull(generateTarget, "generateTarget");
        this.generateTarget = generateTarget;
        return this;
    }

    /**
     * The version of the target.
     */
    public TargetSDK withGenerateTargetVersion(String generateTargetVersion) {
        Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
        this.generateTargetVersion = Optional.ofNullable(generateTargetVersion);
        return this;
    }

    /**
     * The version of the target.
     */
    public TargetSDK withGenerateTargetVersion(Optional<? extends String> generateTargetVersion) {
        Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
        this.generateTargetVersion = generateTargetVersion;
        return this;
    }

    /**
     * Current working directory relative to the git root.
     */
    public TargetSDK withGitRelativeCwd(String gitRelativeCwd) {
        Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
        this.gitRelativeCwd = Optional.ofNullable(gitRelativeCwd);
        return this;
    }

    /**
     * Current working directory relative to the git root.
     */
    public TargetSDK withGitRelativeCwd(Optional<? extends String> gitRelativeCwd) {
        Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
        this.gitRelativeCwd = gitRelativeCwd;
        return this;
    }

    /**
     * Default owner for git remote.
     */
    public TargetSDK withGitRemoteDefaultOwner(String gitRemoteDefaultOwner) {
        Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
        this.gitRemoteDefaultOwner = Optional.ofNullable(gitRemoteDefaultOwner);
        return this;
    }

    /**
     * Default owner for git remote.
     */
    public TargetSDK withGitRemoteDefaultOwner(Optional<? extends String> gitRemoteDefaultOwner) {
        Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
        this.gitRemoteDefaultOwner = gitRemoteDefaultOwner;
        return this;
    }

    /**
     * Default repository name for git remote.
     */
    public TargetSDK withGitRemoteDefaultRepo(String gitRemoteDefaultRepo) {
        Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
        this.gitRemoteDefaultRepo = Optional.ofNullable(gitRemoteDefaultRepo);
        return this;
    }

    /**
     * Default repository name for git remote.
     */
    public TargetSDK withGitRemoteDefaultRepo(Optional<? extends String> gitRemoteDefaultRepo) {
        Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
        this.gitRemoteDefaultRepo = gitRemoteDefaultRepo;
        return this;
    }

    /**
     * Unique identifier for each event.
     */
    public TargetSDK withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Indicates whether the event was successful.
     */
    public TargetSDK withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = Optional.ofNullable(success);
        return this;
    }

    /**
     * Indicates whether the event was successful.
     */
    public TargetSDK withSuccess(Optional<? extends Boolean> success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TargetSDK other = (TargetSDK) o;
        return 
            java.util.Objects.deepEquals(this.commitHead, other.commitHead) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.generateConfigPostVersion, other.generateConfigPostVersion) &&
            java.util.Objects.deepEquals(this.generateGenLockId, other.generateGenLockId) &&
            java.util.Objects.deepEquals(this.generatePublished, other.generatePublished) &&
            java.util.Objects.deepEquals(this.generateTarget, other.generateTarget) &&
            java.util.Objects.deepEquals(this.generateTargetVersion, other.generateTargetVersion) &&
            java.util.Objects.deepEquals(this.gitRelativeCwd, other.gitRelativeCwd) &&
            java.util.Objects.deepEquals(this.gitRemoteDefaultOwner, other.gitRemoteDefaultOwner) &&
            java.util.Objects.deepEquals(this.gitRemoteDefaultRepo, other.gitRemoteDefaultRepo) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.success, other.success);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            commitHead,
            createdAt,
            generateConfigPostVersion,
            generateGenLockId,
            generatePublished,
            generateTarget,
            generateTargetVersion,
            gitRelativeCwd,
            gitRemoteDefaultOwner,
            gitRemoteDefaultRepo,
            id,
            success);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TargetSDK.class,
                "commitHead", commitHead,
                "createdAt", createdAt,
                "generateConfigPostVersion", generateConfigPostVersion,
                "generateGenLockId", generateGenLockId,
                "generatePublished", generatePublished,
                "generateTarget", generateTarget,
                "generateTargetVersion", generateTargetVersion,
                "gitRelativeCwd", gitRelativeCwd,
                "gitRemoteDefaultOwner", gitRemoteDefaultOwner,
                "gitRemoteDefaultRepo", gitRemoteDefaultRepo,
                "id", id,
                "success", success);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> commitHead = Optional.empty();
 
        private OffsetDateTime createdAt;
 
        private Optional<? extends String> generateConfigPostVersion = Optional.empty();
 
        private Optional<? extends String> generateGenLockId = Optional.empty();
 
        private Optional<? extends Boolean> generatePublished = Optional.empty();
 
        private String generateTarget;
 
        private Optional<? extends String> generateTargetVersion = Optional.empty();
 
        private Optional<? extends String> gitRelativeCwd = Optional.empty();
 
        private Optional<? extends String> gitRemoteDefaultOwner = Optional.empty();
 
        private Optional<? extends String> gitRemoteDefaultRepo = Optional.empty();
 
        private String id;
 
        private Optional<? extends Boolean> success = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Remote commit ID.
         */
        public Builder commitHead(String commitHead) {
            Utils.checkNotNull(commitHead, "commitHead");
            this.commitHead = Optional.ofNullable(commitHead);
            return this;
        }

        /**
         * Remote commit ID.
         */
        public Builder commitHead(Optional<? extends String> commitHead) {
            Utils.checkNotNull(commitHead, "commitHead");
            this.commitHead = commitHead;
            return this;
        }

        /**
         * Timestamp when the event was created in the database.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Version of the generated target (post generation)
         */
        public Builder generateConfigPostVersion(String generateConfigPostVersion) {
            Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
            this.generateConfigPostVersion = Optional.ofNullable(generateConfigPostVersion);
            return this;
        }

        /**
         * Version of the generated target (post generation)
         */
        public Builder generateConfigPostVersion(Optional<? extends String> generateConfigPostVersion) {
            Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
            this.generateConfigPostVersion = generateConfigPostVersion;
            return this;
        }

        /**
         * gen.lock ID (expected to be a uuid).
         */
        public Builder generateGenLockId(String generateGenLockId) {
            Utils.checkNotNull(generateGenLockId, "generateGenLockId");
            this.generateGenLockId = Optional.ofNullable(generateGenLockId);
            return this;
        }

        /**
         * gen.lock ID (expected to be a uuid).
         */
        public Builder generateGenLockId(Optional<? extends String> generateGenLockId) {
            Utils.checkNotNull(generateGenLockId, "generateGenLockId");
            this.generateGenLockId = generateGenLockId;
            return this;
        }

        /**
         * Indicates whether the target was considered published.
         */
        public Builder generatePublished(boolean generatePublished) {
            Utils.checkNotNull(generatePublished, "generatePublished");
            this.generatePublished = Optional.ofNullable(generatePublished);
            return this;
        }

        /**
         * Indicates whether the target was considered published.
         */
        public Builder generatePublished(Optional<? extends Boolean> generatePublished) {
            Utils.checkNotNull(generatePublished, "generatePublished");
            this.generatePublished = generatePublished;
            return this;
        }

        /**
         * The target of the event.
         */
        public Builder generateTarget(String generateTarget) {
            Utils.checkNotNull(generateTarget, "generateTarget");
            this.generateTarget = generateTarget;
            return this;
        }

        /**
         * The version of the target.
         */
        public Builder generateTargetVersion(String generateTargetVersion) {
            Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
            this.generateTargetVersion = Optional.ofNullable(generateTargetVersion);
            return this;
        }

        /**
         * The version of the target.
         */
        public Builder generateTargetVersion(Optional<? extends String> generateTargetVersion) {
            Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
            this.generateTargetVersion = generateTargetVersion;
            return this;
        }

        /**
         * Current working directory relative to the git root.
         */
        public Builder gitRelativeCwd(String gitRelativeCwd) {
            Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
            this.gitRelativeCwd = Optional.ofNullable(gitRelativeCwd);
            return this;
        }

        /**
         * Current working directory relative to the git root.
         */
        public Builder gitRelativeCwd(Optional<? extends String> gitRelativeCwd) {
            Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
            this.gitRelativeCwd = gitRelativeCwd;
            return this;
        }

        /**
         * Default owner for git remote.
         */
        public Builder gitRemoteDefaultOwner(String gitRemoteDefaultOwner) {
            Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
            this.gitRemoteDefaultOwner = Optional.ofNullable(gitRemoteDefaultOwner);
            return this;
        }

        /**
         * Default owner for git remote.
         */
        public Builder gitRemoteDefaultOwner(Optional<? extends String> gitRemoteDefaultOwner) {
            Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
            this.gitRemoteDefaultOwner = gitRemoteDefaultOwner;
            return this;
        }

        /**
         * Default repository name for git remote.
         */
        public Builder gitRemoteDefaultRepo(String gitRemoteDefaultRepo) {
            Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
            this.gitRemoteDefaultRepo = Optional.ofNullable(gitRemoteDefaultRepo);
            return this;
        }

        /**
         * Default repository name for git remote.
         */
        public Builder gitRemoteDefaultRepo(Optional<? extends String> gitRemoteDefaultRepo) {
            Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
            this.gitRemoteDefaultRepo = gitRemoteDefaultRepo;
            return this;
        }

        /**
         * Unique identifier for each event.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Indicates whether the event was successful.
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = Optional.ofNullable(success);
            return this;
        }

        /**
         * Indicates whether the event was successful.
         */
        public Builder success(Optional<? extends Boolean> success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }
        
        public TargetSDK build() {
            return new TargetSDK(
                commitHead,
                createdAt,
                generateConfigPostVersion,
                generateGenLockId,
                generatePublished,
                generateTarget,
                generateTargetVersion,
                gitRelativeCwd,
                gitRemoteDefaultOwner,
                gitRemoteDefaultRepo,
                id,
                success);
        }
    }
}

