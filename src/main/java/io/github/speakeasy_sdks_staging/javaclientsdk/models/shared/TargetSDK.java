/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

public class TargetSDK {

    /**
     * Remote commit ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commit_head")
    private Optional<? extends String> commitHead;

    /**
     * Name of the CI environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("continuous_integration_environment")
    private Optional<? extends String> continuousIntegrationEnvironment;

    /**
     * Error message if the last event was not successful.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<? extends String> error;

    /**
     * Version of the generated target (post generation)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_config_post_version")
    private Optional<? extends String> generateConfigPostVersion;

    /**
     * Eligible feature set during generation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_eligible_features")
    private Optional<? extends String> generateEligibleFeatures;

    /**
     * gen.lock ID (expected to be a uuid). The same as `id`. A unique identifier for the target.
     */
    @JsonProperty("generate_gen_lock_id")
    private String generateGenLockId;

    /**
     * Features prior to generation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_pre_features")
    private Optional<? extends String> generateGenLockPreFeatures;

    /**
     * Artifact version for the Previous Generation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_pre_version")
    private Optional<? extends String> generateGenLockPreVersion;

    /**
     * The number of operations ignored in generation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_number_of_operations_ignored")
    private Optional<? extends Long> generateNumberOfOperationsIgnored;

    /**
     * The number of operations used in generation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_number_of_operations_used")
    private Optional<? extends Long> generateNumberOfOperationsUsed;

    /**
     * Indicates whether the target was considered published.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_published")
    private Optional<? extends Boolean> generatePublished;

    /**
     * eg `typescript`, `terraform`, `python`
     */
    @JsonProperty("generate_target")
    private String generateTarget;

    /**
     * The workflow name of the target.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_target_name")
    private Optional<? extends String> generateTargetName;

    /**
     * The version of the Speakeasy generator for this target eg v2 of the typescript generator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_target_version")
    private Optional<? extends String> generateTargetVersion;

    /**
     * GitHub organization of the action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_organization")
    private Optional<? extends String> ghActionOrganization;

    /**
     * GitHub Action ref value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_ref")
    private Optional<? extends String> ghActionRef;

    /**
     * GitHub repository of the action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_repository")
    private Optional<? extends String> ghActionRepository;

    /**
     * Link to the GitHub action run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_run_link")
    private Optional<? extends String> ghActionRunLink;

    /**
     * Version of the GitHub action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_version")
    private Optional<? extends String> ghActionVersion;

    /**
     * Current working directory relative to the git root.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_relative_cwd")
    private Optional<? extends String> gitRelativeCwd;

    /**
     * Default owner for git remote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_remote_default_owner")
    private Optional<? extends String> gitRemoteDefaultOwner;

    /**
     * Default repository name for git remote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_remote_default_repo")
    private Optional<? extends String> gitRemoteDefaultRepo;

    /**
     * User email from git configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_user_email")
    private Optional<? extends String> gitUserEmail;

    /**
     * User's name from git configuration. (not GitHub username)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_user_name")
    private Optional<? extends String> gitUserName;

    /**
     * Remote hostname.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostname")
    private Optional<? extends String> hostname;

    /**
     * Unique identifier of the target the same as `generate_gen_lock_id`
     */
    @JsonProperty("id")
    private String id;

    /**
     * Timestamp when the event was created in the database.
     */
    @JsonProperty("last_event_created_at")
    private OffsetDateTime lastEventCreatedAt;

    /**
     * Unique identifier of the last event for the target
     */
    @JsonProperty("last_event_id")
    private String lastEventId;

    /**
     * Type of interaction.
     */
    @JsonProperty("last_event_interaction_type")
    private InteractionType lastEventInteractionType;

    /**
     * Label of the git repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repo_label")
    private Optional<? extends String> repoLabel;

    /**
     * The blob digest of the source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_blob_digest")
    private Optional<? extends String> sourceBlobDigest;

    /**
     * The namespace name of the source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_namespace_name")
    private Optional<? extends String> sourceNamespaceName;

    /**
     * The revision digest of the source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_revision_digest")
    private Optional<? extends String> sourceRevisionDigest;

    /**
     * Indicates whether the event was successful.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    private Optional<? extends Boolean> success;

    /**
     * Workflow file (post execution)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workflow_post_raw")
    private Optional<? extends String> workflowPostRaw;

    /**
     * Workflow file (prior to execution)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workflow_pre_raw")
    private Optional<? extends String> workflowPreRaw;

    @JsonCreator
    public TargetSDK(
            @JsonProperty("commit_head") Optional<? extends String> commitHead,
            @JsonProperty("continuous_integration_environment") Optional<? extends String> continuousIntegrationEnvironment,
            @JsonProperty("error") Optional<? extends String> error,
            @JsonProperty("generate_config_post_version") Optional<? extends String> generateConfigPostVersion,
            @JsonProperty("generate_eligible_features") Optional<? extends String> generateEligibleFeatures,
            @JsonProperty("generate_gen_lock_id") String generateGenLockId,
            @JsonProperty("generate_gen_lock_pre_features") Optional<? extends String> generateGenLockPreFeatures,
            @JsonProperty("generate_gen_lock_pre_version") Optional<? extends String> generateGenLockPreVersion,
            @JsonProperty("generate_number_of_operations_ignored") Optional<? extends Long> generateNumberOfOperationsIgnored,
            @JsonProperty("generate_number_of_operations_used") Optional<? extends Long> generateNumberOfOperationsUsed,
            @JsonProperty("generate_published") Optional<? extends Boolean> generatePublished,
            @JsonProperty("generate_target") String generateTarget,
            @JsonProperty("generate_target_name") Optional<? extends String> generateTargetName,
            @JsonProperty("generate_target_version") Optional<? extends String> generateTargetVersion,
            @JsonProperty("gh_action_organization") Optional<? extends String> ghActionOrganization,
            @JsonProperty("gh_action_ref") Optional<? extends String> ghActionRef,
            @JsonProperty("gh_action_repository") Optional<? extends String> ghActionRepository,
            @JsonProperty("gh_action_run_link") Optional<? extends String> ghActionRunLink,
            @JsonProperty("gh_action_version") Optional<? extends String> ghActionVersion,
            @JsonProperty("git_relative_cwd") Optional<? extends String> gitRelativeCwd,
            @JsonProperty("git_remote_default_owner") Optional<? extends String> gitRemoteDefaultOwner,
            @JsonProperty("git_remote_default_repo") Optional<? extends String> gitRemoteDefaultRepo,
            @JsonProperty("git_user_email") Optional<? extends String> gitUserEmail,
            @JsonProperty("git_user_name") Optional<? extends String> gitUserName,
            @JsonProperty("hostname") Optional<? extends String> hostname,
            @JsonProperty("id") String id,
            @JsonProperty("last_event_created_at") OffsetDateTime lastEventCreatedAt,
            @JsonProperty("last_event_id") String lastEventId,
            @JsonProperty("last_event_interaction_type") InteractionType lastEventInteractionType,
            @JsonProperty("repo_label") Optional<? extends String> repoLabel,
            @JsonProperty("source_blob_digest") Optional<? extends String> sourceBlobDigest,
            @JsonProperty("source_namespace_name") Optional<? extends String> sourceNamespaceName,
            @JsonProperty("source_revision_digest") Optional<? extends String> sourceRevisionDigest,
            @JsonProperty("success") Optional<? extends Boolean> success,
            @JsonProperty("workflow_post_raw") Optional<? extends String> workflowPostRaw,
            @JsonProperty("workflow_pre_raw") Optional<? extends String> workflowPreRaw) {
        Utils.checkNotNull(commitHead, "commitHead");
        Utils.checkNotNull(continuousIntegrationEnvironment, "continuousIntegrationEnvironment");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
        Utils.checkNotNull(generateEligibleFeatures, "generateEligibleFeatures");
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        Utils.checkNotNull(generateGenLockPreFeatures, "generateGenLockPreFeatures");
        Utils.checkNotNull(generateGenLockPreVersion, "generateGenLockPreVersion");
        Utils.checkNotNull(generateNumberOfOperationsIgnored, "generateNumberOfOperationsIgnored");
        Utils.checkNotNull(generateNumberOfOperationsUsed, "generateNumberOfOperationsUsed");
        Utils.checkNotNull(generatePublished, "generatePublished");
        Utils.checkNotNull(generateTarget, "generateTarget");
        Utils.checkNotNull(generateTargetName, "generateTargetName");
        Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
        Utils.checkNotNull(ghActionOrganization, "ghActionOrganization");
        Utils.checkNotNull(ghActionRef, "ghActionRef");
        Utils.checkNotNull(ghActionRepository, "ghActionRepository");
        Utils.checkNotNull(ghActionRunLink, "ghActionRunLink");
        Utils.checkNotNull(ghActionVersion, "ghActionVersion");
        Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
        Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
        Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
        Utils.checkNotNull(gitUserEmail, "gitUserEmail");
        Utils.checkNotNull(gitUserName, "gitUserName");
        Utils.checkNotNull(hostname, "hostname");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(lastEventCreatedAt, "lastEventCreatedAt");
        Utils.checkNotNull(lastEventId, "lastEventId");
        Utils.checkNotNull(lastEventInteractionType, "lastEventInteractionType");
        Utils.checkNotNull(repoLabel, "repoLabel");
        Utils.checkNotNull(sourceBlobDigest, "sourceBlobDigest");
        Utils.checkNotNull(sourceNamespaceName, "sourceNamespaceName");
        Utils.checkNotNull(sourceRevisionDigest, "sourceRevisionDigest");
        Utils.checkNotNull(success, "success");
        Utils.checkNotNull(workflowPostRaw, "workflowPostRaw");
        Utils.checkNotNull(workflowPreRaw, "workflowPreRaw");
        this.commitHead = commitHead;
        this.continuousIntegrationEnvironment = continuousIntegrationEnvironment;
        this.error = error;
        this.generateConfigPostVersion = generateConfigPostVersion;
        this.generateEligibleFeatures = generateEligibleFeatures;
        this.generateGenLockId = generateGenLockId;
        this.generateGenLockPreFeatures = generateGenLockPreFeatures;
        this.generateGenLockPreVersion = generateGenLockPreVersion;
        this.generateNumberOfOperationsIgnored = generateNumberOfOperationsIgnored;
        this.generateNumberOfOperationsUsed = generateNumberOfOperationsUsed;
        this.generatePublished = generatePublished;
        this.generateTarget = generateTarget;
        this.generateTargetName = generateTargetName;
        this.generateTargetVersion = generateTargetVersion;
        this.ghActionOrganization = ghActionOrganization;
        this.ghActionRef = ghActionRef;
        this.ghActionRepository = ghActionRepository;
        this.ghActionRunLink = ghActionRunLink;
        this.ghActionVersion = ghActionVersion;
        this.gitRelativeCwd = gitRelativeCwd;
        this.gitRemoteDefaultOwner = gitRemoteDefaultOwner;
        this.gitRemoteDefaultRepo = gitRemoteDefaultRepo;
        this.gitUserEmail = gitUserEmail;
        this.gitUserName = gitUserName;
        this.hostname = hostname;
        this.id = id;
        this.lastEventCreatedAt = lastEventCreatedAt;
        this.lastEventId = lastEventId;
        this.lastEventInteractionType = lastEventInteractionType;
        this.repoLabel = repoLabel;
        this.sourceBlobDigest = sourceBlobDigest;
        this.sourceNamespaceName = sourceNamespaceName;
        this.sourceRevisionDigest = sourceRevisionDigest;
        this.success = success;
        this.workflowPostRaw = workflowPostRaw;
        this.workflowPreRaw = workflowPreRaw;
    }
    
    public TargetSDK(
            String generateGenLockId,
            String generateTarget,
            String id,
            OffsetDateTime lastEventCreatedAt,
            String lastEventId,
            InteractionType lastEventInteractionType) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), generateGenLockId, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), generateTarget, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), id, lastEventCreatedAt, lastEventId, lastEventInteractionType, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Remote commit ID.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> commitHead() {
        return (Optional<String>) commitHead;
    }

    /**
     * Name of the CI environment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> continuousIntegrationEnvironment() {
        return (Optional<String>) continuousIntegrationEnvironment;
    }

    /**
     * Error message if the last event was not successful.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> error() {
        return (Optional<String>) error;
    }

    /**
     * Version of the generated target (post generation)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> generateConfigPostVersion() {
        return (Optional<String>) generateConfigPostVersion;
    }

    /**
     * Eligible feature set during generation
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> generateEligibleFeatures() {
        return (Optional<String>) generateEligibleFeatures;
    }

    /**
     * gen.lock ID (expected to be a uuid). The same as `id`. A unique identifier for the target.
     */
    @JsonIgnore
    public String generateGenLockId() {
        return generateGenLockId;
    }

    /**
     * Features prior to generation
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> generateGenLockPreFeatures() {
        return (Optional<String>) generateGenLockPreFeatures;
    }

    /**
     * Artifact version for the Previous Generation
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> generateGenLockPreVersion() {
        return (Optional<String>) generateGenLockPreVersion;
    }

    /**
     * The number of operations ignored in generation.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> generateNumberOfOperationsIgnored() {
        return (Optional<Long>) generateNumberOfOperationsIgnored;
    }

    /**
     * The number of operations used in generation.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> generateNumberOfOperationsUsed() {
        return (Optional<Long>) generateNumberOfOperationsUsed;
    }

    /**
     * Indicates whether the target was considered published.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> generatePublished() {
        return (Optional<Boolean>) generatePublished;
    }

    /**
     * eg `typescript`, `terraform`, `python`
     */
    @JsonIgnore
    public String generateTarget() {
        return generateTarget;
    }

    /**
     * The workflow name of the target.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> generateTargetName() {
        return (Optional<String>) generateTargetName;
    }

    /**
     * The version of the Speakeasy generator for this target eg v2 of the typescript generator.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> generateTargetVersion() {
        return (Optional<String>) generateTargetVersion;
    }

    /**
     * GitHub organization of the action.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> ghActionOrganization() {
        return (Optional<String>) ghActionOrganization;
    }

    /**
     * GitHub Action ref value.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> ghActionRef() {
        return (Optional<String>) ghActionRef;
    }

    /**
     * GitHub repository of the action.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> ghActionRepository() {
        return (Optional<String>) ghActionRepository;
    }

    /**
     * Link to the GitHub action run.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> ghActionRunLink() {
        return (Optional<String>) ghActionRunLink;
    }

    /**
     * Version of the GitHub action.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> ghActionVersion() {
        return (Optional<String>) ghActionVersion;
    }

    /**
     * Current working directory relative to the git root.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> gitRelativeCwd() {
        return (Optional<String>) gitRelativeCwd;
    }

    /**
     * Default owner for git remote.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> gitRemoteDefaultOwner() {
        return (Optional<String>) gitRemoteDefaultOwner;
    }

    /**
     * Default repository name for git remote.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> gitRemoteDefaultRepo() {
        return (Optional<String>) gitRemoteDefaultRepo;
    }

    /**
     * User email from git configuration.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> gitUserEmail() {
        return (Optional<String>) gitUserEmail;
    }

    /**
     * User's name from git configuration. (not GitHub username)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> gitUserName() {
        return (Optional<String>) gitUserName;
    }

    /**
     * Remote hostname.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> hostname() {
        return (Optional<String>) hostname;
    }

    /**
     * Unique identifier of the target the same as `generate_gen_lock_id`
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Timestamp when the event was created in the database.
     */
    @JsonIgnore
    public OffsetDateTime lastEventCreatedAt() {
        return lastEventCreatedAt;
    }

    /**
     * Unique identifier of the last event for the target
     */
    @JsonIgnore
    public String lastEventId() {
        return lastEventId;
    }

    /**
     * Type of interaction.
     */
    @JsonIgnore
    public InteractionType lastEventInteractionType() {
        return lastEventInteractionType;
    }

    /**
     * Label of the git repository.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> repoLabel() {
        return (Optional<String>) repoLabel;
    }

    /**
     * The blob digest of the source.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> sourceBlobDigest() {
        return (Optional<String>) sourceBlobDigest;
    }

    /**
     * The namespace name of the source.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> sourceNamespaceName() {
        return (Optional<String>) sourceNamespaceName;
    }

    /**
     * The revision digest of the source.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> sourceRevisionDigest() {
        return (Optional<String>) sourceRevisionDigest;
    }

    /**
     * Indicates whether the event was successful.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> success() {
        return (Optional<Boolean>) success;
    }

    /**
     * Workflow file (post execution)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> workflowPostRaw() {
        return (Optional<String>) workflowPostRaw;
    }

    /**
     * Workflow file (prior to execution)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> workflowPreRaw() {
        return (Optional<String>) workflowPreRaw;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Remote commit ID.
     */
    public TargetSDK withCommitHead(String commitHead) {
        Utils.checkNotNull(commitHead, "commitHead");
        this.commitHead = Optional.ofNullable(commitHead);
        return this;
    }

    /**
     * Remote commit ID.
     */
    public TargetSDK withCommitHead(Optional<? extends String> commitHead) {
        Utils.checkNotNull(commitHead, "commitHead");
        this.commitHead = commitHead;
        return this;
    }

    /**
     * Name of the CI environment.
     */
    public TargetSDK withContinuousIntegrationEnvironment(String continuousIntegrationEnvironment) {
        Utils.checkNotNull(continuousIntegrationEnvironment, "continuousIntegrationEnvironment");
        this.continuousIntegrationEnvironment = Optional.ofNullable(continuousIntegrationEnvironment);
        return this;
    }

    /**
     * Name of the CI environment.
     */
    public TargetSDK withContinuousIntegrationEnvironment(Optional<? extends String> continuousIntegrationEnvironment) {
        Utils.checkNotNull(continuousIntegrationEnvironment, "continuousIntegrationEnvironment");
        this.continuousIntegrationEnvironment = continuousIntegrationEnvironment;
        return this;
    }

    /**
     * Error message if the last event was not successful.
     */
    public TargetSDK withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    /**
     * Error message if the last event was not successful.
     */
    public TargetSDK withError(Optional<? extends String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    /**
     * Version of the generated target (post generation)
     */
    public TargetSDK withGenerateConfigPostVersion(String generateConfigPostVersion) {
        Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
        this.generateConfigPostVersion = Optional.ofNullable(generateConfigPostVersion);
        return this;
    }

    /**
     * Version of the generated target (post generation)
     */
    public TargetSDK withGenerateConfigPostVersion(Optional<? extends String> generateConfigPostVersion) {
        Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
        this.generateConfigPostVersion = generateConfigPostVersion;
        return this;
    }

    /**
     * Eligible feature set during generation
     */
    public TargetSDK withGenerateEligibleFeatures(String generateEligibleFeatures) {
        Utils.checkNotNull(generateEligibleFeatures, "generateEligibleFeatures");
        this.generateEligibleFeatures = Optional.ofNullable(generateEligibleFeatures);
        return this;
    }

    /**
     * Eligible feature set during generation
     */
    public TargetSDK withGenerateEligibleFeatures(Optional<? extends String> generateEligibleFeatures) {
        Utils.checkNotNull(generateEligibleFeatures, "generateEligibleFeatures");
        this.generateEligibleFeatures = generateEligibleFeatures;
        return this;
    }

    /**
     * gen.lock ID (expected to be a uuid). The same as `id`. A unique identifier for the target.
     */
    public TargetSDK withGenerateGenLockId(String generateGenLockId) {
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        this.generateGenLockId = generateGenLockId;
        return this;
    }

    /**
     * Features prior to generation
     */
    public TargetSDK withGenerateGenLockPreFeatures(String generateGenLockPreFeatures) {
        Utils.checkNotNull(generateGenLockPreFeatures, "generateGenLockPreFeatures");
        this.generateGenLockPreFeatures = Optional.ofNullable(generateGenLockPreFeatures);
        return this;
    }

    /**
     * Features prior to generation
     */
    public TargetSDK withGenerateGenLockPreFeatures(Optional<? extends String> generateGenLockPreFeatures) {
        Utils.checkNotNull(generateGenLockPreFeatures, "generateGenLockPreFeatures");
        this.generateGenLockPreFeatures = generateGenLockPreFeatures;
        return this;
    }

    /**
     * Artifact version for the Previous Generation
     */
    public TargetSDK withGenerateGenLockPreVersion(String generateGenLockPreVersion) {
        Utils.checkNotNull(generateGenLockPreVersion, "generateGenLockPreVersion");
        this.generateGenLockPreVersion = Optional.ofNullable(generateGenLockPreVersion);
        return this;
    }

    /**
     * Artifact version for the Previous Generation
     */
    public TargetSDK withGenerateGenLockPreVersion(Optional<? extends String> generateGenLockPreVersion) {
        Utils.checkNotNull(generateGenLockPreVersion, "generateGenLockPreVersion");
        this.generateGenLockPreVersion = generateGenLockPreVersion;
        return this;
    }

    /**
     * The number of operations ignored in generation.
     */
    public TargetSDK withGenerateNumberOfOperationsIgnored(long generateNumberOfOperationsIgnored) {
        Utils.checkNotNull(generateNumberOfOperationsIgnored, "generateNumberOfOperationsIgnored");
        this.generateNumberOfOperationsIgnored = Optional.ofNullable(generateNumberOfOperationsIgnored);
        return this;
    }

    /**
     * The number of operations ignored in generation.
     */
    public TargetSDK withGenerateNumberOfOperationsIgnored(Optional<? extends Long> generateNumberOfOperationsIgnored) {
        Utils.checkNotNull(generateNumberOfOperationsIgnored, "generateNumberOfOperationsIgnored");
        this.generateNumberOfOperationsIgnored = generateNumberOfOperationsIgnored;
        return this;
    }

    /**
     * The number of operations used in generation.
     */
    public TargetSDK withGenerateNumberOfOperationsUsed(long generateNumberOfOperationsUsed) {
        Utils.checkNotNull(generateNumberOfOperationsUsed, "generateNumberOfOperationsUsed");
        this.generateNumberOfOperationsUsed = Optional.ofNullable(generateNumberOfOperationsUsed);
        return this;
    }

    /**
     * The number of operations used in generation.
     */
    public TargetSDK withGenerateNumberOfOperationsUsed(Optional<? extends Long> generateNumberOfOperationsUsed) {
        Utils.checkNotNull(generateNumberOfOperationsUsed, "generateNumberOfOperationsUsed");
        this.generateNumberOfOperationsUsed = generateNumberOfOperationsUsed;
        return this;
    }

    /**
     * Indicates whether the target was considered published.
     */
    public TargetSDK withGeneratePublished(boolean generatePublished) {
        Utils.checkNotNull(generatePublished, "generatePublished");
        this.generatePublished = Optional.ofNullable(generatePublished);
        return this;
    }

    /**
     * Indicates whether the target was considered published.
     */
    public TargetSDK withGeneratePublished(Optional<? extends Boolean> generatePublished) {
        Utils.checkNotNull(generatePublished, "generatePublished");
        this.generatePublished = generatePublished;
        return this;
    }

    /**
     * eg `typescript`, `terraform`, `python`
     */
    public TargetSDK withGenerateTarget(String generateTarget) {
        Utils.checkNotNull(generateTarget, "generateTarget");
        this.generateTarget = generateTarget;
        return this;
    }

    /**
     * The workflow name of the target.
     */
    public TargetSDK withGenerateTargetName(String generateTargetName) {
        Utils.checkNotNull(generateTargetName, "generateTargetName");
        this.generateTargetName = Optional.ofNullable(generateTargetName);
        return this;
    }

    /**
     * The workflow name of the target.
     */
    public TargetSDK withGenerateTargetName(Optional<? extends String> generateTargetName) {
        Utils.checkNotNull(generateTargetName, "generateTargetName");
        this.generateTargetName = generateTargetName;
        return this;
    }

    /**
     * The version of the Speakeasy generator for this target eg v2 of the typescript generator.
     */
    public TargetSDK withGenerateTargetVersion(String generateTargetVersion) {
        Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
        this.generateTargetVersion = Optional.ofNullable(generateTargetVersion);
        return this;
    }

    /**
     * The version of the Speakeasy generator for this target eg v2 of the typescript generator.
     */
    public TargetSDK withGenerateTargetVersion(Optional<? extends String> generateTargetVersion) {
        Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
        this.generateTargetVersion = generateTargetVersion;
        return this;
    }

    /**
     * GitHub organization of the action.
     */
    public TargetSDK withGhActionOrganization(String ghActionOrganization) {
        Utils.checkNotNull(ghActionOrganization, "ghActionOrganization");
        this.ghActionOrganization = Optional.ofNullable(ghActionOrganization);
        return this;
    }

    /**
     * GitHub organization of the action.
     */
    public TargetSDK withGhActionOrganization(Optional<? extends String> ghActionOrganization) {
        Utils.checkNotNull(ghActionOrganization, "ghActionOrganization");
        this.ghActionOrganization = ghActionOrganization;
        return this;
    }

    /**
     * GitHub Action ref value.
     */
    public TargetSDK withGhActionRef(String ghActionRef) {
        Utils.checkNotNull(ghActionRef, "ghActionRef");
        this.ghActionRef = Optional.ofNullable(ghActionRef);
        return this;
    }

    /**
     * GitHub Action ref value.
     */
    public TargetSDK withGhActionRef(Optional<? extends String> ghActionRef) {
        Utils.checkNotNull(ghActionRef, "ghActionRef");
        this.ghActionRef = ghActionRef;
        return this;
    }

    /**
     * GitHub repository of the action.
     */
    public TargetSDK withGhActionRepository(String ghActionRepository) {
        Utils.checkNotNull(ghActionRepository, "ghActionRepository");
        this.ghActionRepository = Optional.ofNullable(ghActionRepository);
        return this;
    }

    /**
     * GitHub repository of the action.
     */
    public TargetSDK withGhActionRepository(Optional<? extends String> ghActionRepository) {
        Utils.checkNotNull(ghActionRepository, "ghActionRepository");
        this.ghActionRepository = ghActionRepository;
        return this;
    }

    /**
     * Link to the GitHub action run.
     */
    public TargetSDK withGhActionRunLink(String ghActionRunLink) {
        Utils.checkNotNull(ghActionRunLink, "ghActionRunLink");
        this.ghActionRunLink = Optional.ofNullable(ghActionRunLink);
        return this;
    }

    /**
     * Link to the GitHub action run.
     */
    public TargetSDK withGhActionRunLink(Optional<? extends String> ghActionRunLink) {
        Utils.checkNotNull(ghActionRunLink, "ghActionRunLink");
        this.ghActionRunLink = ghActionRunLink;
        return this;
    }

    /**
     * Version of the GitHub action.
     */
    public TargetSDK withGhActionVersion(String ghActionVersion) {
        Utils.checkNotNull(ghActionVersion, "ghActionVersion");
        this.ghActionVersion = Optional.ofNullable(ghActionVersion);
        return this;
    }

    /**
     * Version of the GitHub action.
     */
    public TargetSDK withGhActionVersion(Optional<? extends String> ghActionVersion) {
        Utils.checkNotNull(ghActionVersion, "ghActionVersion");
        this.ghActionVersion = ghActionVersion;
        return this;
    }

    /**
     * Current working directory relative to the git root.
     */
    public TargetSDK withGitRelativeCwd(String gitRelativeCwd) {
        Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
        this.gitRelativeCwd = Optional.ofNullable(gitRelativeCwd);
        return this;
    }

    /**
     * Current working directory relative to the git root.
     */
    public TargetSDK withGitRelativeCwd(Optional<? extends String> gitRelativeCwd) {
        Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
        this.gitRelativeCwd = gitRelativeCwd;
        return this;
    }

    /**
     * Default owner for git remote.
     */
    public TargetSDK withGitRemoteDefaultOwner(String gitRemoteDefaultOwner) {
        Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
        this.gitRemoteDefaultOwner = Optional.ofNullable(gitRemoteDefaultOwner);
        return this;
    }

    /**
     * Default owner for git remote.
     */
    public TargetSDK withGitRemoteDefaultOwner(Optional<? extends String> gitRemoteDefaultOwner) {
        Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
        this.gitRemoteDefaultOwner = gitRemoteDefaultOwner;
        return this;
    }

    /**
     * Default repository name for git remote.
     */
    public TargetSDK withGitRemoteDefaultRepo(String gitRemoteDefaultRepo) {
        Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
        this.gitRemoteDefaultRepo = Optional.ofNullable(gitRemoteDefaultRepo);
        return this;
    }

    /**
     * Default repository name for git remote.
     */
    public TargetSDK withGitRemoteDefaultRepo(Optional<? extends String> gitRemoteDefaultRepo) {
        Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
        this.gitRemoteDefaultRepo = gitRemoteDefaultRepo;
        return this;
    }

    /**
     * User email from git configuration.
     */
    public TargetSDK withGitUserEmail(String gitUserEmail) {
        Utils.checkNotNull(gitUserEmail, "gitUserEmail");
        this.gitUserEmail = Optional.ofNullable(gitUserEmail);
        return this;
    }

    /**
     * User email from git configuration.
     */
    public TargetSDK withGitUserEmail(Optional<? extends String> gitUserEmail) {
        Utils.checkNotNull(gitUserEmail, "gitUserEmail");
        this.gitUserEmail = gitUserEmail;
        return this;
    }

    /**
     * User's name from git configuration. (not GitHub username)
     */
    public TargetSDK withGitUserName(String gitUserName) {
        Utils.checkNotNull(gitUserName, "gitUserName");
        this.gitUserName = Optional.ofNullable(gitUserName);
        return this;
    }

    /**
     * User's name from git configuration. (not GitHub username)
     */
    public TargetSDK withGitUserName(Optional<? extends String> gitUserName) {
        Utils.checkNotNull(gitUserName, "gitUserName");
        this.gitUserName = gitUserName;
        return this;
    }

    /**
     * Remote hostname.
     */
    public TargetSDK withHostname(String hostname) {
        Utils.checkNotNull(hostname, "hostname");
        this.hostname = Optional.ofNullable(hostname);
        return this;
    }

    /**
     * Remote hostname.
     */
    public TargetSDK withHostname(Optional<? extends String> hostname) {
        Utils.checkNotNull(hostname, "hostname");
        this.hostname = hostname;
        return this;
    }

    /**
     * Unique identifier of the target the same as `generate_gen_lock_id`
     */
    public TargetSDK withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Timestamp when the event was created in the database.
     */
    public TargetSDK withLastEventCreatedAt(OffsetDateTime lastEventCreatedAt) {
        Utils.checkNotNull(lastEventCreatedAt, "lastEventCreatedAt");
        this.lastEventCreatedAt = lastEventCreatedAt;
        return this;
    }

    /**
     * Unique identifier of the last event for the target
     */
    public TargetSDK withLastEventId(String lastEventId) {
        Utils.checkNotNull(lastEventId, "lastEventId");
        this.lastEventId = lastEventId;
        return this;
    }

    /**
     * Type of interaction.
     */
    public TargetSDK withLastEventInteractionType(InteractionType lastEventInteractionType) {
        Utils.checkNotNull(lastEventInteractionType, "lastEventInteractionType");
        this.lastEventInteractionType = lastEventInteractionType;
        return this;
    }

    /**
     * Label of the git repository.
     */
    public TargetSDK withRepoLabel(String repoLabel) {
        Utils.checkNotNull(repoLabel, "repoLabel");
        this.repoLabel = Optional.ofNullable(repoLabel);
        return this;
    }

    /**
     * Label of the git repository.
     */
    public TargetSDK withRepoLabel(Optional<? extends String> repoLabel) {
        Utils.checkNotNull(repoLabel, "repoLabel");
        this.repoLabel = repoLabel;
        return this;
    }

    /**
     * The blob digest of the source.
     */
    public TargetSDK withSourceBlobDigest(String sourceBlobDigest) {
        Utils.checkNotNull(sourceBlobDigest, "sourceBlobDigest");
        this.sourceBlobDigest = Optional.ofNullable(sourceBlobDigest);
        return this;
    }

    /**
     * The blob digest of the source.
     */
    public TargetSDK withSourceBlobDigest(Optional<? extends String> sourceBlobDigest) {
        Utils.checkNotNull(sourceBlobDigest, "sourceBlobDigest");
        this.sourceBlobDigest = sourceBlobDigest;
        return this;
    }

    /**
     * The namespace name of the source.
     */
    public TargetSDK withSourceNamespaceName(String sourceNamespaceName) {
        Utils.checkNotNull(sourceNamespaceName, "sourceNamespaceName");
        this.sourceNamespaceName = Optional.ofNullable(sourceNamespaceName);
        return this;
    }

    /**
     * The namespace name of the source.
     */
    public TargetSDK withSourceNamespaceName(Optional<? extends String> sourceNamespaceName) {
        Utils.checkNotNull(sourceNamespaceName, "sourceNamespaceName");
        this.sourceNamespaceName = sourceNamespaceName;
        return this;
    }

    /**
     * The revision digest of the source.
     */
    public TargetSDK withSourceRevisionDigest(String sourceRevisionDigest) {
        Utils.checkNotNull(sourceRevisionDigest, "sourceRevisionDigest");
        this.sourceRevisionDigest = Optional.ofNullable(sourceRevisionDigest);
        return this;
    }

    /**
     * The revision digest of the source.
     */
    public TargetSDK withSourceRevisionDigest(Optional<? extends String> sourceRevisionDigest) {
        Utils.checkNotNull(sourceRevisionDigest, "sourceRevisionDigest");
        this.sourceRevisionDigest = sourceRevisionDigest;
        return this;
    }

    /**
     * Indicates whether the event was successful.
     */
    public TargetSDK withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = Optional.ofNullable(success);
        return this;
    }

    /**
     * Indicates whether the event was successful.
     */
    public TargetSDK withSuccess(Optional<? extends Boolean> success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    /**
     * Workflow file (post execution)
     */
    public TargetSDK withWorkflowPostRaw(String workflowPostRaw) {
        Utils.checkNotNull(workflowPostRaw, "workflowPostRaw");
        this.workflowPostRaw = Optional.ofNullable(workflowPostRaw);
        return this;
    }

    /**
     * Workflow file (post execution)
     */
    public TargetSDK withWorkflowPostRaw(Optional<? extends String> workflowPostRaw) {
        Utils.checkNotNull(workflowPostRaw, "workflowPostRaw");
        this.workflowPostRaw = workflowPostRaw;
        return this;
    }

    /**
     * Workflow file (prior to execution)
     */
    public TargetSDK withWorkflowPreRaw(String workflowPreRaw) {
        Utils.checkNotNull(workflowPreRaw, "workflowPreRaw");
        this.workflowPreRaw = Optional.ofNullable(workflowPreRaw);
        return this;
    }

    /**
     * Workflow file (prior to execution)
     */
    public TargetSDK withWorkflowPreRaw(Optional<? extends String> workflowPreRaw) {
        Utils.checkNotNull(workflowPreRaw, "workflowPreRaw");
        this.workflowPreRaw = workflowPreRaw;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TargetSDK other = (TargetSDK) o;
        return 
            java.util.Objects.deepEquals(this.commitHead, other.commitHead) &&
            java.util.Objects.deepEquals(this.continuousIntegrationEnvironment, other.continuousIntegrationEnvironment) &&
            java.util.Objects.deepEquals(this.error, other.error) &&
            java.util.Objects.deepEquals(this.generateConfigPostVersion, other.generateConfigPostVersion) &&
            java.util.Objects.deepEquals(this.generateEligibleFeatures, other.generateEligibleFeatures) &&
            java.util.Objects.deepEquals(this.generateGenLockId, other.generateGenLockId) &&
            java.util.Objects.deepEquals(this.generateGenLockPreFeatures, other.generateGenLockPreFeatures) &&
            java.util.Objects.deepEquals(this.generateGenLockPreVersion, other.generateGenLockPreVersion) &&
            java.util.Objects.deepEquals(this.generateNumberOfOperationsIgnored, other.generateNumberOfOperationsIgnored) &&
            java.util.Objects.deepEquals(this.generateNumberOfOperationsUsed, other.generateNumberOfOperationsUsed) &&
            java.util.Objects.deepEquals(this.generatePublished, other.generatePublished) &&
            java.util.Objects.deepEquals(this.generateTarget, other.generateTarget) &&
            java.util.Objects.deepEquals(this.generateTargetName, other.generateTargetName) &&
            java.util.Objects.deepEquals(this.generateTargetVersion, other.generateTargetVersion) &&
            java.util.Objects.deepEquals(this.ghActionOrganization, other.ghActionOrganization) &&
            java.util.Objects.deepEquals(this.ghActionRef, other.ghActionRef) &&
            java.util.Objects.deepEquals(this.ghActionRepository, other.ghActionRepository) &&
            java.util.Objects.deepEquals(this.ghActionRunLink, other.ghActionRunLink) &&
            java.util.Objects.deepEquals(this.ghActionVersion, other.ghActionVersion) &&
            java.util.Objects.deepEquals(this.gitRelativeCwd, other.gitRelativeCwd) &&
            java.util.Objects.deepEquals(this.gitRemoteDefaultOwner, other.gitRemoteDefaultOwner) &&
            java.util.Objects.deepEquals(this.gitRemoteDefaultRepo, other.gitRemoteDefaultRepo) &&
            java.util.Objects.deepEquals(this.gitUserEmail, other.gitUserEmail) &&
            java.util.Objects.deepEquals(this.gitUserName, other.gitUserName) &&
            java.util.Objects.deepEquals(this.hostname, other.hostname) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.lastEventCreatedAt, other.lastEventCreatedAt) &&
            java.util.Objects.deepEquals(this.lastEventId, other.lastEventId) &&
            java.util.Objects.deepEquals(this.lastEventInteractionType, other.lastEventInteractionType) &&
            java.util.Objects.deepEquals(this.repoLabel, other.repoLabel) &&
            java.util.Objects.deepEquals(this.sourceBlobDigest, other.sourceBlobDigest) &&
            java.util.Objects.deepEquals(this.sourceNamespaceName, other.sourceNamespaceName) &&
            java.util.Objects.deepEquals(this.sourceRevisionDigest, other.sourceRevisionDigest) &&
            java.util.Objects.deepEquals(this.success, other.success) &&
            java.util.Objects.deepEquals(this.workflowPostRaw, other.workflowPostRaw) &&
            java.util.Objects.deepEquals(this.workflowPreRaw, other.workflowPreRaw);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            commitHead,
            continuousIntegrationEnvironment,
            error,
            generateConfigPostVersion,
            generateEligibleFeatures,
            generateGenLockId,
            generateGenLockPreFeatures,
            generateGenLockPreVersion,
            generateNumberOfOperationsIgnored,
            generateNumberOfOperationsUsed,
            generatePublished,
            generateTarget,
            generateTargetName,
            generateTargetVersion,
            ghActionOrganization,
            ghActionRef,
            ghActionRepository,
            ghActionRunLink,
            ghActionVersion,
            gitRelativeCwd,
            gitRemoteDefaultOwner,
            gitRemoteDefaultRepo,
            gitUserEmail,
            gitUserName,
            hostname,
            id,
            lastEventCreatedAt,
            lastEventId,
            lastEventInteractionType,
            repoLabel,
            sourceBlobDigest,
            sourceNamespaceName,
            sourceRevisionDigest,
            success,
            workflowPostRaw,
            workflowPreRaw);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TargetSDK.class,
                "commitHead", commitHead,
                "continuousIntegrationEnvironment", continuousIntegrationEnvironment,
                "error", error,
                "generateConfigPostVersion", generateConfigPostVersion,
                "generateEligibleFeatures", generateEligibleFeatures,
                "generateGenLockId", generateGenLockId,
                "generateGenLockPreFeatures", generateGenLockPreFeatures,
                "generateGenLockPreVersion", generateGenLockPreVersion,
                "generateNumberOfOperationsIgnored", generateNumberOfOperationsIgnored,
                "generateNumberOfOperationsUsed", generateNumberOfOperationsUsed,
                "generatePublished", generatePublished,
                "generateTarget", generateTarget,
                "generateTargetName", generateTargetName,
                "generateTargetVersion", generateTargetVersion,
                "ghActionOrganization", ghActionOrganization,
                "ghActionRef", ghActionRef,
                "ghActionRepository", ghActionRepository,
                "ghActionRunLink", ghActionRunLink,
                "ghActionVersion", ghActionVersion,
                "gitRelativeCwd", gitRelativeCwd,
                "gitRemoteDefaultOwner", gitRemoteDefaultOwner,
                "gitRemoteDefaultRepo", gitRemoteDefaultRepo,
                "gitUserEmail", gitUserEmail,
                "gitUserName", gitUserName,
                "hostname", hostname,
                "id", id,
                "lastEventCreatedAt", lastEventCreatedAt,
                "lastEventId", lastEventId,
                "lastEventInteractionType", lastEventInteractionType,
                "repoLabel", repoLabel,
                "sourceBlobDigest", sourceBlobDigest,
                "sourceNamespaceName", sourceNamespaceName,
                "sourceRevisionDigest", sourceRevisionDigest,
                "success", success,
                "workflowPostRaw", workflowPostRaw,
                "workflowPreRaw", workflowPreRaw);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> commitHead = Optional.empty();
 
        private Optional<? extends String> continuousIntegrationEnvironment = Optional.empty();
 
        private Optional<? extends String> error = Optional.empty();
 
        private Optional<? extends String> generateConfigPostVersion = Optional.empty();
 
        private Optional<? extends String> generateEligibleFeatures = Optional.empty();
 
        private String generateGenLockId;
 
        private Optional<? extends String> generateGenLockPreFeatures = Optional.empty();
 
        private Optional<? extends String> generateGenLockPreVersion = Optional.empty();
 
        private Optional<? extends Long> generateNumberOfOperationsIgnored = Optional.empty();
 
        private Optional<? extends Long> generateNumberOfOperationsUsed = Optional.empty();
 
        private Optional<? extends Boolean> generatePublished = Optional.empty();
 
        private String generateTarget;
 
        private Optional<? extends String> generateTargetName = Optional.empty();
 
        private Optional<? extends String> generateTargetVersion = Optional.empty();
 
        private Optional<? extends String> ghActionOrganization = Optional.empty();
 
        private Optional<? extends String> ghActionRef = Optional.empty();
 
        private Optional<? extends String> ghActionRepository = Optional.empty();
 
        private Optional<? extends String> ghActionRunLink = Optional.empty();
 
        private Optional<? extends String> ghActionVersion = Optional.empty();
 
        private Optional<? extends String> gitRelativeCwd = Optional.empty();
 
        private Optional<? extends String> gitRemoteDefaultOwner = Optional.empty();
 
        private Optional<? extends String> gitRemoteDefaultRepo = Optional.empty();
 
        private Optional<? extends String> gitUserEmail = Optional.empty();
 
        private Optional<? extends String> gitUserName = Optional.empty();
 
        private Optional<? extends String> hostname = Optional.empty();
 
        private String id;
 
        private OffsetDateTime lastEventCreatedAt;
 
        private String lastEventId;
 
        private InteractionType lastEventInteractionType;
 
        private Optional<? extends String> repoLabel = Optional.empty();
 
        private Optional<? extends String> sourceBlobDigest = Optional.empty();
 
        private Optional<? extends String> sourceNamespaceName = Optional.empty();
 
        private Optional<? extends String> sourceRevisionDigest = Optional.empty();
 
        private Optional<? extends Boolean> success = Optional.empty();
 
        private Optional<? extends String> workflowPostRaw = Optional.empty();
 
        private Optional<? extends String> workflowPreRaw = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Remote commit ID.
         */
        public Builder commitHead(String commitHead) {
            Utils.checkNotNull(commitHead, "commitHead");
            this.commitHead = Optional.ofNullable(commitHead);
            return this;
        }

        /**
         * Remote commit ID.
         */
        public Builder commitHead(Optional<? extends String> commitHead) {
            Utils.checkNotNull(commitHead, "commitHead");
            this.commitHead = commitHead;
            return this;
        }

        /**
         * Name of the CI environment.
         */
        public Builder continuousIntegrationEnvironment(String continuousIntegrationEnvironment) {
            Utils.checkNotNull(continuousIntegrationEnvironment, "continuousIntegrationEnvironment");
            this.continuousIntegrationEnvironment = Optional.ofNullable(continuousIntegrationEnvironment);
            return this;
        }

        /**
         * Name of the CI environment.
         */
        public Builder continuousIntegrationEnvironment(Optional<? extends String> continuousIntegrationEnvironment) {
            Utils.checkNotNull(continuousIntegrationEnvironment, "continuousIntegrationEnvironment");
            this.continuousIntegrationEnvironment = continuousIntegrationEnvironment;
            return this;
        }

        /**
         * Error message if the last event was not successful.
         */
        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        /**
         * Error message if the last event was not successful.
         */
        public Builder error(Optional<? extends String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        /**
         * Version of the generated target (post generation)
         */
        public Builder generateConfigPostVersion(String generateConfigPostVersion) {
            Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
            this.generateConfigPostVersion = Optional.ofNullable(generateConfigPostVersion);
            return this;
        }

        /**
         * Version of the generated target (post generation)
         */
        public Builder generateConfigPostVersion(Optional<? extends String> generateConfigPostVersion) {
            Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
            this.generateConfigPostVersion = generateConfigPostVersion;
            return this;
        }

        /**
         * Eligible feature set during generation
         */
        public Builder generateEligibleFeatures(String generateEligibleFeatures) {
            Utils.checkNotNull(generateEligibleFeatures, "generateEligibleFeatures");
            this.generateEligibleFeatures = Optional.ofNullable(generateEligibleFeatures);
            return this;
        }

        /**
         * Eligible feature set during generation
         */
        public Builder generateEligibleFeatures(Optional<? extends String> generateEligibleFeatures) {
            Utils.checkNotNull(generateEligibleFeatures, "generateEligibleFeatures");
            this.generateEligibleFeatures = generateEligibleFeatures;
            return this;
        }

        /**
         * gen.lock ID (expected to be a uuid). The same as `id`. A unique identifier for the target.
         */
        public Builder generateGenLockId(String generateGenLockId) {
            Utils.checkNotNull(generateGenLockId, "generateGenLockId");
            this.generateGenLockId = generateGenLockId;
            return this;
        }

        /**
         * Features prior to generation
         */
        public Builder generateGenLockPreFeatures(String generateGenLockPreFeatures) {
            Utils.checkNotNull(generateGenLockPreFeatures, "generateGenLockPreFeatures");
            this.generateGenLockPreFeatures = Optional.ofNullable(generateGenLockPreFeatures);
            return this;
        }

        /**
         * Features prior to generation
         */
        public Builder generateGenLockPreFeatures(Optional<? extends String> generateGenLockPreFeatures) {
            Utils.checkNotNull(generateGenLockPreFeatures, "generateGenLockPreFeatures");
            this.generateGenLockPreFeatures = generateGenLockPreFeatures;
            return this;
        }

        /**
         * Artifact version for the Previous Generation
         */
        public Builder generateGenLockPreVersion(String generateGenLockPreVersion) {
            Utils.checkNotNull(generateGenLockPreVersion, "generateGenLockPreVersion");
            this.generateGenLockPreVersion = Optional.ofNullable(generateGenLockPreVersion);
            return this;
        }

        /**
         * Artifact version for the Previous Generation
         */
        public Builder generateGenLockPreVersion(Optional<? extends String> generateGenLockPreVersion) {
            Utils.checkNotNull(generateGenLockPreVersion, "generateGenLockPreVersion");
            this.generateGenLockPreVersion = generateGenLockPreVersion;
            return this;
        }

        /**
         * The number of operations ignored in generation.
         */
        public Builder generateNumberOfOperationsIgnored(long generateNumberOfOperationsIgnored) {
            Utils.checkNotNull(generateNumberOfOperationsIgnored, "generateNumberOfOperationsIgnored");
            this.generateNumberOfOperationsIgnored = Optional.ofNullable(generateNumberOfOperationsIgnored);
            return this;
        }

        /**
         * The number of operations ignored in generation.
         */
        public Builder generateNumberOfOperationsIgnored(Optional<? extends Long> generateNumberOfOperationsIgnored) {
            Utils.checkNotNull(generateNumberOfOperationsIgnored, "generateNumberOfOperationsIgnored");
            this.generateNumberOfOperationsIgnored = generateNumberOfOperationsIgnored;
            return this;
        }

        /**
         * The number of operations used in generation.
         */
        public Builder generateNumberOfOperationsUsed(long generateNumberOfOperationsUsed) {
            Utils.checkNotNull(generateNumberOfOperationsUsed, "generateNumberOfOperationsUsed");
            this.generateNumberOfOperationsUsed = Optional.ofNullable(generateNumberOfOperationsUsed);
            return this;
        }

        /**
         * The number of operations used in generation.
         */
        public Builder generateNumberOfOperationsUsed(Optional<? extends Long> generateNumberOfOperationsUsed) {
            Utils.checkNotNull(generateNumberOfOperationsUsed, "generateNumberOfOperationsUsed");
            this.generateNumberOfOperationsUsed = generateNumberOfOperationsUsed;
            return this;
        }

        /**
         * Indicates whether the target was considered published.
         */
        public Builder generatePublished(boolean generatePublished) {
            Utils.checkNotNull(generatePublished, "generatePublished");
            this.generatePublished = Optional.ofNullable(generatePublished);
            return this;
        }

        /**
         * Indicates whether the target was considered published.
         */
        public Builder generatePublished(Optional<? extends Boolean> generatePublished) {
            Utils.checkNotNull(generatePublished, "generatePublished");
            this.generatePublished = generatePublished;
            return this;
        }

        /**
         * eg `typescript`, `terraform`, `python`
         */
        public Builder generateTarget(String generateTarget) {
            Utils.checkNotNull(generateTarget, "generateTarget");
            this.generateTarget = generateTarget;
            return this;
        }

        /**
         * The workflow name of the target.
         */
        public Builder generateTargetName(String generateTargetName) {
            Utils.checkNotNull(generateTargetName, "generateTargetName");
            this.generateTargetName = Optional.ofNullable(generateTargetName);
            return this;
        }

        /**
         * The workflow name of the target.
         */
        public Builder generateTargetName(Optional<? extends String> generateTargetName) {
            Utils.checkNotNull(generateTargetName, "generateTargetName");
            this.generateTargetName = generateTargetName;
            return this;
        }

        /**
         * The version of the Speakeasy generator for this target eg v2 of the typescript generator.
         */
        public Builder generateTargetVersion(String generateTargetVersion) {
            Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
            this.generateTargetVersion = Optional.ofNullable(generateTargetVersion);
            return this;
        }

        /**
         * The version of the Speakeasy generator for this target eg v2 of the typescript generator.
         */
        public Builder generateTargetVersion(Optional<? extends String> generateTargetVersion) {
            Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
            this.generateTargetVersion = generateTargetVersion;
            return this;
        }

        /**
         * GitHub organization of the action.
         */
        public Builder ghActionOrganization(String ghActionOrganization) {
            Utils.checkNotNull(ghActionOrganization, "ghActionOrganization");
            this.ghActionOrganization = Optional.ofNullable(ghActionOrganization);
            return this;
        }

        /**
         * GitHub organization of the action.
         */
        public Builder ghActionOrganization(Optional<? extends String> ghActionOrganization) {
            Utils.checkNotNull(ghActionOrganization, "ghActionOrganization");
            this.ghActionOrganization = ghActionOrganization;
            return this;
        }

        /**
         * GitHub Action ref value.
         */
        public Builder ghActionRef(String ghActionRef) {
            Utils.checkNotNull(ghActionRef, "ghActionRef");
            this.ghActionRef = Optional.ofNullable(ghActionRef);
            return this;
        }

        /**
         * GitHub Action ref value.
         */
        public Builder ghActionRef(Optional<? extends String> ghActionRef) {
            Utils.checkNotNull(ghActionRef, "ghActionRef");
            this.ghActionRef = ghActionRef;
            return this;
        }

        /**
         * GitHub repository of the action.
         */
        public Builder ghActionRepository(String ghActionRepository) {
            Utils.checkNotNull(ghActionRepository, "ghActionRepository");
            this.ghActionRepository = Optional.ofNullable(ghActionRepository);
            return this;
        }

        /**
         * GitHub repository of the action.
         */
        public Builder ghActionRepository(Optional<? extends String> ghActionRepository) {
            Utils.checkNotNull(ghActionRepository, "ghActionRepository");
            this.ghActionRepository = ghActionRepository;
            return this;
        }

        /**
         * Link to the GitHub action run.
         */
        public Builder ghActionRunLink(String ghActionRunLink) {
            Utils.checkNotNull(ghActionRunLink, "ghActionRunLink");
            this.ghActionRunLink = Optional.ofNullable(ghActionRunLink);
            return this;
        }

        /**
         * Link to the GitHub action run.
         */
        public Builder ghActionRunLink(Optional<? extends String> ghActionRunLink) {
            Utils.checkNotNull(ghActionRunLink, "ghActionRunLink");
            this.ghActionRunLink = ghActionRunLink;
            return this;
        }

        /**
         * Version of the GitHub action.
         */
        public Builder ghActionVersion(String ghActionVersion) {
            Utils.checkNotNull(ghActionVersion, "ghActionVersion");
            this.ghActionVersion = Optional.ofNullable(ghActionVersion);
            return this;
        }

        /**
         * Version of the GitHub action.
         */
        public Builder ghActionVersion(Optional<? extends String> ghActionVersion) {
            Utils.checkNotNull(ghActionVersion, "ghActionVersion");
            this.ghActionVersion = ghActionVersion;
            return this;
        }

        /**
         * Current working directory relative to the git root.
         */
        public Builder gitRelativeCwd(String gitRelativeCwd) {
            Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
            this.gitRelativeCwd = Optional.ofNullable(gitRelativeCwd);
            return this;
        }

        /**
         * Current working directory relative to the git root.
         */
        public Builder gitRelativeCwd(Optional<? extends String> gitRelativeCwd) {
            Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
            this.gitRelativeCwd = gitRelativeCwd;
            return this;
        }

        /**
         * Default owner for git remote.
         */
        public Builder gitRemoteDefaultOwner(String gitRemoteDefaultOwner) {
            Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
            this.gitRemoteDefaultOwner = Optional.ofNullable(gitRemoteDefaultOwner);
            return this;
        }

        /**
         * Default owner for git remote.
         */
        public Builder gitRemoteDefaultOwner(Optional<? extends String> gitRemoteDefaultOwner) {
            Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
            this.gitRemoteDefaultOwner = gitRemoteDefaultOwner;
            return this;
        }

        /**
         * Default repository name for git remote.
         */
        public Builder gitRemoteDefaultRepo(String gitRemoteDefaultRepo) {
            Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
            this.gitRemoteDefaultRepo = Optional.ofNullable(gitRemoteDefaultRepo);
            return this;
        }

        /**
         * Default repository name for git remote.
         */
        public Builder gitRemoteDefaultRepo(Optional<? extends String> gitRemoteDefaultRepo) {
            Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
            this.gitRemoteDefaultRepo = gitRemoteDefaultRepo;
            return this;
        }

        /**
         * User email from git configuration.
         */
        public Builder gitUserEmail(String gitUserEmail) {
            Utils.checkNotNull(gitUserEmail, "gitUserEmail");
            this.gitUserEmail = Optional.ofNullable(gitUserEmail);
            return this;
        }

        /**
         * User email from git configuration.
         */
        public Builder gitUserEmail(Optional<? extends String> gitUserEmail) {
            Utils.checkNotNull(gitUserEmail, "gitUserEmail");
            this.gitUserEmail = gitUserEmail;
            return this;
        }

        /**
         * User's name from git configuration. (not GitHub username)
         */
        public Builder gitUserName(String gitUserName) {
            Utils.checkNotNull(gitUserName, "gitUserName");
            this.gitUserName = Optional.ofNullable(gitUserName);
            return this;
        }

        /**
         * User's name from git configuration. (not GitHub username)
         */
        public Builder gitUserName(Optional<? extends String> gitUserName) {
            Utils.checkNotNull(gitUserName, "gitUserName");
            this.gitUserName = gitUserName;
            return this;
        }

        /**
         * Remote hostname.
         */
        public Builder hostname(String hostname) {
            Utils.checkNotNull(hostname, "hostname");
            this.hostname = Optional.ofNullable(hostname);
            return this;
        }

        /**
         * Remote hostname.
         */
        public Builder hostname(Optional<? extends String> hostname) {
            Utils.checkNotNull(hostname, "hostname");
            this.hostname = hostname;
            return this;
        }

        /**
         * Unique identifier of the target the same as `generate_gen_lock_id`
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Timestamp when the event was created in the database.
         */
        public Builder lastEventCreatedAt(OffsetDateTime lastEventCreatedAt) {
            Utils.checkNotNull(lastEventCreatedAt, "lastEventCreatedAt");
            this.lastEventCreatedAt = lastEventCreatedAt;
            return this;
        }

        /**
         * Unique identifier of the last event for the target
         */
        public Builder lastEventId(String lastEventId) {
            Utils.checkNotNull(lastEventId, "lastEventId");
            this.lastEventId = lastEventId;
            return this;
        }

        /**
         * Type of interaction.
         */
        public Builder lastEventInteractionType(InteractionType lastEventInteractionType) {
            Utils.checkNotNull(lastEventInteractionType, "lastEventInteractionType");
            this.lastEventInteractionType = lastEventInteractionType;
            return this;
        }

        /**
         * Label of the git repository.
         */
        public Builder repoLabel(String repoLabel) {
            Utils.checkNotNull(repoLabel, "repoLabel");
            this.repoLabel = Optional.ofNullable(repoLabel);
            return this;
        }

        /**
         * Label of the git repository.
         */
        public Builder repoLabel(Optional<? extends String> repoLabel) {
            Utils.checkNotNull(repoLabel, "repoLabel");
            this.repoLabel = repoLabel;
            return this;
        }

        /**
         * The blob digest of the source.
         */
        public Builder sourceBlobDigest(String sourceBlobDigest) {
            Utils.checkNotNull(sourceBlobDigest, "sourceBlobDigest");
            this.sourceBlobDigest = Optional.ofNullable(sourceBlobDigest);
            return this;
        }

        /**
         * The blob digest of the source.
         */
        public Builder sourceBlobDigest(Optional<? extends String> sourceBlobDigest) {
            Utils.checkNotNull(sourceBlobDigest, "sourceBlobDigest");
            this.sourceBlobDigest = sourceBlobDigest;
            return this;
        }

        /**
         * The namespace name of the source.
         */
        public Builder sourceNamespaceName(String sourceNamespaceName) {
            Utils.checkNotNull(sourceNamespaceName, "sourceNamespaceName");
            this.sourceNamespaceName = Optional.ofNullable(sourceNamespaceName);
            return this;
        }

        /**
         * The namespace name of the source.
         */
        public Builder sourceNamespaceName(Optional<? extends String> sourceNamespaceName) {
            Utils.checkNotNull(sourceNamespaceName, "sourceNamespaceName");
            this.sourceNamespaceName = sourceNamespaceName;
            return this;
        }

        /**
         * The revision digest of the source.
         */
        public Builder sourceRevisionDigest(String sourceRevisionDigest) {
            Utils.checkNotNull(sourceRevisionDigest, "sourceRevisionDigest");
            this.sourceRevisionDigest = Optional.ofNullable(sourceRevisionDigest);
            return this;
        }

        /**
         * The revision digest of the source.
         */
        public Builder sourceRevisionDigest(Optional<? extends String> sourceRevisionDigest) {
            Utils.checkNotNull(sourceRevisionDigest, "sourceRevisionDigest");
            this.sourceRevisionDigest = sourceRevisionDigest;
            return this;
        }

        /**
         * Indicates whether the event was successful.
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = Optional.ofNullable(success);
            return this;
        }

        /**
         * Indicates whether the event was successful.
         */
        public Builder success(Optional<? extends Boolean> success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }

        /**
         * Workflow file (post execution)
         */
        public Builder workflowPostRaw(String workflowPostRaw) {
            Utils.checkNotNull(workflowPostRaw, "workflowPostRaw");
            this.workflowPostRaw = Optional.ofNullable(workflowPostRaw);
            return this;
        }

        /**
         * Workflow file (post execution)
         */
        public Builder workflowPostRaw(Optional<? extends String> workflowPostRaw) {
            Utils.checkNotNull(workflowPostRaw, "workflowPostRaw");
            this.workflowPostRaw = workflowPostRaw;
            return this;
        }

        /**
         * Workflow file (prior to execution)
         */
        public Builder workflowPreRaw(String workflowPreRaw) {
            Utils.checkNotNull(workflowPreRaw, "workflowPreRaw");
            this.workflowPreRaw = Optional.ofNullable(workflowPreRaw);
            return this;
        }

        /**
         * Workflow file (prior to execution)
         */
        public Builder workflowPreRaw(Optional<? extends String> workflowPreRaw) {
            Utils.checkNotNull(workflowPreRaw, "workflowPreRaw");
            this.workflowPreRaw = workflowPreRaw;
            return this;
        }
        
        public TargetSDK build() {
            return new TargetSDK(
                commitHead,
                continuousIntegrationEnvironment,
                error,
                generateConfigPostVersion,
                generateEligibleFeatures,
                generateGenLockId,
                generateGenLockPreFeatures,
                generateGenLockPreVersion,
                generateNumberOfOperationsIgnored,
                generateNumberOfOperationsUsed,
                generatePublished,
                generateTarget,
                generateTargetName,
                generateTargetVersion,
                ghActionOrganization,
                ghActionRef,
                ghActionRepository,
                ghActionRunLink,
                ghActionVersion,
                gitRelativeCwd,
                gitRemoteDefaultOwner,
                gitRemoteDefaultRepo,
                gitUserEmail,
                gitUserName,
                hostname,
                id,
                lastEventCreatedAt,
                lastEventId,
                lastEventInteractionType,
                repoLabel,
                sourceBlobDigest,
                sourceNamespaceName,
                sourceRevisionDigest,
                success,
                workflowPostRaw,
                workflowPreRaw);
        }
    }
}

