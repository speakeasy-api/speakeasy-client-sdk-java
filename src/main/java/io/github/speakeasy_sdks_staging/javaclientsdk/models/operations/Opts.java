/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class Opts {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("depth_style")
    private Optional<? extends DepthStyle> depthStyle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("style")
    private Optional<? extends Style> style;

    @JsonCreator
    public Opts(
            @JsonProperty("depth_style") Optional<? extends DepthStyle> depthStyle,
            @JsonProperty("style") Optional<? extends Style> style) {
        Utils.checkNotNull(depthStyle, "depthStyle");
        Utils.checkNotNull(style, "style");
        this.depthStyle = depthStyle;
        this.style = style;
    }
    
    public Opts() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DepthStyle> depthStyle() {
        return (Optional<DepthStyle>) depthStyle;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Style> style() {
        return (Optional<Style>) style;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Opts withDepthStyle(DepthStyle depthStyle) {
        Utils.checkNotNull(depthStyle, "depthStyle");
        this.depthStyle = Optional.ofNullable(depthStyle);
        return this;
    }

    public Opts withDepthStyle(Optional<? extends DepthStyle> depthStyle) {
        Utils.checkNotNull(depthStyle, "depthStyle");
        this.depthStyle = depthStyle;
        return this;
    }

    public Opts withStyle(Style style) {
        Utils.checkNotNull(style, "style");
        this.style = Optional.ofNullable(style);
        return this;
    }

    public Opts withStyle(Optional<? extends Style> style) {
        Utils.checkNotNull(style, "style");
        this.style = style;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Opts other = (Opts) o;
        return 
            java.util.Objects.deepEquals(this.depthStyle, other.depthStyle) &&
            java.util.Objects.deepEquals(this.style, other.style);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            depthStyle,
            style);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Opts.class,
                "depthStyle", depthStyle,
                "style", style);
    }
    
    public final static class Builder {
 
        private Optional<? extends DepthStyle> depthStyle = Optional.empty();
 
        private Optional<? extends Style> style = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder depthStyle(DepthStyle depthStyle) {
            Utils.checkNotNull(depthStyle, "depthStyle");
            this.depthStyle = Optional.ofNullable(depthStyle);
            return this;
        }

        public Builder depthStyle(Optional<? extends DepthStyle> depthStyle) {
            Utils.checkNotNull(depthStyle, "depthStyle");
            this.depthStyle = depthStyle;
            return this;
        }

        public Builder style(Style style) {
            Utils.checkNotNull(style, "style");
            this.style = Optional.ofNullable(style);
            return this;
        }

        public Builder style(Optional<? extends Style> style) {
            Utils.checkNotNull(style, "style");
            this.style = style;
            return this;
        }
        
        public Opts build() {
            return new Opts(
                depthStyle,
                style);
        }
    }
}

