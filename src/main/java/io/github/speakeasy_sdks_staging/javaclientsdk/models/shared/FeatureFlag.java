/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
/**
 * FeatureFlag - A feature flag is a key-value pair that can be used to enable or disable features.
 */

public class FeatureFlag {

    @JsonProperty("feature_flag")
    private String featureFlag;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trial_ends_at")
    private JsonNullable<? extends OffsetDateTime> trialEndsAt;

    @JsonCreator
    public FeatureFlag(
            @JsonProperty("feature_flag") String featureFlag,
            @JsonProperty("trial_ends_at") JsonNullable<? extends OffsetDateTime> trialEndsAt) {
        Utils.checkNotNull(featureFlag, "featureFlag");
        Utils.checkNotNull(trialEndsAt, "trialEndsAt");
        this.featureFlag = featureFlag;
        this.trialEndsAt = trialEndsAt;
    }
    
    public FeatureFlag(
            String featureFlag) {
        this(featureFlag, JsonNullable.undefined());
    }

    @JsonIgnore
    public String featureFlag() {
        return featureFlag;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<OffsetDateTime> trialEndsAt() {
        return (JsonNullable<OffsetDateTime>) trialEndsAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FeatureFlag withFeatureFlag(String featureFlag) {
        Utils.checkNotNull(featureFlag, "featureFlag");
        this.featureFlag = featureFlag;
        return this;
    }

    public FeatureFlag withTrialEndsAt(OffsetDateTime trialEndsAt) {
        Utils.checkNotNull(trialEndsAt, "trialEndsAt");
        this.trialEndsAt = JsonNullable.of(trialEndsAt);
        return this;
    }

    public FeatureFlag withTrialEndsAt(JsonNullable<? extends OffsetDateTime> trialEndsAt) {
        Utils.checkNotNull(trialEndsAt, "trialEndsAt");
        this.trialEndsAt = trialEndsAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeatureFlag other = (FeatureFlag) o;
        return 
            java.util.Objects.deepEquals(this.featureFlag, other.featureFlag) &&
            java.util.Objects.deepEquals(this.trialEndsAt, other.trialEndsAt);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            featureFlag,
            trialEndsAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FeatureFlag.class,
                "featureFlag", featureFlag,
                "trialEndsAt", trialEndsAt);
    }
    
    public final static class Builder {
 
        private String featureFlag;
 
        private JsonNullable<? extends OffsetDateTime> trialEndsAt = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder featureFlag(String featureFlag) {
            Utils.checkNotNull(featureFlag, "featureFlag");
            this.featureFlag = featureFlag;
            return this;
        }

        public Builder trialEndsAt(OffsetDateTime trialEndsAt) {
            Utils.checkNotNull(trialEndsAt, "trialEndsAt");
            this.trialEndsAt = JsonNullable.of(trialEndsAt);
            return this;
        }

        public Builder trialEndsAt(JsonNullable<? extends OffsetDateTime> trialEndsAt) {
            Utils.checkNotNull(trialEndsAt, "trialEndsAt");
            this.trialEndsAt = trialEndsAt;
            return this;
        }
        
        public FeatureFlag build() {
            return new FeatureFlag(
                featureFlag,
                trialEndsAt);
        }
    }
}

