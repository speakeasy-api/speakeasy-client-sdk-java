/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.time.OffsetDateTime;
import java.util.Optional;


public class CliEvent {

    /**
     * Remote commit ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commit_head")
    private Optional<? extends String> commitHead;

    /**
     * Timestamp when the event was created in the database.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * Duration of the event in milliseconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration_ms")
    private Optional<? extends Long> durationMs;

    /**
     * Unique identifier for each execution of the CLI.
     */
    @JsonProperty("execution_id")
    private String executionId;

    /**
     * Bump type of the lock file (calculated semver delta, or a custom change (manual release))
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_bump_type")
    private Optional<? extends GenerateBumpType> generateBumpType;

    /**
     * Checksum of the configuration file (post generation)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_config_post_checksum")
    private Optional<? extends String> generateConfigPostChecksum;

    /**
     * Rendered configuration file (post generation)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_config_post_raw")
    private Optional<? extends String> generateConfigPostRaw;

    /**
     * Version of the generated target (post generation)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_config_post_version")
    private Optional<? extends String> generateConfigPostVersion;

    /**
     * Checksum of the configuration file (prior to generation)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_config_pre_checksum")
    private Optional<? extends String> generateConfigPreChecksum;

    /**
     * Rendered configuration file (prior to generation)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_config_pre_raw")
    private Optional<? extends String> generateConfigPreRaw;

    /**
     * Version of the generated target (prior to generation)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_config_pre_version")
    private Optional<? extends String> generateConfigPreVersion;

    /**
     * gen.lock ID (expected to be a uuid).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_id")
    private Optional<? extends String> generateGenLockId;

    /**
     * Features post generation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_post_features")
    private Optional<? extends String> generateGenLockPostFeatures;

    /**
     * Checksum of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_pre_doc_checksum")
    private Optional<? extends String> generateGenLockPreDocChecksum;

    /**
     * info.Version of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_pre_doc_version")
    private Optional<? extends String> generateGenLockPreDocVersion;

    /**
     * Features prior to generation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_pre_features")
    private Optional<? extends String> generateGenLockPreFeatures;

    /**
     * Artifact version for the Previous Generation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_pre_version")
    private Optional<? extends String> generateGenLockPreVersion;

    /**
     * Indicates whether tests were output.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_output_tests")
    private Optional<? extends Boolean> generateOutputTests;

    /**
     * Indicates whether the target was considered published.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_published")
    private Optional<? extends Boolean> generatePublished;

    /**
     * Expected Repo URL, for use in documentation generation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_repo_url")
    private Optional<? extends String> generateRepoUrl;

    /**
     * The target of the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_target")
    private Optional<? extends String> generateTarget;

    /**
     * The version of the target.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_target_version")
    private Optional<? extends String> generateTargetVersion;

    /**
     * Version of the generation logic used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_version")
    private Optional<? extends String> generateVersion;

    /**
     * GitHub organization of the action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_organization")
    private Optional<? extends String> ghActionOrganization;

    /**
     * GitHub repository of the action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_repository")
    private Optional<? extends String> ghActionRepository;

    /**
     * Link to the GitHub action run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_run_link")
    private Optional<? extends String> ghActionRunLink;

    /**
     * Version of the GitHub action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_version")
    private Optional<? extends String> ghActionVersion;

    /**
     * Current working directory relative to the git root.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_relative_cwd")
    private Optional<? extends String> gitRelativeCwd;

    /**
     * Default owner for git remote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_remote_default_owner")
    private Optional<? extends String> gitRemoteDefaultOwner;

    /**
     * Default repository name for git remote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_remote_default_repo")
    private Optional<? extends String> gitRemoteDefaultRepo;

    /**
     * User email from git configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_user_email")
    private Optional<? extends String> gitUserEmail;

    /**
     * User name from git configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_user_name")
    private Optional<? extends String> gitUserName;

    /**
     * Remote hostname.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostname")
    private Optional<? extends String> hostname;

    /**
     * Unique identifier for each event.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Type of interaction.
     */
    @JsonProperty("interaction_type")
    private InteractionType interactionType;

    /**
     * Timestamp when the event completed, in local time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("local_completed_at")
    private Optional<? extends OffsetDateTime> localCompletedAt;

    /**
     * Timestamp when the event started, in local time.
     */
    @JsonProperty("local_started_at")
    private OffsetDateTime localStartedAt;

    /**
     * Checksum of the currently Rendered OpenAPI document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("management_doc_checksum")
    private Optional<? extends String> managementDocChecksum;

    /**
     * Version taken from info.version field of the Rendered OpenAPI document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("management_doc_version")
    private Optional<? extends String> managementDocVersion;

    /**
     * Full CLI command.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw_command")
    private Optional<? extends String> rawCommand;

    /**
     * Label of the git repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repo_label")
    private Optional<? extends String> repoLabel;

    /**
     * Identifier of the Speakeasy API key.
     */
    @JsonProperty("speakeasy_api_key_name")
    private String speakeasyApiKeyName;

    /**
     * Version of the Speakeasy CLI.
     */
    @JsonProperty("speakeasy_version")
    private String speakeasyVersion;

    /**
     * Indicates whether the event was successful.
     */
    @JsonProperty("success")
    private boolean success;

    /**
     * Identifier of the workspace.
     */
    @JsonProperty("workspace_id")
    private String workspaceId;

    public CliEvent(
            @JsonProperty("commit_head") Optional<? extends String> commitHead,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("duration_ms") Optional<? extends Long> durationMs,
            @JsonProperty("execution_id") String executionId,
            @JsonProperty("generate_bump_type") Optional<? extends GenerateBumpType> generateBumpType,
            @JsonProperty("generate_config_post_checksum") Optional<? extends String> generateConfigPostChecksum,
            @JsonProperty("generate_config_post_raw") Optional<? extends String> generateConfigPostRaw,
            @JsonProperty("generate_config_post_version") Optional<? extends String> generateConfigPostVersion,
            @JsonProperty("generate_config_pre_checksum") Optional<? extends String> generateConfigPreChecksum,
            @JsonProperty("generate_config_pre_raw") Optional<? extends String> generateConfigPreRaw,
            @JsonProperty("generate_config_pre_version") Optional<? extends String> generateConfigPreVersion,
            @JsonProperty("generate_gen_lock_id") Optional<? extends String> generateGenLockId,
            @JsonProperty("generate_gen_lock_post_features") Optional<? extends String> generateGenLockPostFeatures,
            @JsonProperty("generate_gen_lock_pre_doc_checksum") Optional<? extends String> generateGenLockPreDocChecksum,
            @JsonProperty("generate_gen_lock_pre_doc_version") Optional<? extends String> generateGenLockPreDocVersion,
            @JsonProperty("generate_gen_lock_pre_features") Optional<? extends String> generateGenLockPreFeatures,
            @JsonProperty("generate_gen_lock_pre_version") Optional<? extends String> generateGenLockPreVersion,
            @JsonProperty("generate_output_tests") Optional<? extends Boolean> generateOutputTests,
            @JsonProperty("generate_published") Optional<? extends Boolean> generatePublished,
            @JsonProperty("generate_repo_url") Optional<? extends String> generateRepoUrl,
            @JsonProperty("generate_target") Optional<? extends String> generateTarget,
            @JsonProperty("generate_target_version") Optional<? extends String> generateTargetVersion,
            @JsonProperty("generate_version") Optional<? extends String> generateVersion,
            @JsonProperty("gh_action_organization") Optional<? extends String> ghActionOrganization,
            @JsonProperty("gh_action_repository") Optional<? extends String> ghActionRepository,
            @JsonProperty("gh_action_run_link") Optional<? extends String> ghActionRunLink,
            @JsonProperty("gh_action_version") Optional<? extends String> ghActionVersion,
            @JsonProperty("git_relative_cwd") Optional<? extends String> gitRelativeCwd,
            @JsonProperty("git_remote_default_owner") Optional<? extends String> gitRemoteDefaultOwner,
            @JsonProperty("git_remote_default_repo") Optional<? extends String> gitRemoteDefaultRepo,
            @JsonProperty("git_user_email") Optional<? extends String> gitUserEmail,
            @JsonProperty("git_user_name") Optional<? extends String> gitUserName,
            @JsonProperty("hostname") Optional<? extends String> hostname,
            @JsonProperty("id") String id,
            @JsonProperty("interaction_type") InteractionType interactionType,
            @JsonProperty("local_completed_at") Optional<? extends OffsetDateTime> localCompletedAt,
            @JsonProperty("local_started_at") OffsetDateTime localStartedAt,
            @JsonProperty("management_doc_checksum") Optional<? extends String> managementDocChecksum,
            @JsonProperty("management_doc_version") Optional<? extends String> managementDocVersion,
            @JsonProperty("raw_command") Optional<? extends String> rawCommand,
            @JsonProperty("repo_label") Optional<? extends String> repoLabel,
            @JsonProperty("speakeasy_api_key_name") String speakeasyApiKeyName,
            @JsonProperty("speakeasy_version") String speakeasyVersion,
            @JsonProperty("success") boolean success,
            @JsonProperty("workspace_id") String workspaceId) {
        Utils.checkNotNull(commitHead, "commitHead");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(durationMs, "durationMs");
        Utils.checkNotNull(executionId, "executionId");
        Utils.checkNotNull(generateBumpType, "generateBumpType");
        Utils.checkNotNull(generateConfigPostChecksum, "generateConfigPostChecksum");
        Utils.checkNotNull(generateConfigPostRaw, "generateConfigPostRaw");
        Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
        Utils.checkNotNull(generateConfigPreChecksum, "generateConfigPreChecksum");
        Utils.checkNotNull(generateConfigPreRaw, "generateConfigPreRaw");
        Utils.checkNotNull(generateConfigPreVersion, "generateConfigPreVersion");
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        Utils.checkNotNull(generateGenLockPostFeatures, "generateGenLockPostFeatures");
        Utils.checkNotNull(generateGenLockPreDocChecksum, "generateGenLockPreDocChecksum");
        Utils.checkNotNull(generateGenLockPreDocVersion, "generateGenLockPreDocVersion");
        Utils.checkNotNull(generateGenLockPreFeatures, "generateGenLockPreFeatures");
        Utils.checkNotNull(generateGenLockPreVersion, "generateGenLockPreVersion");
        Utils.checkNotNull(generateOutputTests, "generateOutputTests");
        Utils.checkNotNull(generatePublished, "generatePublished");
        Utils.checkNotNull(generateRepoUrl, "generateRepoUrl");
        Utils.checkNotNull(generateTarget, "generateTarget");
        Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
        Utils.checkNotNull(generateVersion, "generateVersion");
        Utils.checkNotNull(ghActionOrganization, "ghActionOrganization");
        Utils.checkNotNull(ghActionRepository, "ghActionRepository");
        Utils.checkNotNull(ghActionRunLink, "ghActionRunLink");
        Utils.checkNotNull(ghActionVersion, "ghActionVersion");
        Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
        Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
        Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
        Utils.checkNotNull(gitUserEmail, "gitUserEmail");
        Utils.checkNotNull(gitUserName, "gitUserName");
        Utils.checkNotNull(hostname, "hostname");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(interactionType, "interactionType");
        Utils.checkNotNull(localCompletedAt, "localCompletedAt");
        Utils.checkNotNull(localStartedAt, "localStartedAt");
        Utils.checkNotNull(managementDocChecksum, "managementDocChecksum");
        Utils.checkNotNull(managementDocVersion, "managementDocVersion");
        Utils.checkNotNull(rawCommand, "rawCommand");
        Utils.checkNotNull(repoLabel, "repoLabel");
        Utils.checkNotNull(speakeasyApiKeyName, "speakeasyApiKeyName");
        Utils.checkNotNull(speakeasyVersion, "speakeasyVersion");
        Utils.checkNotNull(success, "success");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.commitHead = commitHead;
        this.createdAt = createdAt;
        this.durationMs = durationMs;
        this.executionId = executionId;
        this.generateBumpType = generateBumpType;
        this.generateConfigPostChecksum = generateConfigPostChecksum;
        this.generateConfigPostRaw = generateConfigPostRaw;
        this.generateConfigPostVersion = generateConfigPostVersion;
        this.generateConfigPreChecksum = generateConfigPreChecksum;
        this.generateConfigPreRaw = generateConfigPreRaw;
        this.generateConfigPreVersion = generateConfigPreVersion;
        this.generateGenLockId = generateGenLockId;
        this.generateGenLockPostFeatures = generateGenLockPostFeatures;
        this.generateGenLockPreDocChecksum = generateGenLockPreDocChecksum;
        this.generateGenLockPreDocVersion = generateGenLockPreDocVersion;
        this.generateGenLockPreFeatures = generateGenLockPreFeatures;
        this.generateGenLockPreVersion = generateGenLockPreVersion;
        this.generateOutputTests = generateOutputTests;
        this.generatePublished = generatePublished;
        this.generateRepoUrl = generateRepoUrl;
        this.generateTarget = generateTarget;
        this.generateTargetVersion = generateTargetVersion;
        this.generateVersion = generateVersion;
        this.ghActionOrganization = ghActionOrganization;
        this.ghActionRepository = ghActionRepository;
        this.ghActionRunLink = ghActionRunLink;
        this.ghActionVersion = ghActionVersion;
        this.gitRelativeCwd = gitRelativeCwd;
        this.gitRemoteDefaultOwner = gitRemoteDefaultOwner;
        this.gitRemoteDefaultRepo = gitRemoteDefaultRepo;
        this.gitUserEmail = gitUserEmail;
        this.gitUserName = gitUserName;
        this.hostname = hostname;
        this.id = id;
        this.interactionType = interactionType;
        this.localCompletedAt = localCompletedAt;
        this.localStartedAt = localStartedAt;
        this.managementDocChecksum = managementDocChecksum;
        this.managementDocVersion = managementDocVersion;
        this.rawCommand = rawCommand;
        this.repoLabel = repoLabel;
        this.speakeasyApiKeyName = speakeasyApiKeyName;
        this.speakeasyVersion = speakeasyVersion;
        this.success = success;
        this.workspaceId = workspaceId;
    }

    /**
     * Remote commit ID.
     */
    public Optional<? extends String> commitHead() {
        return commitHead;
    }

    /**
     * Timestamp when the event was created in the database.
     */
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * Duration of the event in milliseconds.
     */
    public Optional<? extends Long> durationMs() {
        return durationMs;
    }

    /**
     * Unique identifier for each execution of the CLI.
     */
    public String executionId() {
        return executionId;
    }

    /**
     * Bump type of the lock file (calculated semver delta, or a custom change (manual release))
     */
    public Optional<? extends GenerateBumpType> generateBumpType() {
        return generateBumpType;
    }

    /**
     * Checksum of the configuration file (post generation)
     */
    public Optional<? extends String> generateConfigPostChecksum() {
        return generateConfigPostChecksum;
    }

    /**
     * Rendered configuration file (post generation)
     */
    public Optional<? extends String> generateConfigPostRaw() {
        return generateConfigPostRaw;
    }

    /**
     * Version of the generated target (post generation)
     */
    public Optional<? extends String> generateConfigPostVersion() {
        return generateConfigPostVersion;
    }

    /**
     * Checksum of the configuration file (prior to generation)
     */
    public Optional<? extends String> generateConfigPreChecksum() {
        return generateConfigPreChecksum;
    }

    /**
     * Rendered configuration file (prior to generation)
     */
    public Optional<? extends String> generateConfigPreRaw() {
        return generateConfigPreRaw;
    }

    /**
     * Version of the generated target (prior to generation)
     */
    public Optional<? extends String> generateConfigPreVersion() {
        return generateConfigPreVersion;
    }

    /**
     * gen.lock ID (expected to be a uuid).
     */
    public Optional<? extends String> generateGenLockId() {
        return generateGenLockId;
    }

    /**
     * Features post generation
     */
    public Optional<? extends String> generateGenLockPostFeatures() {
        return generateGenLockPostFeatures;
    }

    /**
     * Checksum of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
     */
    public Optional<? extends String> generateGenLockPreDocChecksum() {
        return generateGenLockPreDocChecksum;
    }

    /**
     * info.Version of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
     */
    public Optional<? extends String> generateGenLockPreDocVersion() {
        return generateGenLockPreDocVersion;
    }

    /**
     * Features prior to generation
     */
    public Optional<? extends String> generateGenLockPreFeatures() {
        return generateGenLockPreFeatures;
    }

    /**
     * Artifact version for the Previous Generation
     */
    public Optional<? extends String> generateGenLockPreVersion() {
        return generateGenLockPreVersion;
    }

    /**
     * Indicates whether tests were output.
     */
    public Optional<? extends Boolean> generateOutputTests() {
        return generateOutputTests;
    }

    /**
     * Indicates whether the target was considered published.
     */
    public Optional<? extends Boolean> generatePublished() {
        return generatePublished;
    }

    /**
     * Expected Repo URL, for use in documentation generation.
     */
    public Optional<? extends String> generateRepoUrl() {
        return generateRepoUrl;
    }

    /**
     * The target of the event.
     */
    public Optional<? extends String> generateTarget() {
        return generateTarget;
    }

    /**
     * The version of the target.
     */
    public Optional<? extends String> generateTargetVersion() {
        return generateTargetVersion;
    }

    /**
     * Version of the generation logic used.
     */
    public Optional<? extends String> generateVersion() {
        return generateVersion;
    }

    /**
     * GitHub organization of the action.
     */
    public Optional<? extends String> ghActionOrganization() {
        return ghActionOrganization;
    }

    /**
     * GitHub repository of the action.
     */
    public Optional<? extends String> ghActionRepository() {
        return ghActionRepository;
    }

    /**
     * Link to the GitHub action run.
     */
    public Optional<? extends String> ghActionRunLink() {
        return ghActionRunLink;
    }

    /**
     * Version of the GitHub action.
     */
    public Optional<? extends String> ghActionVersion() {
        return ghActionVersion;
    }

    /**
     * Current working directory relative to the git root.
     */
    public Optional<? extends String> gitRelativeCwd() {
        return gitRelativeCwd;
    }

    /**
     * Default owner for git remote.
     */
    public Optional<? extends String> gitRemoteDefaultOwner() {
        return gitRemoteDefaultOwner;
    }

    /**
     * Default repository name for git remote.
     */
    public Optional<? extends String> gitRemoteDefaultRepo() {
        return gitRemoteDefaultRepo;
    }

    /**
     * User email from git configuration.
     */
    public Optional<? extends String> gitUserEmail() {
        return gitUserEmail;
    }

    /**
     * User name from git configuration.
     */
    public Optional<? extends String> gitUserName() {
        return gitUserName;
    }

    /**
     * Remote hostname.
     */
    public Optional<? extends String> hostname() {
        return hostname;
    }

    /**
     * Unique identifier for each event.
     */
    public String id() {
        return id;
    }

    /**
     * Type of interaction.
     */
    public InteractionType interactionType() {
        return interactionType;
    }

    /**
     * Timestamp when the event completed, in local time.
     */
    public Optional<? extends OffsetDateTime> localCompletedAt() {
        return localCompletedAt;
    }

    /**
     * Timestamp when the event started, in local time.
     */
    public OffsetDateTime localStartedAt() {
        return localStartedAt;
    }

    /**
     * Checksum of the currently Rendered OpenAPI document.
     */
    public Optional<? extends String> managementDocChecksum() {
        return managementDocChecksum;
    }

    /**
     * Version taken from info.version field of the Rendered OpenAPI document.
     */
    public Optional<? extends String> managementDocVersion() {
        return managementDocVersion;
    }

    /**
     * Full CLI command.
     */
    public Optional<? extends String> rawCommand() {
        return rawCommand;
    }

    /**
     * Label of the git repository.
     */
    public Optional<? extends String> repoLabel() {
        return repoLabel;
    }

    /**
     * Identifier of the Speakeasy API key.
     */
    public String speakeasyApiKeyName() {
        return speakeasyApiKeyName;
    }

    /**
     * Version of the Speakeasy CLI.
     */
    public String speakeasyVersion() {
        return speakeasyVersion;
    }

    /**
     * Indicates whether the event was successful.
     */
    public boolean success() {
        return success;
    }

    /**
     * Identifier of the workspace.
     */
    public String workspaceId() {
        return workspaceId;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Remote commit ID.
     */
    public CliEvent withCommitHead(String commitHead) {
        Utils.checkNotNull(commitHead, "commitHead");
        this.commitHead = Optional.ofNullable(commitHead);
        return this;
    }
    
    /**
     * Remote commit ID.
     */
    public CliEvent withCommitHead(Optional<? extends String> commitHead) {
        Utils.checkNotNull(commitHead, "commitHead");
        this.commitHead = commitHead;
        return this;
    }

    /**
     * Timestamp when the event was created in the database.
     */
    public CliEvent withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Duration of the event in milliseconds.
     */
    public CliEvent withDurationMs(long durationMs) {
        Utils.checkNotNull(durationMs, "durationMs");
        this.durationMs = Optional.ofNullable(durationMs);
        return this;
    }
    
    /**
     * Duration of the event in milliseconds.
     */
    public CliEvent withDurationMs(Optional<? extends Long> durationMs) {
        Utils.checkNotNull(durationMs, "durationMs");
        this.durationMs = durationMs;
        return this;
    }

    /**
     * Unique identifier for each execution of the CLI.
     */
    public CliEvent withExecutionId(String executionId) {
        Utils.checkNotNull(executionId, "executionId");
        this.executionId = executionId;
        return this;
    }

    /**
     * Bump type of the lock file (calculated semver delta, or a custom change (manual release))
     */
    public CliEvent withGenerateBumpType(GenerateBumpType generateBumpType) {
        Utils.checkNotNull(generateBumpType, "generateBumpType");
        this.generateBumpType = Optional.ofNullable(generateBumpType);
        return this;
    }
    
    /**
     * Bump type of the lock file (calculated semver delta, or a custom change (manual release))
     */
    public CliEvent withGenerateBumpType(Optional<? extends GenerateBumpType> generateBumpType) {
        Utils.checkNotNull(generateBumpType, "generateBumpType");
        this.generateBumpType = generateBumpType;
        return this;
    }

    /**
     * Checksum of the configuration file (post generation)
     */
    public CliEvent withGenerateConfigPostChecksum(String generateConfigPostChecksum) {
        Utils.checkNotNull(generateConfigPostChecksum, "generateConfigPostChecksum");
        this.generateConfigPostChecksum = Optional.ofNullable(generateConfigPostChecksum);
        return this;
    }
    
    /**
     * Checksum of the configuration file (post generation)
     */
    public CliEvent withGenerateConfigPostChecksum(Optional<? extends String> generateConfigPostChecksum) {
        Utils.checkNotNull(generateConfigPostChecksum, "generateConfigPostChecksum");
        this.generateConfigPostChecksum = generateConfigPostChecksum;
        return this;
    }

    /**
     * Rendered configuration file (post generation)
     */
    public CliEvent withGenerateConfigPostRaw(String generateConfigPostRaw) {
        Utils.checkNotNull(generateConfigPostRaw, "generateConfigPostRaw");
        this.generateConfigPostRaw = Optional.ofNullable(generateConfigPostRaw);
        return this;
    }
    
    /**
     * Rendered configuration file (post generation)
     */
    public CliEvent withGenerateConfigPostRaw(Optional<? extends String> generateConfigPostRaw) {
        Utils.checkNotNull(generateConfigPostRaw, "generateConfigPostRaw");
        this.generateConfigPostRaw = generateConfigPostRaw;
        return this;
    }

    /**
     * Version of the generated target (post generation)
     */
    public CliEvent withGenerateConfigPostVersion(String generateConfigPostVersion) {
        Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
        this.generateConfigPostVersion = Optional.ofNullable(generateConfigPostVersion);
        return this;
    }
    
    /**
     * Version of the generated target (post generation)
     */
    public CliEvent withGenerateConfigPostVersion(Optional<? extends String> generateConfigPostVersion) {
        Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
        this.generateConfigPostVersion = generateConfigPostVersion;
        return this;
    }

    /**
     * Checksum of the configuration file (prior to generation)
     */
    public CliEvent withGenerateConfigPreChecksum(String generateConfigPreChecksum) {
        Utils.checkNotNull(generateConfigPreChecksum, "generateConfigPreChecksum");
        this.generateConfigPreChecksum = Optional.ofNullable(generateConfigPreChecksum);
        return this;
    }
    
    /**
     * Checksum of the configuration file (prior to generation)
     */
    public CliEvent withGenerateConfigPreChecksum(Optional<? extends String> generateConfigPreChecksum) {
        Utils.checkNotNull(generateConfigPreChecksum, "generateConfigPreChecksum");
        this.generateConfigPreChecksum = generateConfigPreChecksum;
        return this;
    }

    /**
     * Rendered configuration file (prior to generation)
     */
    public CliEvent withGenerateConfigPreRaw(String generateConfigPreRaw) {
        Utils.checkNotNull(generateConfigPreRaw, "generateConfigPreRaw");
        this.generateConfigPreRaw = Optional.ofNullable(generateConfigPreRaw);
        return this;
    }
    
    /**
     * Rendered configuration file (prior to generation)
     */
    public CliEvent withGenerateConfigPreRaw(Optional<? extends String> generateConfigPreRaw) {
        Utils.checkNotNull(generateConfigPreRaw, "generateConfigPreRaw");
        this.generateConfigPreRaw = generateConfigPreRaw;
        return this;
    }

    /**
     * Version of the generated target (prior to generation)
     */
    public CliEvent withGenerateConfigPreVersion(String generateConfigPreVersion) {
        Utils.checkNotNull(generateConfigPreVersion, "generateConfigPreVersion");
        this.generateConfigPreVersion = Optional.ofNullable(generateConfigPreVersion);
        return this;
    }
    
    /**
     * Version of the generated target (prior to generation)
     */
    public CliEvent withGenerateConfigPreVersion(Optional<? extends String> generateConfigPreVersion) {
        Utils.checkNotNull(generateConfigPreVersion, "generateConfigPreVersion");
        this.generateConfigPreVersion = generateConfigPreVersion;
        return this;
    }

    /**
     * gen.lock ID (expected to be a uuid).
     */
    public CliEvent withGenerateGenLockId(String generateGenLockId) {
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        this.generateGenLockId = Optional.ofNullable(generateGenLockId);
        return this;
    }
    
    /**
     * gen.lock ID (expected to be a uuid).
     */
    public CliEvent withGenerateGenLockId(Optional<? extends String> generateGenLockId) {
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        this.generateGenLockId = generateGenLockId;
        return this;
    }

    /**
     * Features post generation
     */
    public CliEvent withGenerateGenLockPostFeatures(String generateGenLockPostFeatures) {
        Utils.checkNotNull(generateGenLockPostFeatures, "generateGenLockPostFeatures");
        this.generateGenLockPostFeatures = Optional.ofNullable(generateGenLockPostFeatures);
        return this;
    }
    
    /**
     * Features post generation
     */
    public CliEvent withGenerateGenLockPostFeatures(Optional<? extends String> generateGenLockPostFeatures) {
        Utils.checkNotNull(generateGenLockPostFeatures, "generateGenLockPostFeatures");
        this.generateGenLockPostFeatures = generateGenLockPostFeatures;
        return this;
    }

    /**
     * Checksum of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
     */
    public CliEvent withGenerateGenLockPreDocChecksum(String generateGenLockPreDocChecksum) {
        Utils.checkNotNull(generateGenLockPreDocChecksum, "generateGenLockPreDocChecksum");
        this.generateGenLockPreDocChecksum = Optional.ofNullable(generateGenLockPreDocChecksum);
        return this;
    }
    
    /**
     * Checksum of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
     */
    public CliEvent withGenerateGenLockPreDocChecksum(Optional<? extends String> generateGenLockPreDocChecksum) {
        Utils.checkNotNull(generateGenLockPreDocChecksum, "generateGenLockPreDocChecksum");
        this.generateGenLockPreDocChecksum = generateGenLockPreDocChecksum;
        return this;
    }

    /**
     * info.Version of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
     */
    public CliEvent withGenerateGenLockPreDocVersion(String generateGenLockPreDocVersion) {
        Utils.checkNotNull(generateGenLockPreDocVersion, "generateGenLockPreDocVersion");
        this.generateGenLockPreDocVersion = Optional.ofNullable(generateGenLockPreDocVersion);
        return this;
    }
    
    /**
     * info.Version of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
     */
    public CliEvent withGenerateGenLockPreDocVersion(Optional<? extends String> generateGenLockPreDocVersion) {
        Utils.checkNotNull(generateGenLockPreDocVersion, "generateGenLockPreDocVersion");
        this.generateGenLockPreDocVersion = generateGenLockPreDocVersion;
        return this;
    }

    /**
     * Features prior to generation
     */
    public CliEvent withGenerateGenLockPreFeatures(String generateGenLockPreFeatures) {
        Utils.checkNotNull(generateGenLockPreFeatures, "generateGenLockPreFeatures");
        this.generateGenLockPreFeatures = Optional.ofNullable(generateGenLockPreFeatures);
        return this;
    }
    
    /**
     * Features prior to generation
     */
    public CliEvent withGenerateGenLockPreFeatures(Optional<? extends String> generateGenLockPreFeatures) {
        Utils.checkNotNull(generateGenLockPreFeatures, "generateGenLockPreFeatures");
        this.generateGenLockPreFeatures = generateGenLockPreFeatures;
        return this;
    }

    /**
     * Artifact version for the Previous Generation
     */
    public CliEvent withGenerateGenLockPreVersion(String generateGenLockPreVersion) {
        Utils.checkNotNull(generateGenLockPreVersion, "generateGenLockPreVersion");
        this.generateGenLockPreVersion = Optional.ofNullable(generateGenLockPreVersion);
        return this;
    }
    
    /**
     * Artifact version for the Previous Generation
     */
    public CliEvent withGenerateGenLockPreVersion(Optional<? extends String> generateGenLockPreVersion) {
        Utils.checkNotNull(generateGenLockPreVersion, "generateGenLockPreVersion");
        this.generateGenLockPreVersion = generateGenLockPreVersion;
        return this;
    }

    /**
     * Indicates whether tests were output.
     */
    public CliEvent withGenerateOutputTests(boolean generateOutputTests) {
        Utils.checkNotNull(generateOutputTests, "generateOutputTests");
        this.generateOutputTests = Optional.ofNullable(generateOutputTests);
        return this;
    }
    
    /**
     * Indicates whether tests were output.
     */
    public CliEvent withGenerateOutputTests(Optional<? extends Boolean> generateOutputTests) {
        Utils.checkNotNull(generateOutputTests, "generateOutputTests");
        this.generateOutputTests = generateOutputTests;
        return this;
    }

    /**
     * Indicates whether the target was considered published.
     */
    public CliEvent withGeneratePublished(boolean generatePublished) {
        Utils.checkNotNull(generatePublished, "generatePublished");
        this.generatePublished = Optional.ofNullable(generatePublished);
        return this;
    }
    
    /**
     * Indicates whether the target was considered published.
     */
    public CliEvent withGeneratePublished(Optional<? extends Boolean> generatePublished) {
        Utils.checkNotNull(generatePublished, "generatePublished");
        this.generatePublished = generatePublished;
        return this;
    }

    /**
     * Expected Repo URL, for use in documentation generation.
     */
    public CliEvent withGenerateRepoUrl(String generateRepoUrl) {
        Utils.checkNotNull(generateRepoUrl, "generateRepoUrl");
        this.generateRepoUrl = Optional.ofNullable(generateRepoUrl);
        return this;
    }
    
    /**
     * Expected Repo URL, for use in documentation generation.
     */
    public CliEvent withGenerateRepoUrl(Optional<? extends String> generateRepoUrl) {
        Utils.checkNotNull(generateRepoUrl, "generateRepoUrl");
        this.generateRepoUrl = generateRepoUrl;
        return this;
    }

    /**
     * The target of the event.
     */
    public CliEvent withGenerateTarget(String generateTarget) {
        Utils.checkNotNull(generateTarget, "generateTarget");
        this.generateTarget = Optional.ofNullable(generateTarget);
        return this;
    }
    
    /**
     * The target of the event.
     */
    public CliEvent withGenerateTarget(Optional<? extends String> generateTarget) {
        Utils.checkNotNull(generateTarget, "generateTarget");
        this.generateTarget = generateTarget;
        return this;
    }

    /**
     * The version of the target.
     */
    public CliEvent withGenerateTargetVersion(String generateTargetVersion) {
        Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
        this.generateTargetVersion = Optional.ofNullable(generateTargetVersion);
        return this;
    }
    
    /**
     * The version of the target.
     */
    public CliEvent withGenerateTargetVersion(Optional<? extends String> generateTargetVersion) {
        Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
        this.generateTargetVersion = generateTargetVersion;
        return this;
    }

    /**
     * Version of the generation logic used.
     */
    public CliEvent withGenerateVersion(String generateVersion) {
        Utils.checkNotNull(generateVersion, "generateVersion");
        this.generateVersion = Optional.ofNullable(generateVersion);
        return this;
    }
    
    /**
     * Version of the generation logic used.
     */
    public CliEvent withGenerateVersion(Optional<? extends String> generateVersion) {
        Utils.checkNotNull(generateVersion, "generateVersion");
        this.generateVersion = generateVersion;
        return this;
    }

    /**
     * GitHub organization of the action.
     */
    public CliEvent withGhActionOrganization(String ghActionOrganization) {
        Utils.checkNotNull(ghActionOrganization, "ghActionOrganization");
        this.ghActionOrganization = Optional.ofNullable(ghActionOrganization);
        return this;
    }
    
    /**
     * GitHub organization of the action.
     */
    public CliEvent withGhActionOrganization(Optional<? extends String> ghActionOrganization) {
        Utils.checkNotNull(ghActionOrganization, "ghActionOrganization");
        this.ghActionOrganization = ghActionOrganization;
        return this;
    }

    /**
     * GitHub repository of the action.
     */
    public CliEvent withGhActionRepository(String ghActionRepository) {
        Utils.checkNotNull(ghActionRepository, "ghActionRepository");
        this.ghActionRepository = Optional.ofNullable(ghActionRepository);
        return this;
    }
    
    /**
     * GitHub repository of the action.
     */
    public CliEvent withGhActionRepository(Optional<? extends String> ghActionRepository) {
        Utils.checkNotNull(ghActionRepository, "ghActionRepository");
        this.ghActionRepository = ghActionRepository;
        return this;
    }

    /**
     * Link to the GitHub action run.
     */
    public CliEvent withGhActionRunLink(String ghActionRunLink) {
        Utils.checkNotNull(ghActionRunLink, "ghActionRunLink");
        this.ghActionRunLink = Optional.ofNullable(ghActionRunLink);
        return this;
    }
    
    /**
     * Link to the GitHub action run.
     */
    public CliEvent withGhActionRunLink(Optional<? extends String> ghActionRunLink) {
        Utils.checkNotNull(ghActionRunLink, "ghActionRunLink");
        this.ghActionRunLink = ghActionRunLink;
        return this;
    }

    /**
     * Version of the GitHub action.
     */
    public CliEvent withGhActionVersion(String ghActionVersion) {
        Utils.checkNotNull(ghActionVersion, "ghActionVersion");
        this.ghActionVersion = Optional.ofNullable(ghActionVersion);
        return this;
    }
    
    /**
     * Version of the GitHub action.
     */
    public CliEvent withGhActionVersion(Optional<? extends String> ghActionVersion) {
        Utils.checkNotNull(ghActionVersion, "ghActionVersion");
        this.ghActionVersion = ghActionVersion;
        return this;
    }

    /**
     * Current working directory relative to the git root.
     */
    public CliEvent withGitRelativeCwd(String gitRelativeCwd) {
        Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
        this.gitRelativeCwd = Optional.ofNullable(gitRelativeCwd);
        return this;
    }
    
    /**
     * Current working directory relative to the git root.
     */
    public CliEvent withGitRelativeCwd(Optional<? extends String> gitRelativeCwd) {
        Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
        this.gitRelativeCwd = gitRelativeCwd;
        return this;
    }

    /**
     * Default owner for git remote.
     */
    public CliEvent withGitRemoteDefaultOwner(String gitRemoteDefaultOwner) {
        Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
        this.gitRemoteDefaultOwner = Optional.ofNullable(gitRemoteDefaultOwner);
        return this;
    }
    
    /**
     * Default owner for git remote.
     */
    public CliEvent withGitRemoteDefaultOwner(Optional<? extends String> gitRemoteDefaultOwner) {
        Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
        this.gitRemoteDefaultOwner = gitRemoteDefaultOwner;
        return this;
    }

    /**
     * Default repository name for git remote.
     */
    public CliEvent withGitRemoteDefaultRepo(String gitRemoteDefaultRepo) {
        Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
        this.gitRemoteDefaultRepo = Optional.ofNullable(gitRemoteDefaultRepo);
        return this;
    }
    
    /**
     * Default repository name for git remote.
     */
    public CliEvent withGitRemoteDefaultRepo(Optional<? extends String> gitRemoteDefaultRepo) {
        Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
        this.gitRemoteDefaultRepo = gitRemoteDefaultRepo;
        return this;
    }

    /**
     * User email from git configuration.
     */
    public CliEvent withGitUserEmail(String gitUserEmail) {
        Utils.checkNotNull(gitUserEmail, "gitUserEmail");
        this.gitUserEmail = Optional.ofNullable(gitUserEmail);
        return this;
    }
    
    /**
     * User email from git configuration.
     */
    public CliEvent withGitUserEmail(Optional<? extends String> gitUserEmail) {
        Utils.checkNotNull(gitUserEmail, "gitUserEmail");
        this.gitUserEmail = gitUserEmail;
        return this;
    }

    /**
     * User name from git configuration.
     */
    public CliEvent withGitUserName(String gitUserName) {
        Utils.checkNotNull(gitUserName, "gitUserName");
        this.gitUserName = Optional.ofNullable(gitUserName);
        return this;
    }
    
    /**
     * User name from git configuration.
     */
    public CliEvent withGitUserName(Optional<? extends String> gitUserName) {
        Utils.checkNotNull(gitUserName, "gitUserName");
        this.gitUserName = gitUserName;
        return this;
    }

    /**
     * Remote hostname.
     */
    public CliEvent withHostname(String hostname) {
        Utils.checkNotNull(hostname, "hostname");
        this.hostname = Optional.ofNullable(hostname);
        return this;
    }
    
    /**
     * Remote hostname.
     */
    public CliEvent withHostname(Optional<? extends String> hostname) {
        Utils.checkNotNull(hostname, "hostname");
        this.hostname = hostname;
        return this;
    }

    /**
     * Unique identifier for each event.
     */
    public CliEvent withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Type of interaction.
     */
    public CliEvent withInteractionType(InteractionType interactionType) {
        Utils.checkNotNull(interactionType, "interactionType");
        this.interactionType = interactionType;
        return this;
    }

    /**
     * Timestamp when the event completed, in local time.
     */
    public CliEvent withLocalCompletedAt(OffsetDateTime localCompletedAt) {
        Utils.checkNotNull(localCompletedAt, "localCompletedAt");
        this.localCompletedAt = Optional.ofNullable(localCompletedAt);
        return this;
    }
    
    /**
     * Timestamp when the event completed, in local time.
     */
    public CliEvent withLocalCompletedAt(Optional<? extends OffsetDateTime> localCompletedAt) {
        Utils.checkNotNull(localCompletedAt, "localCompletedAt");
        this.localCompletedAt = localCompletedAt;
        return this;
    }

    /**
     * Timestamp when the event started, in local time.
     */
    public CliEvent withLocalStartedAt(OffsetDateTime localStartedAt) {
        Utils.checkNotNull(localStartedAt, "localStartedAt");
        this.localStartedAt = localStartedAt;
        return this;
    }

    /**
     * Checksum of the currently Rendered OpenAPI document.
     */
    public CliEvent withManagementDocChecksum(String managementDocChecksum) {
        Utils.checkNotNull(managementDocChecksum, "managementDocChecksum");
        this.managementDocChecksum = Optional.ofNullable(managementDocChecksum);
        return this;
    }
    
    /**
     * Checksum of the currently Rendered OpenAPI document.
     */
    public CliEvent withManagementDocChecksum(Optional<? extends String> managementDocChecksum) {
        Utils.checkNotNull(managementDocChecksum, "managementDocChecksum");
        this.managementDocChecksum = managementDocChecksum;
        return this;
    }

    /**
     * Version taken from info.version field of the Rendered OpenAPI document.
     */
    public CliEvent withManagementDocVersion(String managementDocVersion) {
        Utils.checkNotNull(managementDocVersion, "managementDocVersion");
        this.managementDocVersion = Optional.ofNullable(managementDocVersion);
        return this;
    }
    
    /**
     * Version taken from info.version field of the Rendered OpenAPI document.
     */
    public CliEvent withManagementDocVersion(Optional<? extends String> managementDocVersion) {
        Utils.checkNotNull(managementDocVersion, "managementDocVersion");
        this.managementDocVersion = managementDocVersion;
        return this;
    }

    /**
     * Full CLI command.
     */
    public CliEvent withRawCommand(String rawCommand) {
        Utils.checkNotNull(rawCommand, "rawCommand");
        this.rawCommand = Optional.ofNullable(rawCommand);
        return this;
    }
    
    /**
     * Full CLI command.
     */
    public CliEvent withRawCommand(Optional<? extends String> rawCommand) {
        Utils.checkNotNull(rawCommand, "rawCommand");
        this.rawCommand = rawCommand;
        return this;
    }

    /**
     * Label of the git repository.
     */
    public CliEvent withRepoLabel(String repoLabel) {
        Utils.checkNotNull(repoLabel, "repoLabel");
        this.repoLabel = Optional.ofNullable(repoLabel);
        return this;
    }
    
    /**
     * Label of the git repository.
     */
    public CliEvent withRepoLabel(Optional<? extends String> repoLabel) {
        Utils.checkNotNull(repoLabel, "repoLabel");
        this.repoLabel = repoLabel;
        return this;
    }

    /**
     * Identifier of the Speakeasy API key.
     */
    public CliEvent withSpeakeasyApiKeyName(String speakeasyApiKeyName) {
        Utils.checkNotNull(speakeasyApiKeyName, "speakeasyApiKeyName");
        this.speakeasyApiKeyName = speakeasyApiKeyName;
        return this;
    }

    /**
     * Version of the Speakeasy CLI.
     */
    public CliEvent withSpeakeasyVersion(String speakeasyVersion) {
        Utils.checkNotNull(speakeasyVersion, "speakeasyVersion");
        this.speakeasyVersion = speakeasyVersion;
        return this;
    }

    /**
     * Indicates whether the event was successful.
     */
    public CliEvent withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    /**
     * Identifier of the workspace.
     */
    public CliEvent withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CliEvent other = (CliEvent) o;
        return 
            java.util.Objects.deepEquals(this.commitHead, other.commitHead) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.durationMs, other.durationMs) &&
            java.util.Objects.deepEquals(this.executionId, other.executionId) &&
            java.util.Objects.deepEquals(this.generateBumpType, other.generateBumpType) &&
            java.util.Objects.deepEquals(this.generateConfigPostChecksum, other.generateConfigPostChecksum) &&
            java.util.Objects.deepEquals(this.generateConfigPostRaw, other.generateConfigPostRaw) &&
            java.util.Objects.deepEquals(this.generateConfigPostVersion, other.generateConfigPostVersion) &&
            java.util.Objects.deepEquals(this.generateConfigPreChecksum, other.generateConfigPreChecksum) &&
            java.util.Objects.deepEquals(this.generateConfigPreRaw, other.generateConfigPreRaw) &&
            java.util.Objects.deepEquals(this.generateConfigPreVersion, other.generateConfigPreVersion) &&
            java.util.Objects.deepEquals(this.generateGenLockId, other.generateGenLockId) &&
            java.util.Objects.deepEquals(this.generateGenLockPostFeatures, other.generateGenLockPostFeatures) &&
            java.util.Objects.deepEquals(this.generateGenLockPreDocChecksum, other.generateGenLockPreDocChecksum) &&
            java.util.Objects.deepEquals(this.generateGenLockPreDocVersion, other.generateGenLockPreDocVersion) &&
            java.util.Objects.deepEquals(this.generateGenLockPreFeatures, other.generateGenLockPreFeatures) &&
            java.util.Objects.deepEquals(this.generateGenLockPreVersion, other.generateGenLockPreVersion) &&
            java.util.Objects.deepEquals(this.generateOutputTests, other.generateOutputTests) &&
            java.util.Objects.deepEquals(this.generatePublished, other.generatePublished) &&
            java.util.Objects.deepEquals(this.generateRepoUrl, other.generateRepoUrl) &&
            java.util.Objects.deepEquals(this.generateTarget, other.generateTarget) &&
            java.util.Objects.deepEquals(this.generateTargetVersion, other.generateTargetVersion) &&
            java.util.Objects.deepEquals(this.generateVersion, other.generateVersion) &&
            java.util.Objects.deepEquals(this.ghActionOrganization, other.ghActionOrganization) &&
            java.util.Objects.deepEquals(this.ghActionRepository, other.ghActionRepository) &&
            java.util.Objects.deepEquals(this.ghActionRunLink, other.ghActionRunLink) &&
            java.util.Objects.deepEquals(this.ghActionVersion, other.ghActionVersion) &&
            java.util.Objects.deepEquals(this.gitRelativeCwd, other.gitRelativeCwd) &&
            java.util.Objects.deepEquals(this.gitRemoteDefaultOwner, other.gitRemoteDefaultOwner) &&
            java.util.Objects.deepEquals(this.gitRemoteDefaultRepo, other.gitRemoteDefaultRepo) &&
            java.util.Objects.deepEquals(this.gitUserEmail, other.gitUserEmail) &&
            java.util.Objects.deepEquals(this.gitUserName, other.gitUserName) &&
            java.util.Objects.deepEquals(this.hostname, other.hostname) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.interactionType, other.interactionType) &&
            java.util.Objects.deepEquals(this.localCompletedAt, other.localCompletedAt) &&
            java.util.Objects.deepEquals(this.localStartedAt, other.localStartedAt) &&
            java.util.Objects.deepEquals(this.managementDocChecksum, other.managementDocChecksum) &&
            java.util.Objects.deepEquals(this.managementDocVersion, other.managementDocVersion) &&
            java.util.Objects.deepEquals(this.rawCommand, other.rawCommand) &&
            java.util.Objects.deepEquals(this.repoLabel, other.repoLabel) &&
            java.util.Objects.deepEquals(this.speakeasyApiKeyName, other.speakeasyApiKeyName) &&
            java.util.Objects.deepEquals(this.speakeasyVersion, other.speakeasyVersion) &&
            java.util.Objects.deepEquals(this.success, other.success) &&
            java.util.Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            commitHead,
            createdAt,
            durationMs,
            executionId,
            generateBumpType,
            generateConfigPostChecksum,
            generateConfigPostRaw,
            generateConfigPostVersion,
            generateConfigPreChecksum,
            generateConfigPreRaw,
            generateConfigPreVersion,
            generateGenLockId,
            generateGenLockPostFeatures,
            generateGenLockPreDocChecksum,
            generateGenLockPreDocVersion,
            generateGenLockPreFeatures,
            generateGenLockPreVersion,
            generateOutputTests,
            generatePublished,
            generateRepoUrl,
            generateTarget,
            generateTargetVersion,
            generateVersion,
            ghActionOrganization,
            ghActionRepository,
            ghActionRunLink,
            ghActionVersion,
            gitRelativeCwd,
            gitRemoteDefaultOwner,
            gitRemoteDefaultRepo,
            gitUserEmail,
            gitUserName,
            hostname,
            id,
            interactionType,
            localCompletedAt,
            localStartedAt,
            managementDocChecksum,
            managementDocVersion,
            rawCommand,
            repoLabel,
            speakeasyApiKeyName,
            speakeasyVersion,
            success,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CliEvent.class,
                "commitHead", commitHead,
                "createdAt", createdAt,
                "durationMs", durationMs,
                "executionId", executionId,
                "generateBumpType", generateBumpType,
                "generateConfigPostChecksum", generateConfigPostChecksum,
                "generateConfigPostRaw", generateConfigPostRaw,
                "generateConfigPostVersion", generateConfigPostVersion,
                "generateConfigPreChecksum", generateConfigPreChecksum,
                "generateConfigPreRaw", generateConfigPreRaw,
                "generateConfigPreVersion", generateConfigPreVersion,
                "generateGenLockId", generateGenLockId,
                "generateGenLockPostFeatures", generateGenLockPostFeatures,
                "generateGenLockPreDocChecksum", generateGenLockPreDocChecksum,
                "generateGenLockPreDocVersion", generateGenLockPreDocVersion,
                "generateGenLockPreFeatures", generateGenLockPreFeatures,
                "generateGenLockPreVersion", generateGenLockPreVersion,
                "generateOutputTests", generateOutputTests,
                "generatePublished", generatePublished,
                "generateRepoUrl", generateRepoUrl,
                "generateTarget", generateTarget,
                "generateTargetVersion", generateTargetVersion,
                "generateVersion", generateVersion,
                "ghActionOrganization", ghActionOrganization,
                "ghActionRepository", ghActionRepository,
                "ghActionRunLink", ghActionRunLink,
                "ghActionVersion", ghActionVersion,
                "gitRelativeCwd", gitRelativeCwd,
                "gitRemoteDefaultOwner", gitRemoteDefaultOwner,
                "gitRemoteDefaultRepo", gitRemoteDefaultRepo,
                "gitUserEmail", gitUserEmail,
                "gitUserName", gitUserName,
                "hostname", hostname,
                "id", id,
                "interactionType", interactionType,
                "localCompletedAt", localCompletedAt,
                "localStartedAt", localStartedAt,
                "managementDocChecksum", managementDocChecksum,
                "managementDocVersion", managementDocVersion,
                "rawCommand", rawCommand,
                "repoLabel", repoLabel,
                "speakeasyApiKeyName", speakeasyApiKeyName,
                "speakeasyVersion", speakeasyVersion,
                "success", success,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> commitHead = Optional.empty();
 
        private OffsetDateTime createdAt;
 
        private Optional<? extends Long> durationMs = Optional.empty();
 
        private String executionId;
 
        private Optional<? extends GenerateBumpType> generateBumpType = Optional.empty();
 
        private Optional<? extends String> generateConfigPostChecksum = Optional.empty();
 
        private Optional<? extends String> generateConfigPostRaw = Optional.empty();
 
        private Optional<? extends String> generateConfigPostVersion = Optional.empty();
 
        private Optional<? extends String> generateConfigPreChecksum = Optional.empty();
 
        private Optional<? extends String> generateConfigPreRaw = Optional.empty();
 
        private Optional<? extends String> generateConfigPreVersion = Optional.empty();
 
        private Optional<? extends String> generateGenLockId = Optional.empty();
 
        private Optional<? extends String> generateGenLockPostFeatures = Optional.empty();
 
        private Optional<? extends String> generateGenLockPreDocChecksum = Optional.empty();
 
        private Optional<? extends String> generateGenLockPreDocVersion = Optional.empty();
 
        private Optional<? extends String> generateGenLockPreFeatures = Optional.empty();
 
        private Optional<? extends String> generateGenLockPreVersion = Optional.empty();
 
        private Optional<? extends Boolean> generateOutputTests = Optional.empty();
 
        private Optional<? extends Boolean> generatePublished = Optional.empty();
 
        private Optional<? extends String> generateRepoUrl = Optional.empty();
 
        private Optional<? extends String> generateTarget = Optional.empty();
 
        private Optional<? extends String> generateTargetVersion = Optional.empty();
 
        private Optional<? extends String> generateVersion = Optional.empty();
 
        private Optional<? extends String> ghActionOrganization = Optional.empty();
 
        private Optional<? extends String> ghActionRepository = Optional.empty();
 
        private Optional<? extends String> ghActionRunLink = Optional.empty();
 
        private Optional<? extends String> ghActionVersion = Optional.empty();
 
        private Optional<? extends String> gitRelativeCwd = Optional.empty();
 
        private Optional<? extends String> gitRemoteDefaultOwner = Optional.empty();
 
        private Optional<? extends String> gitRemoteDefaultRepo = Optional.empty();
 
        private Optional<? extends String> gitUserEmail = Optional.empty();
 
        private Optional<? extends String> gitUserName = Optional.empty();
 
        private Optional<? extends String> hostname = Optional.empty();
 
        private String id;
 
        private InteractionType interactionType;
 
        private Optional<? extends OffsetDateTime> localCompletedAt = Optional.empty();
 
        private OffsetDateTime localStartedAt;
 
        private Optional<? extends String> managementDocChecksum = Optional.empty();
 
        private Optional<? extends String> managementDocVersion = Optional.empty();
 
        private Optional<? extends String> rawCommand = Optional.empty();
 
        private Optional<? extends String> repoLabel = Optional.empty();
 
        private String speakeasyApiKeyName;
 
        private String speakeasyVersion;
 
        private Boolean success;
 
        private String workspaceId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Remote commit ID.
         */
        public Builder commitHead(String commitHead) {
            Utils.checkNotNull(commitHead, "commitHead");
            this.commitHead = Optional.ofNullable(commitHead);
            return this;
        }
        
        /**
         * Remote commit ID.
         */
        public Builder commitHead(Optional<? extends String> commitHead) {
            Utils.checkNotNull(commitHead, "commitHead");
            this.commitHead = commitHead;
            return this;
        }

        /**
         * Timestamp when the event was created in the database.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Duration of the event in milliseconds.
         */
        public Builder durationMs(long durationMs) {
            Utils.checkNotNull(durationMs, "durationMs");
            this.durationMs = Optional.ofNullable(durationMs);
            return this;
        }
        
        /**
         * Duration of the event in milliseconds.
         */
        public Builder durationMs(Optional<? extends Long> durationMs) {
            Utils.checkNotNull(durationMs, "durationMs");
            this.durationMs = durationMs;
            return this;
        }

        /**
         * Unique identifier for each execution of the CLI.
         */
        public Builder executionId(String executionId) {
            Utils.checkNotNull(executionId, "executionId");
            this.executionId = executionId;
            return this;
        }

        /**
         * Bump type of the lock file (calculated semver delta, or a custom change (manual release))
         */
        public Builder generateBumpType(GenerateBumpType generateBumpType) {
            Utils.checkNotNull(generateBumpType, "generateBumpType");
            this.generateBumpType = Optional.ofNullable(generateBumpType);
            return this;
        }
        
        /**
         * Bump type of the lock file (calculated semver delta, or a custom change (manual release))
         */
        public Builder generateBumpType(Optional<? extends GenerateBumpType> generateBumpType) {
            Utils.checkNotNull(generateBumpType, "generateBumpType");
            this.generateBumpType = generateBumpType;
            return this;
        }

        /**
         * Checksum of the configuration file (post generation)
         */
        public Builder generateConfigPostChecksum(String generateConfigPostChecksum) {
            Utils.checkNotNull(generateConfigPostChecksum, "generateConfigPostChecksum");
            this.generateConfigPostChecksum = Optional.ofNullable(generateConfigPostChecksum);
            return this;
        }
        
        /**
         * Checksum of the configuration file (post generation)
         */
        public Builder generateConfigPostChecksum(Optional<? extends String> generateConfigPostChecksum) {
            Utils.checkNotNull(generateConfigPostChecksum, "generateConfigPostChecksum");
            this.generateConfigPostChecksum = generateConfigPostChecksum;
            return this;
        }

        /**
         * Rendered configuration file (post generation)
         */
        public Builder generateConfigPostRaw(String generateConfigPostRaw) {
            Utils.checkNotNull(generateConfigPostRaw, "generateConfigPostRaw");
            this.generateConfigPostRaw = Optional.ofNullable(generateConfigPostRaw);
            return this;
        }
        
        /**
         * Rendered configuration file (post generation)
         */
        public Builder generateConfigPostRaw(Optional<? extends String> generateConfigPostRaw) {
            Utils.checkNotNull(generateConfigPostRaw, "generateConfigPostRaw");
            this.generateConfigPostRaw = generateConfigPostRaw;
            return this;
        }

        /**
         * Version of the generated target (post generation)
         */
        public Builder generateConfigPostVersion(String generateConfigPostVersion) {
            Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
            this.generateConfigPostVersion = Optional.ofNullable(generateConfigPostVersion);
            return this;
        }
        
        /**
         * Version of the generated target (post generation)
         */
        public Builder generateConfigPostVersion(Optional<? extends String> generateConfigPostVersion) {
            Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
            this.generateConfigPostVersion = generateConfigPostVersion;
            return this;
        }

        /**
         * Checksum of the configuration file (prior to generation)
         */
        public Builder generateConfigPreChecksum(String generateConfigPreChecksum) {
            Utils.checkNotNull(generateConfigPreChecksum, "generateConfigPreChecksum");
            this.generateConfigPreChecksum = Optional.ofNullable(generateConfigPreChecksum);
            return this;
        }
        
        /**
         * Checksum of the configuration file (prior to generation)
         */
        public Builder generateConfigPreChecksum(Optional<? extends String> generateConfigPreChecksum) {
            Utils.checkNotNull(generateConfigPreChecksum, "generateConfigPreChecksum");
            this.generateConfigPreChecksum = generateConfigPreChecksum;
            return this;
        }

        /**
         * Rendered configuration file (prior to generation)
         */
        public Builder generateConfigPreRaw(String generateConfigPreRaw) {
            Utils.checkNotNull(generateConfigPreRaw, "generateConfigPreRaw");
            this.generateConfigPreRaw = Optional.ofNullable(generateConfigPreRaw);
            return this;
        }
        
        /**
         * Rendered configuration file (prior to generation)
         */
        public Builder generateConfigPreRaw(Optional<? extends String> generateConfigPreRaw) {
            Utils.checkNotNull(generateConfigPreRaw, "generateConfigPreRaw");
            this.generateConfigPreRaw = generateConfigPreRaw;
            return this;
        }

        /**
         * Version of the generated target (prior to generation)
         */
        public Builder generateConfigPreVersion(String generateConfigPreVersion) {
            Utils.checkNotNull(generateConfigPreVersion, "generateConfigPreVersion");
            this.generateConfigPreVersion = Optional.ofNullable(generateConfigPreVersion);
            return this;
        }
        
        /**
         * Version of the generated target (prior to generation)
         */
        public Builder generateConfigPreVersion(Optional<? extends String> generateConfigPreVersion) {
            Utils.checkNotNull(generateConfigPreVersion, "generateConfigPreVersion");
            this.generateConfigPreVersion = generateConfigPreVersion;
            return this;
        }

        /**
         * gen.lock ID (expected to be a uuid).
         */
        public Builder generateGenLockId(String generateGenLockId) {
            Utils.checkNotNull(generateGenLockId, "generateGenLockId");
            this.generateGenLockId = Optional.ofNullable(generateGenLockId);
            return this;
        }
        
        /**
         * gen.lock ID (expected to be a uuid).
         */
        public Builder generateGenLockId(Optional<? extends String> generateGenLockId) {
            Utils.checkNotNull(generateGenLockId, "generateGenLockId");
            this.generateGenLockId = generateGenLockId;
            return this;
        }

        /**
         * Features post generation
         */
        public Builder generateGenLockPostFeatures(String generateGenLockPostFeatures) {
            Utils.checkNotNull(generateGenLockPostFeatures, "generateGenLockPostFeatures");
            this.generateGenLockPostFeatures = Optional.ofNullable(generateGenLockPostFeatures);
            return this;
        }
        
        /**
         * Features post generation
         */
        public Builder generateGenLockPostFeatures(Optional<? extends String> generateGenLockPostFeatures) {
            Utils.checkNotNull(generateGenLockPostFeatures, "generateGenLockPostFeatures");
            this.generateGenLockPostFeatures = generateGenLockPostFeatures;
            return this;
        }

        /**
         * Checksum of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
         */
        public Builder generateGenLockPreDocChecksum(String generateGenLockPreDocChecksum) {
            Utils.checkNotNull(generateGenLockPreDocChecksum, "generateGenLockPreDocChecksum");
            this.generateGenLockPreDocChecksum = Optional.ofNullable(generateGenLockPreDocChecksum);
            return this;
        }
        
        /**
         * Checksum of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
         */
        public Builder generateGenLockPreDocChecksum(Optional<? extends String> generateGenLockPreDocChecksum) {
            Utils.checkNotNull(generateGenLockPreDocChecksum, "generateGenLockPreDocChecksum");
            this.generateGenLockPreDocChecksum = generateGenLockPreDocChecksum;
            return this;
        }

        /**
         * info.Version of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
         */
        public Builder generateGenLockPreDocVersion(String generateGenLockPreDocVersion) {
            Utils.checkNotNull(generateGenLockPreDocVersion, "generateGenLockPreDocVersion");
            this.generateGenLockPreDocVersion = Optional.ofNullable(generateGenLockPreDocVersion);
            return this;
        }
        
        /**
         * info.Version of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
         */
        public Builder generateGenLockPreDocVersion(Optional<? extends String> generateGenLockPreDocVersion) {
            Utils.checkNotNull(generateGenLockPreDocVersion, "generateGenLockPreDocVersion");
            this.generateGenLockPreDocVersion = generateGenLockPreDocVersion;
            return this;
        }

        /**
         * Features prior to generation
         */
        public Builder generateGenLockPreFeatures(String generateGenLockPreFeatures) {
            Utils.checkNotNull(generateGenLockPreFeatures, "generateGenLockPreFeatures");
            this.generateGenLockPreFeatures = Optional.ofNullable(generateGenLockPreFeatures);
            return this;
        }
        
        /**
         * Features prior to generation
         */
        public Builder generateGenLockPreFeatures(Optional<? extends String> generateGenLockPreFeatures) {
            Utils.checkNotNull(generateGenLockPreFeatures, "generateGenLockPreFeatures");
            this.generateGenLockPreFeatures = generateGenLockPreFeatures;
            return this;
        }

        /**
         * Artifact version for the Previous Generation
         */
        public Builder generateGenLockPreVersion(String generateGenLockPreVersion) {
            Utils.checkNotNull(generateGenLockPreVersion, "generateGenLockPreVersion");
            this.generateGenLockPreVersion = Optional.ofNullable(generateGenLockPreVersion);
            return this;
        }
        
        /**
         * Artifact version for the Previous Generation
         */
        public Builder generateGenLockPreVersion(Optional<? extends String> generateGenLockPreVersion) {
            Utils.checkNotNull(generateGenLockPreVersion, "generateGenLockPreVersion");
            this.generateGenLockPreVersion = generateGenLockPreVersion;
            return this;
        }

        /**
         * Indicates whether tests were output.
         */
        public Builder generateOutputTests(boolean generateOutputTests) {
            Utils.checkNotNull(generateOutputTests, "generateOutputTests");
            this.generateOutputTests = Optional.ofNullable(generateOutputTests);
            return this;
        }
        
        /**
         * Indicates whether tests were output.
         */
        public Builder generateOutputTests(Optional<? extends Boolean> generateOutputTests) {
            Utils.checkNotNull(generateOutputTests, "generateOutputTests");
            this.generateOutputTests = generateOutputTests;
            return this;
        }

        /**
         * Indicates whether the target was considered published.
         */
        public Builder generatePublished(boolean generatePublished) {
            Utils.checkNotNull(generatePublished, "generatePublished");
            this.generatePublished = Optional.ofNullable(generatePublished);
            return this;
        }
        
        /**
         * Indicates whether the target was considered published.
         */
        public Builder generatePublished(Optional<? extends Boolean> generatePublished) {
            Utils.checkNotNull(generatePublished, "generatePublished");
            this.generatePublished = generatePublished;
            return this;
        }

        /**
         * Expected Repo URL, for use in documentation generation.
         */
        public Builder generateRepoUrl(String generateRepoUrl) {
            Utils.checkNotNull(generateRepoUrl, "generateRepoUrl");
            this.generateRepoUrl = Optional.ofNullable(generateRepoUrl);
            return this;
        }
        
        /**
         * Expected Repo URL, for use in documentation generation.
         */
        public Builder generateRepoUrl(Optional<? extends String> generateRepoUrl) {
            Utils.checkNotNull(generateRepoUrl, "generateRepoUrl");
            this.generateRepoUrl = generateRepoUrl;
            return this;
        }

        /**
         * The target of the event.
         */
        public Builder generateTarget(String generateTarget) {
            Utils.checkNotNull(generateTarget, "generateTarget");
            this.generateTarget = Optional.ofNullable(generateTarget);
            return this;
        }
        
        /**
         * The target of the event.
         */
        public Builder generateTarget(Optional<? extends String> generateTarget) {
            Utils.checkNotNull(generateTarget, "generateTarget");
            this.generateTarget = generateTarget;
            return this;
        }

        /**
         * The version of the target.
         */
        public Builder generateTargetVersion(String generateTargetVersion) {
            Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
            this.generateTargetVersion = Optional.ofNullable(generateTargetVersion);
            return this;
        }
        
        /**
         * The version of the target.
         */
        public Builder generateTargetVersion(Optional<? extends String> generateTargetVersion) {
            Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
            this.generateTargetVersion = generateTargetVersion;
            return this;
        }

        /**
         * Version of the generation logic used.
         */
        public Builder generateVersion(String generateVersion) {
            Utils.checkNotNull(generateVersion, "generateVersion");
            this.generateVersion = Optional.ofNullable(generateVersion);
            return this;
        }
        
        /**
         * Version of the generation logic used.
         */
        public Builder generateVersion(Optional<? extends String> generateVersion) {
            Utils.checkNotNull(generateVersion, "generateVersion");
            this.generateVersion = generateVersion;
            return this;
        }

        /**
         * GitHub organization of the action.
         */
        public Builder ghActionOrganization(String ghActionOrganization) {
            Utils.checkNotNull(ghActionOrganization, "ghActionOrganization");
            this.ghActionOrganization = Optional.ofNullable(ghActionOrganization);
            return this;
        }
        
        /**
         * GitHub organization of the action.
         */
        public Builder ghActionOrganization(Optional<? extends String> ghActionOrganization) {
            Utils.checkNotNull(ghActionOrganization, "ghActionOrganization");
            this.ghActionOrganization = ghActionOrganization;
            return this;
        }

        /**
         * GitHub repository of the action.
         */
        public Builder ghActionRepository(String ghActionRepository) {
            Utils.checkNotNull(ghActionRepository, "ghActionRepository");
            this.ghActionRepository = Optional.ofNullable(ghActionRepository);
            return this;
        }
        
        /**
         * GitHub repository of the action.
         */
        public Builder ghActionRepository(Optional<? extends String> ghActionRepository) {
            Utils.checkNotNull(ghActionRepository, "ghActionRepository");
            this.ghActionRepository = ghActionRepository;
            return this;
        }

        /**
         * Link to the GitHub action run.
         */
        public Builder ghActionRunLink(String ghActionRunLink) {
            Utils.checkNotNull(ghActionRunLink, "ghActionRunLink");
            this.ghActionRunLink = Optional.ofNullable(ghActionRunLink);
            return this;
        }
        
        /**
         * Link to the GitHub action run.
         */
        public Builder ghActionRunLink(Optional<? extends String> ghActionRunLink) {
            Utils.checkNotNull(ghActionRunLink, "ghActionRunLink");
            this.ghActionRunLink = ghActionRunLink;
            return this;
        }

        /**
         * Version of the GitHub action.
         */
        public Builder ghActionVersion(String ghActionVersion) {
            Utils.checkNotNull(ghActionVersion, "ghActionVersion");
            this.ghActionVersion = Optional.ofNullable(ghActionVersion);
            return this;
        }
        
        /**
         * Version of the GitHub action.
         */
        public Builder ghActionVersion(Optional<? extends String> ghActionVersion) {
            Utils.checkNotNull(ghActionVersion, "ghActionVersion");
            this.ghActionVersion = ghActionVersion;
            return this;
        }

        /**
         * Current working directory relative to the git root.
         */
        public Builder gitRelativeCwd(String gitRelativeCwd) {
            Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
            this.gitRelativeCwd = Optional.ofNullable(gitRelativeCwd);
            return this;
        }
        
        /**
         * Current working directory relative to the git root.
         */
        public Builder gitRelativeCwd(Optional<? extends String> gitRelativeCwd) {
            Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
            this.gitRelativeCwd = gitRelativeCwd;
            return this;
        }

        /**
         * Default owner for git remote.
         */
        public Builder gitRemoteDefaultOwner(String gitRemoteDefaultOwner) {
            Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
            this.gitRemoteDefaultOwner = Optional.ofNullable(gitRemoteDefaultOwner);
            return this;
        }
        
        /**
         * Default owner for git remote.
         */
        public Builder gitRemoteDefaultOwner(Optional<? extends String> gitRemoteDefaultOwner) {
            Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
            this.gitRemoteDefaultOwner = gitRemoteDefaultOwner;
            return this;
        }

        /**
         * Default repository name for git remote.
         */
        public Builder gitRemoteDefaultRepo(String gitRemoteDefaultRepo) {
            Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
            this.gitRemoteDefaultRepo = Optional.ofNullable(gitRemoteDefaultRepo);
            return this;
        }
        
        /**
         * Default repository name for git remote.
         */
        public Builder gitRemoteDefaultRepo(Optional<? extends String> gitRemoteDefaultRepo) {
            Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
            this.gitRemoteDefaultRepo = gitRemoteDefaultRepo;
            return this;
        }

        /**
         * User email from git configuration.
         */
        public Builder gitUserEmail(String gitUserEmail) {
            Utils.checkNotNull(gitUserEmail, "gitUserEmail");
            this.gitUserEmail = Optional.ofNullable(gitUserEmail);
            return this;
        }
        
        /**
         * User email from git configuration.
         */
        public Builder gitUserEmail(Optional<? extends String> gitUserEmail) {
            Utils.checkNotNull(gitUserEmail, "gitUserEmail");
            this.gitUserEmail = gitUserEmail;
            return this;
        }

        /**
         * User name from git configuration.
         */
        public Builder gitUserName(String gitUserName) {
            Utils.checkNotNull(gitUserName, "gitUserName");
            this.gitUserName = Optional.ofNullable(gitUserName);
            return this;
        }
        
        /**
         * User name from git configuration.
         */
        public Builder gitUserName(Optional<? extends String> gitUserName) {
            Utils.checkNotNull(gitUserName, "gitUserName");
            this.gitUserName = gitUserName;
            return this;
        }

        /**
         * Remote hostname.
         */
        public Builder hostname(String hostname) {
            Utils.checkNotNull(hostname, "hostname");
            this.hostname = Optional.ofNullable(hostname);
            return this;
        }
        
        /**
         * Remote hostname.
         */
        public Builder hostname(Optional<? extends String> hostname) {
            Utils.checkNotNull(hostname, "hostname");
            this.hostname = hostname;
            return this;
        }

        /**
         * Unique identifier for each event.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Type of interaction.
         */
        public Builder interactionType(InteractionType interactionType) {
            Utils.checkNotNull(interactionType, "interactionType");
            this.interactionType = interactionType;
            return this;
        }

        /**
         * Timestamp when the event completed, in local time.
         */
        public Builder localCompletedAt(OffsetDateTime localCompletedAt) {
            Utils.checkNotNull(localCompletedAt, "localCompletedAt");
            this.localCompletedAt = Optional.ofNullable(localCompletedAt);
            return this;
        }
        
        /**
         * Timestamp when the event completed, in local time.
         */
        public Builder localCompletedAt(Optional<? extends OffsetDateTime> localCompletedAt) {
            Utils.checkNotNull(localCompletedAt, "localCompletedAt");
            this.localCompletedAt = localCompletedAt;
            return this;
        }

        /**
         * Timestamp when the event started, in local time.
         */
        public Builder localStartedAt(OffsetDateTime localStartedAt) {
            Utils.checkNotNull(localStartedAt, "localStartedAt");
            this.localStartedAt = localStartedAt;
            return this;
        }

        /**
         * Checksum of the currently Rendered OpenAPI document.
         */
        public Builder managementDocChecksum(String managementDocChecksum) {
            Utils.checkNotNull(managementDocChecksum, "managementDocChecksum");
            this.managementDocChecksum = Optional.ofNullable(managementDocChecksum);
            return this;
        }
        
        /**
         * Checksum of the currently Rendered OpenAPI document.
         */
        public Builder managementDocChecksum(Optional<? extends String> managementDocChecksum) {
            Utils.checkNotNull(managementDocChecksum, "managementDocChecksum");
            this.managementDocChecksum = managementDocChecksum;
            return this;
        }

        /**
         * Version taken from info.version field of the Rendered OpenAPI document.
         */
        public Builder managementDocVersion(String managementDocVersion) {
            Utils.checkNotNull(managementDocVersion, "managementDocVersion");
            this.managementDocVersion = Optional.ofNullable(managementDocVersion);
            return this;
        }
        
        /**
         * Version taken from info.version field of the Rendered OpenAPI document.
         */
        public Builder managementDocVersion(Optional<? extends String> managementDocVersion) {
            Utils.checkNotNull(managementDocVersion, "managementDocVersion");
            this.managementDocVersion = managementDocVersion;
            return this;
        }

        /**
         * Full CLI command.
         */
        public Builder rawCommand(String rawCommand) {
            Utils.checkNotNull(rawCommand, "rawCommand");
            this.rawCommand = Optional.ofNullable(rawCommand);
            return this;
        }
        
        /**
         * Full CLI command.
         */
        public Builder rawCommand(Optional<? extends String> rawCommand) {
            Utils.checkNotNull(rawCommand, "rawCommand");
            this.rawCommand = rawCommand;
            return this;
        }

        /**
         * Label of the git repository.
         */
        public Builder repoLabel(String repoLabel) {
            Utils.checkNotNull(repoLabel, "repoLabel");
            this.repoLabel = Optional.ofNullable(repoLabel);
            return this;
        }
        
        /**
         * Label of the git repository.
         */
        public Builder repoLabel(Optional<? extends String> repoLabel) {
            Utils.checkNotNull(repoLabel, "repoLabel");
            this.repoLabel = repoLabel;
            return this;
        }

        /**
         * Identifier of the Speakeasy API key.
         */
        public Builder speakeasyApiKeyName(String speakeasyApiKeyName) {
            Utils.checkNotNull(speakeasyApiKeyName, "speakeasyApiKeyName");
            this.speakeasyApiKeyName = speakeasyApiKeyName;
            return this;
        }

        /**
         * Version of the Speakeasy CLI.
         */
        public Builder speakeasyVersion(String speakeasyVersion) {
            Utils.checkNotNull(speakeasyVersion, "speakeasyVersion");
            this.speakeasyVersion = speakeasyVersion;
            return this;
        }

        /**
         * Indicates whether the event was successful.
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }

        /**
         * Identifier of the workspace.
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public CliEvent build() {
            return new CliEvent(
                commitHead,
                createdAt,
                durationMs,
                executionId,
                generateBumpType,
                generateConfigPostChecksum,
                generateConfigPostRaw,
                generateConfigPostVersion,
                generateConfigPreChecksum,
                generateConfigPreRaw,
                generateConfigPreVersion,
                generateGenLockId,
                generateGenLockPostFeatures,
                generateGenLockPreDocChecksum,
                generateGenLockPreDocVersion,
                generateGenLockPreFeatures,
                generateGenLockPreVersion,
                generateOutputTests,
                generatePublished,
                generateRepoUrl,
                generateTarget,
                generateTargetVersion,
                generateVersion,
                ghActionOrganization,
                ghActionRepository,
                ghActionRunLink,
                ghActionVersion,
                gitRelativeCwd,
                gitRemoteDefaultOwner,
                gitRemoteDefaultRepo,
                gitUserEmail,
                gitUserName,
                hostname,
                id,
                interactionType,
                localCompletedAt,
                localStartedAt,
                managementDocChecksum,
                managementDocVersion,
                rawCommand,
                repoLabel,
                speakeasyApiKeyName,
                speakeasyVersion,
                success,
                workspaceId);
        }
    }
}

