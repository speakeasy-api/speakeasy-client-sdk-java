/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * EmbedToken - A representation of an embed token granted for working with Speakeasy components.
 */

public class EmbedToken {

    /**
     * Creation timestamp.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The ID of the user that created this token.
     */
    @JsonProperty("created_by")
    private String createdBy;

    /**
     * A detailed description of the EmbedToken.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The time this token expires.
     */
    @JsonProperty("expires_at")
    private OffsetDateTime expiresAt;

    /**
     * The filters applied to this token.
     */
    @JsonProperty("filters")
    private String filters;

    /**
     * The ID of this EmbedToken.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The last time this token was used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_used")
    private Optional<? extends OffsetDateTime> lastUsed;

    /**
     * The time this token was revoked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revoked_at")
    private Optional<? extends OffsetDateTime> revokedAt;

    /**
     * The ID of the user that revoked this token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revoked_by")
    private Optional<? extends String> revokedBy;

    /**
     * The workspace ID this token belongs to.
     */
    @JsonProperty("workspace_id")
    private String workspaceId;

    public EmbedToken(
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("created_by") String createdBy,
            @JsonProperty("description") String description,
            @JsonProperty("expires_at") OffsetDateTime expiresAt,
            @JsonProperty("filters") String filters,
            @JsonProperty("id") String id,
            @JsonProperty("last_used") Optional<? extends OffsetDateTime> lastUsed,
            @JsonProperty("revoked_at") Optional<? extends OffsetDateTime> revokedAt,
            @JsonProperty("revoked_by") Optional<? extends String> revokedBy,
            @JsonProperty("workspace_id") String workspaceId) {
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(expiresAt, "expiresAt");
        Utils.checkNotNull(filters, "filters");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(lastUsed, "lastUsed");
        Utils.checkNotNull(revokedAt, "revokedAt");
        Utils.checkNotNull(revokedBy, "revokedBy");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.description = description;
        this.expiresAt = expiresAt;
        this.filters = filters;
        this.id = id;
        this.lastUsed = lastUsed;
        this.revokedAt = revokedAt;
        this.revokedBy = revokedBy;
        this.workspaceId = workspaceId;
    }

    /**
     * Creation timestamp.
     */
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The ID of the user that created this token.
     */
    public String createdBy() {
        return createdBy;
    }

    /**
     * A detailed description of the EmbedToken.
     */
    public String description() {
        return description;
    }

    /**
     * The time this token expires.
     */
    public OffsetDateTime expiresAt() {
        return expiresAt;
    }

    /**
     * The filters applied to this token.
     */
    public String filters() {
        return filters;
    }

    /**
     * The ID of this EmbedToken.
     */
    public String id() {
        return id;
    }

    /**
     * The last time this token was used.
     */
    public Optional<? extends OffsetDateTime> lastUsed() {
        return lastUsed;
    }

    /**
     * The time this token was revoked.
     */
    public Optional<? extends OffsetDateTime> revokedAt() {
        return revokedAt;
    }

    /**
     * The ID of the user that revoked this token.
     */
    public Optional<? extends String> revokedBy() {
        return revokedBy;
    }

    /**
     * The workspace ID this token belongs to.
     */
    public String workspaceId() {
        return workspaceId;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Creation timestamp.
     */
    public EmbedToken withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The ID of the user that created this token.
     */
    public EmbedToken withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * A detailed description of the EmbedToken.
     */
    public EmbedToken withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The time this token expires.
     */
    public EmbedToken withExpiresAt(OffsetDateTime expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    /**
     * The filters applied to this token.
     */
    public EmbedToken withFilters(String filters) {
        Utils.checkNotNull(filters, "filters");
        this.filters = filters;
        return this;
    }

    /**
     * The ID of this EmbedToken.
     */
    public EmbedToken withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The last time this token was used.
     */
    public EmbedToken withLastUsed(OffsetDateTime lastUsed) {
        Utils.checkNotNull(lastUsed, "lastUsed");
        this.lastUsed = Optional.ofNullable(lastUsed);
        return this;
    }

    /**
     * The last time this token was used.
     */
    public EmbedToken withLastUsed(Optional<? extends OffsetDateTime> lastUsed) {
        Utils.checkNotNull(lastUsed, "lastUsed");
        this.lastUsed = lastUsed;
        return this;
    }

    /**
     * The time this token was revoked.
     */
    public EmbedToken withRevokedAt(OffsetDateTime revokedAt) {
        Utils.checkNotNull(revokedAt, "revokedAt");
        this.revokedAt = Optional.ofNullable(revokedAt);
        return this;
    }

    /**
     * The time this token was revoked.
     */
    public EmbedToken withRevokedAt(Optional<? extends OffsetDateTime> revokedAt) {
        Utils.checkNotNull(revokedAt, "revokedAt");
        this.revokedAt = revokedAt;
        return this;
    }

    /**
     * The ID of the user that revoked this token.
     */
    public EmbedToken withRevokedBy(String revokedBy) {
        Utils.checkNotNull(revokedBy, "revokedBy");
        this.revokedBy = Optional.ofNullable(revokedBy);
        return this;
    }

    /**
     * The ID of the user that revoked this token.
     */
    public EmbedToken withRevokedBy(Optional<? extends String> revokedBy) {
        Utils.checkNotNull(revokedBy, "revokedBy");
        this.revokedBy = revokedBy;
        return this;
    }

    /**
     * The workspace ID this token belongs to.
     */
    public EmbedToken withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmbedToken other = (EmbedToken) o;
        return 
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.createdBy, other.createdBy) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.expiresAt, other.expiresAt) &&
            java.util.Objects.deepEquals(this.filters, other.filters) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.lastUsed, other.lastUsed) &&
            java.util.Objects.deepEquals(this.revokedAt, other.revokedAt) &&
            java.util.Objects.deepEquals(this.revokedBy, other.revokedBy) &&
            java.util.Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            createdAt,
            createdBy,
            description,
            expiresAt,
            filters,
            id,
            lastUsed,
            revokedAt,
            revokedBy,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmbedToken.class,
                "createdAt", createdAt,
                "createdBy", createdBy,
                "description", description,
                "expiresAt", expiresAt,
                "filters", filters,
                "id", id,
                "lastUsed", lastUsed,
                "revokedAt", revokedAt,
                "revokedBy", revokedBy,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private OffsetDateTime createdAt;
 
        private String createdBy;
 
        private String description;
 
        private OffsetDateTime expiresAt;
 
        private String filters;
 
        private String id;
 
        private Optional<? extends OffsetDateTime> lastUsed = Optional.empty();
 
        private Optional<? extends OffsetDateTime> revokedAt = Optional.empty();
 
        private Optional<? extends String> revokedBy = Optional.empty();
 
        private String workspaceId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Creation timestamp.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The ID of the user that created this token.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * A detailed description of the EmbedToken.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The time this token expires.
         */
        public Builder expiresAt(OffsetDateTime expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * The filters applied to this token.
         */
        public Builder filters(String filters) {
            Utils.checkNotNull(filters, "filters");
            this.filters = filters;
            return this;
        }

        /**
         * The ID of this EmbedToken.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The last time this token was used.
         */
        public Builder lastUsed(OffsetDateTime lastUsed) {
            Utils.checkNotNull(lastUsed, "lastUsed");
            this.lastUsed = Optional.ofNullable(lastUsed);
            return this;
        }

        /**
         * The last time this token was used.
         */
        public Builder lastUsed(Optional<? extends OffsetDateTime> lastUsed) {
            Utils.checkNotNull(lastUsed, "lastUsed");
            this.lastUsed = lastUsed;
            return this;
        }

        /**
         * The time this token was revoked.
         */
        public Builder revokedAt(OffsetDateTime revokedAt) {
            Utils.checkNotNull(revokedAt, "revokedAt");
            this.revokedAt = Optional.ofNullable(revokedAt);
            return this;
        }

        /**
         * The time this token was revoked.
         */
        public Builder revokedAt(Optional<? extends OffsetDateTime> revokedAt) {
            Utils.checkNotNull(revokedAt, "revokedAt");
            this.revokedAt = revokedAt;
            return this;
        }

        /**
         * The ID of the user that revoked this token.
         */
        public Builder revokedBy(String revokedBy) {
            Utils.checkNotNull(revokedBy, "revokedBy");
            this.revokedBy = Optional.ofNullable(revokedBy);
            return this;
        }

        /**
         * The ID of the user that revoked this token.
         */
        public Builder revokedBy(Optional<? extends String> revokedBy) {
            Utils.checkNotNull(revokedBy, "revokedBy");
            this.revokedBy = revokedBy;
            return this;
        }

        /**
         * The workspace ID this token belongs to.
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public EmbedToken build() {
            return new EmbedToken(
                createdAt,
                createdBy,
                description,
                expiresAt,
                filters,
                id,
                lastUsed,
                revokedAt,
                revokedBy,
                workspaceId);
        }
    }
}

