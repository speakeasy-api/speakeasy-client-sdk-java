/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
/**
 * GithubConfigureTargetRequest - A request to configure a GitHub target
 */

public class GithubConfigureTargetRequest {

    /**
     * The GitHub organization name
     */
    @JsonProperty("org")
    private String org;

    /**
     * The GitHub repository name
     */
    @JsonProperty("repo_name")
    private String repoName;

    @JsonCreator
    public GithubConfigureTargetRequest(
            @JsonProperty("org") String org,
            @JsonProperty("repo_name") String repoName) {
        Utils.checkNotNull(org, "org");
        Utils.checkNotNull(repoName, "repoName");
        this.org = org;
        this.repoName = repoName;
    }

    /**
     * The GitHub organization name
     */
    @JsonIgnore
    public String org() {
        return org;
    }

    /**
     * The GitHub repository name
     */
    @JsonIgnore
    public String repoName() {
        return repoName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The GitHub organization name
     */
    public GithubConfigureTargetRequest withOrg(String org) {
        Utils.checkNotNull(org, "org");
        this.org = org;
        return this;
    }

    /**
     * The GitHub repository name
     */
    public GithubConfigureTargetRequest withRepoName(String repoName) {
        Utils.checkNotNull(repoName, "repoName");
        this.repoName = repoName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GithubConfigureTargetRequest other = (GithubConfigureTargetRequest) o;
        return 
            java.util.Objects.deepEquals(this.org, other.org) &&
            java.util.Objects.deepEquals(this.repoName, other.repoName);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            org,
            repoName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GithubConfigureTargetRequest.class,
                "org", org,
                "repoName", repoName);
    }
    
    public final static class Builder {
 
        private String org;
 
        private String repoName;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The GitHub organization name
         */
        public Builder org(String org) {
            Utils.checkNotNull(org, "org");
            this.org = org;
            return this;
        }

        /**
         * The GitHub repository name
         */
        public Builder repoName(String repoName) {
            Utils.checkNotNull(repoName, "repoName");
            this.repoName = repoName;
            return this;
        }
        
        public GithubConfigureTargetRequest build() {
            return new GithubConfigureTargetRequest(
                org,
                repoName);
        }
    }
}

