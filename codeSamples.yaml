overlay: 1.0.0
info:
  title: CodeSamples overlay for java target
  version: 0.0.0
actions:
  - target: $["paths"]["/v1/apis"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: getApis
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetApisRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetApisResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GetApisRequest req = GetApisRequest.builder()
                            .build();

                    GetApisResponse res = sdk.apis().getApis()
                            .request(req)
                            .call();

                    if (res.apis().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: getAllApiVersions
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetAllApiVersionsRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetAllApiVersionsResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GetAllApiVersionsRequest req = GetAllApiVersionsRequest.builder()
                            .apiID("<id>")
                            .build();

                    GetAllApiVersionsResponse res = sdk.apis().getAllApiVersions()
                            .request(req)
                            .call();

                    if (res.apis().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}"]["put"]
    update:
      x-codeSamples:
        - lang: java
          label: upsertApi
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.UpsertApiRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.UpsertApiResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.ApiInput;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    UpsertApiRequest req = UpsertApiRequest.builder()
                            .apiID("<id>")
                            .api(ApiInput.builder()
                                .apiId("<id>")
                                .description("consequently brr happily yowza however gosh investigate joyfully direct")
                                .versionId("<id>")
                                .build())
                            .build();

                    UpsertApiResponse res = sdk.apis().upsertApi()
                            .request(req)
                            .call();

                    if (res.api().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/api_endpoints"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: getAllApiEndpoints
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetAllApiEndpointsRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetAllApiEndpointsResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GetAllApiEndpointsRequest req = GetAllApiEndpointsRequest.builder()
                            .apiID("<id>")
                            .build();

                    GetAllApiEndpointsResponse res = sdk.apiEndpoints().getAllApiEndpoints()
                            .request(req)
                            .call();

                    if (res.apiEndpoints().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}"]["delete"]
    update:
      x-codeSamples:
        - lang: java
          label: deleteApi
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.DeleteApiRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.DeleteApiResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    DeleteApiRequest req = DeleteApiRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .build();

                    DeleteApiResponse res = sdk.apis().deleteApi()
                            .request(req)
                            .call();

                    // handle response
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/api_endpoints"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: getAllForVersionApiEndpoints
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetAllForVersionApiEndpointsRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetAllForVersionApiEndpointsResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GetAllForVersionApiEndpointsRequest req = GetAllForVersionApiEndpointsRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .build();

                    GetAllForVersionApiEndpointsResponse res = sdk.apiEndpoints().getAllForVersionApiEndpoints()
                            .request(req)
                            .call();

                    if (res.apiEndpoints().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/api_endpoints/find/{displayName}"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: findApiEndpoint
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.FindApiEndpointRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.FindApiEndpointResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    FindApiEndpointRequest req = FindApiEndpointRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .displayName("Don_Kihn39")
                            .build();

                    FindApiEndpointResponse res = sdk.apiEndpoints().findApiEndpoint()
                            .request(req)
                            .call();

                    if (res.apiEndpoint().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}"]["delete"]
    update:
      x-codeSamples:
        - lang: java
          label: deleteApiEndpoint
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.DeleteApiEndpointRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.DeleteApiEndpointResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    DeleteApiEndpointRequest req = DeleteApiEndpointRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .apiEndpointID("<id>")
                            .build();

                    DeleteApiEndpointResponse res = sdk.apiEndpoints().deleteApiEndpoint()
                            .request(req)
                            .call();

                    // handle response
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: getApiEndpoint
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetApiEndpointRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetApiEndpointResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GetApiEndpointRequest req = GetApiEndpointRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .apiEndpointID("<id>")
                            .build();

                    GetApiEndpointResponse res = sdk.apiEndpoints().getApiEndpoint()
                            .request(req)
                            .call();

                    if (res.apiEndpoint().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}"]["put"]
    update:
      x-codeSamples:
        - lang: java
          label: upsertApiEndpoint
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.UpsertApiEndpointRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.UpsertApiEndpointResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.ApiEndpointInput;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    UpsertApiEndpointRequest req = UpsertApiEndpointRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .apiEndpointID("<id>")
                            .apiEndpoint(ApiEndpointInput.builder()
                                .apiEndpointId("<id>")
                                .description("commandeer equate pish psst hoot ugh frankly supposing")
                                .displayName("Eliseo.Little15")
                                .method("<value>")
                                .path("/etc/defaults")
                                .versionId("<id>")
                                .build())
                            .build();

                    UpsertApiEndpointResponse res = sdk.apiEndpoints().upsertApiEndpoint()
                            .request(req)
                            .call();

                    if (res.apiEndpoint().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}/generate/openapi"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: generateOpenApiSpecForApiEndpoint
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GenerateOpenApiSpecForApiEndpointRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GenerateOpenApiSpecForApiEndpointResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GenerateOpenApiSpecForApiEndpointRequest req = GenerateOpenApiSpecForApiEndpointRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .apiEndpointID("<id>")
                            .build();

                    GenerateOpenApiSpecForApiEndpointResponse res = sdk.apiEndpoints().generateOpenApiSpecForApiEndpoint()
                            .request(req)
                            .call();

                    if (res.generateOpenApiSpecDiff().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}/generate/postman"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: generatePostmanCollectionForApiEndpoint
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GeneratePostmanCollectionForApiEndpointRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GeneratePostmanCollectionForApiEndpointResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GeneratePostmanCollectionForApiEndpointRequest req = GeneratePostmanCollectionForApiEndpointRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .apiEndpointID("<id>")
                            .build();

                    GeneratePostmanCollectionForApiEndpointResponse res = sdk.apiEndpoints().generatePostmanCollectionForApiEndpoint()
                            .request(req)
                            .call();

                    if (res.postmanCollection().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/generate/openapi"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: generateOpenApiSpec
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GenerateOpenApiSpecRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GenerateOpenApiSpecResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GenerateOpenApiSpecRequest req = GenerateOpenApiSpecRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .build();

                    GenerateOpenApiSpecResponse res = sdk.apis().generateOpenApiSpec()
                            .request(req)
                            .call();

                    if (res.generateOpenApiSpecDiff().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/generate/postman"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: generatePostmanCollection
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GeneratePostmanCollectionRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GeneratePostmanCollectionResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GeneratePostmanCollectionRequest req = GeneratePostmanCollectionRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .build();

                    GeneratePostmanCollectionResponse res = sdk.apis().generatePostmanCollection()
                            .request(req)
                            .call();

                    if (res.postmanCollection().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/metadata"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: getVersionMetadata
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetVersionMetadataRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetVersionMetadataResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GetVersionMetadataRequest req = GetVersionMetadataRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .build();

                    GetVersionMetadataResponse res = sdk.metadata().getVersionMetadata()
                            .request(req)
                            .call();

                    if (res.versionMetadata().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/metadata"]["post"]
    update:
      x-codeSamples:
        - lang: java
          label: insertVersionMetadata
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.InsertVersionMetadataRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.InsertVersionMetadataResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import dev.speakeasyapi.javaclientsdk.models.shared.VersionMetadataInput;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    InsertVersionMetadataRequest req = InsertVersionMetadataRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .versionMetadata(VersionMetadataInput.builder()
                                .metaKey("<value>")
                                .metaValue("<value>")
                                .build())
                            .build();

                    InsertVersionMetadataResponse res = sdk.metadata().insertVersionMetadata()
                            .request(req)
                            .call();

                    if (res.versionMetadata().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/metadata/{metaKey}/{metaValue}"]["delete"]
    update:
      x-codeSamples:
        - lang: java
          label: deleteVersionMetadata
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.DeleteVersionMetadataRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.DeleteVersionMetadataResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    DeleteVersionMetadataRequest req = DeleteVersionMetadataRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .metaKey("<value>")
                            .metaValue("<value>")
                            .build();

                    DeleteVersionMetadataResponse res = sdk.metadata().deleteVersionMetadata()
                            .request(req)
                            .call();

                    // handle response
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/schema"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: getSchema
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetSchemaRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetSchemaResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GetSchemaRequest req = GetSchemaRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .build();

                    GetSchemaResponse res = sdk.schemas().getSchema()
                            .request(req)
                            .call();

                    if (res.schema().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/schema"]["post"]
    update:
      x-codeSamples:
        - lang: java
          label: registerSchema
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.File;
            import dev.speakeasyapi.javaclientsdk.models.operations.RegisterSchemaRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.RegisterSchemaRequestBody;
            import dev.speakeasyapi.javaclientsdk.models.operations.RegisterSchemaResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;
            import java.nio.charset.StandardCharsets;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    RegisterSchemaRequest req = RegisterSchemaRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .requestBody(RegisterSchemaRequestBody.builder()
                                .file(File.builder()
                                    .fileName("example.file")
                                    .content("0xCFA30D144c".getBytes(StandardCharsets.UTF_8))
                                    .build())
                                .build())
                            .build();

                    RegisterSchemaResponse res = sdk.schemas().registerSchema()
                            .request(req)
                            .call();

                    // handle response
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/schema/download"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: downloadSchema
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.DownloadSchemaRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.DownloadSchemaResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    DownloadSchemaRequest req = DownloadSchemaRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .build();

                    DownloadSchemaResponse res = sdk.schemas().downloadSchema()
                            .request(req)
                            .call();

                    if (res.twoHundredApplicationJsonSchema().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/schema/{baseRevisionID}/diff/{targetRevisionID}"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: getSchemaDiff
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetSchemaDiffRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetSchemaDiffResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GetSchemaDiffRequest req = GetSchemaDiffRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .baseRevisionID("<id>")
                            .targetRevisionID("<id>")
                            .build();

                    GetSchemaDiffResponse res = sdk.schemas().getSchemaDiff()
                            .request(req)
                            .call();

                    if (res.schemaDiff().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/schema/{revisionID}"]["delete"]
    update:
      x-codeSamples:
        - lang: java
          label: deleteSchema
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.DeleteSchemaRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.DeleteSchemaResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    DeleteSchemaRequest req = DeleteSchemaRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .revisionID("<id>")
                            .build();

                    DeleteSchemaResponse res = sdk.schemas().deleteSchema()
                            .request(req)
                            .call();

                    // handle response
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/schema/{revisionID}"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: getSchemaRevision
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetSchemaRevisionRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetSchemaRevisionResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GetSchemaRevisionRequest req = GetSchemaRevisionRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .revisionID("<id>")
                            .build();

                    GetSchemaRevisionResponse res = sdk.schemas().getSchemaRevision()
                            .request(req)
                            .call();

                    if (res.schema().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/schema/{revisionID}/download"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: downloadSchemaRevision
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.DownloadSchemaRevisionRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.DownloadSchemaRevisionResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    DownloadSchemaRevisionRequest req = DownloadSchemaRevisionRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .revisionID("<id>")
                            .build();

                    DownloadSchemaRevisionResponse res = sdk.schemas().downloadSchemaRevision()
                            .request(req)
                            .call();

                    if (res.twoHundredApplicationJsonSchema().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/apis/{apiID}/version/{versionID}/schemas"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: getSchemas
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetSchemasRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetSchemasResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GetSchemasRequest req = GetSchemasRequest.builder()
                            .apiID("<id>")
                            .versionID("<id>")
                            .build();

                    GetSchemasResponse res = sdk.schemas().getSchemas()
                            .request(req)
                            .call();

                    if (res.schemata().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/auth/validate"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: validateApiKey
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.ValidateApiKeyResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    ValidateApiKeyResponse res = sdk.auth().validateApiKey()
                            .call();

                    if (res.apiKeyDetails().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/eventlog/query"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: queryEventLog
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.QueryEventLogRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.QueryEventLogResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    QueryEventLogRequest req = QueryEventLogRequest.builder()
                            .build();

                    QueryEventLogResponse res = sdk.requests().queryEventLog()
                            .request(req)
                            .call();

                    if (res.boundedRequests().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/eventlog/{requestID}"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: getRequestFromEventLog
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetRequestFromEventLogRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetRequestFromEventLogResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GetRequestFromEventLogRequest req = GetRequestFromEventLogRequest.builder()
                            .requestID("<id>")
                            .build();

                    GetRequestFromEventLogResponse res = sdk.requests().getRequestFromEventLog()
                            .request(req)
                            .call();

                    if (res.unboundedRequest().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/eventlog/{requestID}/generate/postman"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: generateRequestPostmanCollection
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GenerateRequestPostmanCollectionRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GenerateRequestPostmanCollectionResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GenerateRequestPostmanCollectionRequest req = GenerateRequestPostmanCollectionRequest.builder()
                            .requestID("<id>")
                            .build();

                    GenerateRequestPostmanCollectionResponse res = sdk.requests().generateRequestPostmanCollection()
                            .request(req)
                            .call();

                    if (res.postmanCollection().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/workspace/embed-access-token"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: getEmbedAccessToken
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetEmbedAccessTokenRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetEmbedAccessTokenResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GetEmbedAccessTokenRequest req = GetEmbedAccessTokenRequest.builder()
                            .build();

                    GetEmbedAccessTokenResponse res = sdk.embeds().getEmbedAccessToken()
                            .request(req)
                            .call();

                    if (res.embedAccessTokenResponse().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/workspace/embed-access-tokens/valid"]["get"]
    update:
      x-codeSamples:
        - lang: java
          label: getValidEmbedAccessTokens
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.GetValidEmbedAccessTokensResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    GetValidEmbedAccessTokensResponse res = sdk.embeds().getValidEmbedAccessTokens()
                            .call();

                    if (res.embedTokens().isPresent()) {
                        // handle response
                    }
                }
            }
  - target: $["paths"]["/v1/workspace/embed-access-tokens/{tokenID}"]["delete"]
    update:
      x-codeSamples:
        - lang: java
          label: revokeEmbedAccessToken
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.operations.RevokeEmbedAccessTokenRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.RevokeEmbedAccessTokenResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;

            public class Application {

                public static void main(String[] args) throws Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    RevokeEmbedAccessTokenRequest req = RevokeEmbedAccessTokenRequest.builder()
                            .tokenID("<id>")
                            .build();

                    RevokeEmbedAccessTokenResponse res = sdk.embeds().revokeEmbedAccessToken()
                            .request(req)
                            .call();

                    // handle response
                }
            }
  - target: $["paths"]["/v1/workspace/{workspaceID}/events"]["post"]
    update:
      x-codeSamples:
        - lang: java
          label: postWorkspaceEvents
          source: |-
            package hello.world;

            import dev.speakeasyapi.javaclientsdk.RyanTest;
            import dev.speakeasyapi.javaclientsdk.models.errors.Error;
            import dev.speakeasyapi.javaclientsdk.models.operations.PostWorkspaceEventsRequest;
            import dev.speakeasyapi.javaclientsdk.models.operations.PostWorkspaceEventsResponse;
            import dev.speakeasyapi.javaclientsdk.models.shared.CliEvent;
            import dev.speakeasyapi.javaclientsdk.models.shared.InteractionType;
            import dev.speakeasyapi.javaclientsdk.models.shared.Security;
            import java.lang.Exception;
            import java.time.OffsetDateTime;
            import java.util.List;

            public class Application {

                public static void main(String[] args) throws Error, Exception {

                    RyanTest sdk = RyanTest.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                        .build();

                    PostWorkspaceEventsRequest req = PostWorkspaceEventsRequest.builder()
                            .requestBody(List.of(
                                CliEvent.builder()
                                    .id("<id>")
                                    .executionId("<id>")
                                    .workspaceId("<id>")
                                    .speakeasyApiKeyName("<value>")
                                    .interactionType(InteractionType.TARGET_GENERATE)
                                    .localStartedAt(OffsetDateTime.parse("2024-02-23T15:36:59.809Z"))
                                    .createdAt(OffsetDateTime.parse("2025-11-03T15:10:38.542Z"))
                                    .speakeasyVersion("<value>")
                                    .success(false)
                                    .build(),
                                CliEvent.builder()
                                    .id("<id>")
                                    .executionId("<id>")
                                    .workspaceId("<id>")
                                    .speakeasyApiKeyName("<value>")
                                    .interactionType(InteractionType.CLI_EXEC)
                                    .localStartedAt(OffsetDateTime.parse("2024-11-02T18:39:29.949Z"))
                                    .createdAt(OffsetDateTime.parse("2023-07-17T16:15:35.191Z"))
                                    .speakeasyVersion("<value>")
                                    .success(true)
                                    .build(),
                                CliEvent.builder()
                                    .id("<id>")
                                    .executionId("<id>")
                                    .workspaceId("<id>")
                                    .speakeasyApiKeyName("<value>")
                                    .interactionType(InteractionType.TARGET_GENERATE)
                                    .localStartedAt(OffsetDateTime.parse("2025-07-20T12:49:37.190Z"))
                                    .createdAt(OffsetDateTime.parse("2023-06-08T00:19:02.158Z"))
                                    .speakeasyVersion("<value>")
                                    .success(true)
                                    .build()))
                            .workspaceID("<id>")
                            .build();

                    PostWorkspaceEventsResponse res = sdk.events().postWorkspaceEvents()
                            .request(req)
                            .call();

                    // handle response
                }
            }
