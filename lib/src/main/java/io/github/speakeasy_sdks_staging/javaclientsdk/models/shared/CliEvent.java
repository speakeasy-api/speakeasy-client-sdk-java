/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.DateTimeDeserializer;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.DateTimeSerializer;
import java.time.OffsetDateTime;


public class CliEvent {
    /**
     * Remote commit ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commit_head")
    public String commitHead;

    public CliEvent withCommitHead(String commitHead) {
        this.commitHead = commitHead;
        return this;
    }
    
    /**
     * Timestamp when the event was created in the database.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public CliEvent withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Duration of the event in milliseconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration_ms")
    public Long durationMs;

    public CliEvent withDurationMs(Long durationMs) {
        this.durationMs = durationMs;
        return this;
    }
    
    /**
     * Unique identifier for each execution of the CLI.
     */
    @JsonProperty("execution_id")
    public String executionId;

    public CliEvent withExecutionId(String executionId) {
        this.executionId = executionId;
        return this;
    }
    
    /**
     * Bump type of the lock file (calculated semver delta, or a custom change (manual release))
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_bump_type")
    public GenerateBumpType generateBumpType;

    public CliEvent withGenerateBumpType(GenerateBumpType generateBumpType) {
        this.generateBumpType = generateBumpType;
        return this;
    }
    
    /**
     * Checksum of the configuration file (post generation)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_config_post_checksum")
    public String generateConfigPostChecksum;

    public CliEvent withGenerateConfigPostChecksum(String generateConfigPostChecksum) {
        this.generateConfigPostChecksum = generateConfigPostChecksum;
        return this;
    }
    
    /**
     * Rendered configuration file (post generation)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_config_post_raw")
    public String generateConfigPostRaw;

    public CliEvent withGenerateConfigPostRaw(String generateConfigPostRaw) {
        this.generateConfigPostRaw = generateConfigPostRaw;
        return this;
    }
    
    /**
     * Version of the generated target (post generation)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_config_post_version")
    public String generateConfigPostVersion;

    public CliEvent withGenerateConfigPostVersion(String generateConfigPostVersion) {
        this.generateConfigPostVersion = generateConfigPostVersion;
        return this;
    }
    
    /**
     * Checksum of the configuration file (prior to generation)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_config_pre_checksum")
    public String generateConfigPreChecksum;

    public CliEvent withGenerateConfigPreChecksum(String generateConfigPreChecksum) {
        this.generateConfigPreChecksum = generateConfigPreChecksum;
        return this;
    }
    
    /**
     * Rendered configuration file (prior to generation)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_config_pre_raw")
    public String generateConfigPreRaw;

    public CliEvent withGenerateConfigPreRaw(String generateConfigPreRaw) {
        this.generateConfigPreRaw = generateConfigPreRaw;
        return this;
    }
    
    /**
     * Version of the generated target (prior to generation)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_config_pre_version")
    public String generateConfigPreVersion;

    public CliEvent withGenerateConfigPreVersion(String generateConfigPreVersion) {
        this.generateConfigPreVersion = generateConfigPreVersion;
        return this;
    }
    
    /**
     * gen.lock ID (expected to be a uuid).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_id")
    public String generateGenLockId;

    public CliEvent withGenerateGenLockId(String generateGenLockId) {
        this.generateGenLockId = generateGenLockId;
        return this;
    }
    
    /**
     * Features post generation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_post_features")
    public String generateGenLockPostFeatures;

    public CliEvent withGenerateGenLockPostFeatures(String generateGenLockPostFeatures) {
        this.generateGenLockPostFeatures = generateGenLockPostFeatures;
        return this;
    }
    
    /**
     * Checksum of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_pre_doc_checksum")
    public String generateGenLockPreDocChecksum;

    public CliEvent withGenerateGenLockPreDocChecksum(String generateGenLockPreDocChecksum) {
        this.generateGenLockPreDocChecksum = generateGenLockPreDocChecksum;
        return this;
    }
    
    /**
     * info.Version of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_pre_doc_version")
    public String generateGenLockPreDocVersion;

    public CliEvent withGenerateGenLockPreDocVersion(String generateGenLockPreDocVersion) {
        this.generateGenLockPreDocVersion = generateGenLockPreDocVersion;
        return this;
    }
    
    /**
     * Features prior to generation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_pre_features")
    public String generateGenLockPreFeatures;

    public CliEvent withGenerateGenLockPreFeatures(String generateGenLockPreFeatures) {
        this.generateGenLockPreFeatures = generateGenLockPreFeatures;
        return this;
    }
    
    /**
     * Artifact version for the Previous Generation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_pre_version")
    public String generateGenLockPreVersion;

    public CliEvent withGenerateGenLockPreVersion(String generateGenLockPreVersion) {
        this.generateGenLockPreVersion = generateGenLockPreVersion;
        return this;
    }
    
    /**
     * Indicates whether tests were output.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_output_tests")
    public Boolean generateOutputTests;

    public CliEvent withGenerateOutputTests(Boolean generateOutputTests) {
        this.generateOutputTests = generateOutputTests;
        return this;
    }
    
    /**
     * Indicates whether the target was considered published.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_published")
    public Boolean generatePublished;

    public CliEvent withGeneratePublished(Boolean generatePublished) {
        this.generatePublished = generatePublished;
        return this;
    }
    
    /**
     * Expected Repo URL, for use in documentation generation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_repo_url")
    public String generateRepoUrl;

    public CliEvent withGenerateRepoUrl(String generateRepoUrl) {
        this.generateRepoUrl = generateRepoUrl;
        return this;
    }
    
    /**
     * The target of the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_target")
    public String generateTarget;

    public CliEvent withGenerateTarget(String generateTarget) {
        this.generateTarget = generateTarget;
        return this;
    }
    
    /**
     * The version of the target.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_target_version")
    public String generateTargetVersion;

    public CliEvent withGenerateTargetVersion(String generateTargetVersion) {
        this.generateTargetVersion = generateTargetVersion;
        return this;
    }
    
    /**
     * Version of the generation logic used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_version")
    public String generateVersion;

    public CliEvent withGenerateVersion(String generateVersion) {
        this.generateVersion = generateVersion;
        return this;
    }
    
    /**
     * GitHub organization of the action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_organization")
    public String ghActionOrganization;

    public CliEvent withGhActionOrganization(String ghActionOrganization) {
        this.ghActionOrganization = ghActionOrganization;
        return this;
    }
    
    /**
     * GitHub repository of the action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_repository")
    public String ghActionRepository;

    public CliEvent withGhActionRepository(String ghActionRepository) {
        this.ghActionRepository = ghActionRepository;
        return this;
    }
    
    /**
     * Link to the GitHub action run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_run_link")
    public String ghActionRunLink;

    public CliEvent withGhActionRunLink(String ghActionRunLink) {
        this.ghActionRunLink = ghActionRunLink;
        return this;
    }
    
    /**
     * Version of the GitHub action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_version")
    public String ghActionVersion;

    public CliEvent withGhActionVersion(String ghActionVersion) {
        this.ghActionVersion = ghActionVersion;
        return this;
    }
    
    /**
     * Current working directory relative to the git root.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_relative_cwd")
    public String gitRelativeCwd;

    public CliEvent withGitRelativeCwd(String gitRelativeCwd) {
        this.gitRelativeCwd = gitRelativeCwd;
        return this;
    }
    
    /**
     * Default owner for git remote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_remote_default_owner")
    public String gitRemoteDefaultOwner;

    public CliEvent withGitRemoteDefaultOwner(String gitRemoteDefaultOwner) {
        this.gitRemoteDefaultOwner = gitRemoteDefaultOwner;
        return this;
    }
    
    /**
     * Default repository name for git remote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_remote_default_repo")
    public String gitRemoteDefaultRepo;

    public CliEvent withGitRemoteDefaultRepo(String gitRemoteDefaultRepo) {
        this.gitRemoteDefaultRepo = gitRemoteDefaultRepo;
        return this;
    }
    
    /**
     * User email from git configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_user_email")
    public String gitUserEmail;

    public CliEvent withGitUserEmail(String gitUserEmail) {
        this.gitUserEmail = gitUserEmail;
        return this;
    }
    
    /**
     * User name from git configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_user_name")
    public String gitUserName;

    public CliEvent withGitUserName(String gitUserName) {
        this.gitUserName = gitUserName;
        return this;
    }
    
    /**
     * Remote hostname.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostname")
    public String hostname;

    public CliEvent withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }
    
    /**
     * Unique identifier for each event.
     */
    @JsonProperty("id")
    public String id;

    public CliEvent withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Type of interaction.
     */
    @JsonProperty("interaction_type")
    public InteractionType interactionType;

    public CliEvent withInteractionType(InteractionType interactionType) {
        this.interactionType = interactionType;
        return this;
    }
    
    /**
     * Timestamp when the event completed, in local time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("local_completed_at")
    public OffsetDateTime localCompletedAt;

    public CliEvent withLocalCompletedAt(OffsetDateTime localCompletedAt) {
        this.localCompletedAt = localCompletedAt;
        return this;
    }
    
    /**
     * Timestamp when the event started, in local time.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("local_started_at")
    public OffsetDateTime localStartedAt;

    public CliEvent withLocalStartedAt(OffsetDateTime localStartedAt) {
        this.localStartedAt = localStartedAt;
        return this;
    }
    
    /**
     * Checksum of the currently Rendered OpenAPI document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("management_doc_checksum")
    public String managementDocChecksum;

    public CliEvent withManagementDocChecksum(String managementDocChecksum) {
        this.managementDocChecksum = managementDocChecksum;
        return this;
    }
    
    /**
     * Version taken from info.version field of the Rendered OpenAPI document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("management_doc_version")
    public String managementDocVersion;

    public CliEvent withManagementDocVersion(String managementDocVersion) {
        this.managementDocVersion = managementDocVersion;
        return this;
    }
    
    /**
     * Full CLI command.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw_command")
    public String rawCommand;

    public CliEvent withRawCommand(String rawCommand) {
        this.rawCommand = rawCommand;
        return this;
    }
    
    /**
     * Label of the git repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repo_label")
    public String repoLabel;

    public CliEvent withRepoLabel(String repoLabel) {
        this.repoLabel = repoLabel;
        return this;
    }
    
    /**
     * Identifier of the Speakeasy API key.
     */
    @JsonProperty("speakeasy_api_key_name")
    public String speakeasyApiKeyName;

    public CliEvent withSpeakeasyApiKeyName(String speakeasyApiKeyName) {
        this.speakeasyApiKeyName = speakeasyApiKeyName;
        return this;
    }
    
    /**
     * Version of the Speakeasy CLI.
     */
    @JsonProperty("speakeasy_version")
    public String speakeasyVersion;

    public CliEvent withSpeakeasyVersion(String speakeasyVersion) {
        this.speakeasyVersion = speakeasyVersion;
        return this;
    }
    
    /**
     * Indicates whether the event was successful.
     */
    @JsonProperty("success")
    public Boolean success;

    public CliEvent withSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    
    /**
     * Identifier of the workspace.
     */
    @JsonProperty("workspace_id")
    public String workspaceId;

    public CliEvent withWorkspaceId(String workspaceId) {
        this.workspaceId = workspaceId;
        return this;
    }
    
    public CliEvent(@JsonProperty("created_at") OffsetDateTime createdAt, @JsonProperty("execution_id") String executionId, @JsonProperty("id") String id, @JsonProperty("interaction_type") InteractionType interactionType, @JsonProperty("local_started_at") OffsetDateTime localStartedAt, @JsonProperty("speakeasy_api_key_name") String speakeasyApiKeyName, @JsonProperty("speakeasy_version") String speakeasyVersion, @JsonProperty("success") Boolean success, @JsonProperty("workspace_id") String workspaceId) {
        this.createdAt = createdAt;
        this.executionId = executionId;
        this.id = id;
        this.interactionType = interactionType;
        this.localStartedAt = localStartedAt;
        this.speakeasyApiKeyName = speakeasyApiKeyName;
        this.speakeasyVersion = speakeasyVersion;
        this.success = success;
        this.workspaceId = workspaceId;
  }
}
